[
  {
    "question": "Create a GitHub Actions workflow that replicates the CI process of testing CloudFormation Guard rules and building a ruleset, as defined in the provided YAML.",
    "answer": "name: Continuous Integration\n\non:\n  push:\n  pull_request:\n    branches:\n      - main\n\nenv:\n  VERSION: \"1.0.2\"\n\njobs:\n  testRules:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Run guard rules tests\n      shell: bash\n      run: |\n        curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/aws-cloudformation/cloudformation-guard/main/install-guard.sh | sh\n        export PATH=${PATH}:~/.guard/bin\n        cfn-guard test -d ./rules/\n    ## If test fails run step to pull out only failed tests\n    - name: Display Failed Rules Only\n      if: ${{ failure() }}\n      shell: bash\n      run: |\n        curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/aws-cloudformation/cloudformation-guard/main/install-guard.sh | sh\n        export PATH=${PATH}:~/.guard/bin\n        cfn-guard test -d ./rules/ | grep \"FAIL Rules:\" -B 2 -A 1\n  buildRuleSet:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repo\n        uses: actions/checkout@v2\n      - run: |\n          chmod +x ./mappings/build.py\n          python3 ./mappings/build.py -r $VERSION\n        shell: bash\n      - uses: actions/upload-artifact@v3\n        with:\n          name: ruleset-build\n          path: |\n            docker/output/\n            mappings/rule_set_guard_rules_registry_all_rules.json\n          if-no-files-found: error\n",
    "source": "aws-cloudformation/aws-guard-rules-registry",
    "path": ".github/workflows/ci.yml",
    "url": "https://github.com/aws-cloudformation/aws-guard-rules-registry/blob/7f7340c26ae5d5e8874651dbffeb12e0e9f505b6/.github/workflows/ci.yml",
    "retrieved_at": "2025-09-06T12:39:57.650917Z",
    "question_style": "style_1"
  },
  {
    "question": "What events and branch configurations trigger this GitHub Actions workflow?",
    "answer": "name: Continuous Integration\n\non:\n  push:\n  pull_request:\n    branches:\n      - main\n\nenv:\n  VERSION: \"1.0.2\"\n\njobs:\n  testRules:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Run guard rules tests\n      shell: bash\n      run: |\n        curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/aws-cloudformation/cloudformation-guard/main/install-guard.sh | sh\n        export PATH=${PATH}:~/.guard/bin\n        cfn-guard test -d ./rules/\n    ## If test fails run step to pull out only failed tests\n    - name: Display Failed Rules Only\n      if: ${{ failure() }}\n      shell: bash\n      run: |\n        curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/aws-cloudformation/cloudformation-guard/main/install-guard.sh | sh\n        export PATH=${PATH}:~/.guard/bin\n        cfn-guard test -d ./rules/ | grep \"FAIL Rules:\" -B 2 -A 1\n  buildRuleSet:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repo\n        uses: actions/checkout@v2\n      - run: |\n          chmod +x ./mappings/build.py\n          python3 ./mappings/build.py -r $VERSION\n        shell: bash\n      - uses: actions/upload-artifact@v3\n        with:\n          name: ruleset-build\n          path: |\n            docker/output/\n            mappings/rule_set_guard_rules_registry_all_rules.json\n          if-no-files-found: error\n",
    "source": "aws-cloudformation/aws-guard-rules-registry",
    "path": ".github/workflows/ci.yml",
    "url": "https://github.com/aws-cloudformation/aws-guard-rules-registry/blob/7f7340c26ae5d5e8874651dbffeb12e0e9f505b6/.github/workflows/ci.yml",
    "retrieved_at": "2025-09-06T12:39:58.212878Z",
    "question_style": "style_2"
  },
  {
    "question": "Which jobs or steps within this workflow execute concurrently or sequentially based on dependencies?",
    "answer": "name: Continuous Integration\n\non:\n  push:\n  pull_request:\n    branches:\n      - main\n\nenv:\n  VERSION: \"1.0.2\"\n\njobs:\n  testRules:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Run guard rules tests\n      shell: bash\n      run: |\n        curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/aws-cloudformation/cloudformation-guard/main/install-guard.sh | sh\n        export PATH=${PATH}:~/.guard/bin\n        cfn-guard test -d ./rules/\n    ## If test fails run step to pull out only failed tests\n    - name: Display Failed Rules Only\n      if: ${{ failure() }}\n      shell: bash\n      run: |\n        curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/aws-cloudformation/cloudformation-guard/main/install-guard.sh | sh\n        export PATH=${PATH}:~/.guard/bin\n        cfn-guard test -d ./rules/ | grep \"FAIL Rules:\" -B 2 -A 1\n  buildRuleSet:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repo\n        uses: actions/checkout@v2\n      - run: |\n          chmod +x ./mappings/build.py\n          python3 ./mappings/build.py -r $VERSION\n        shell: bash\n      - uses: actions/upload-artifact@v3\n        with:\n          name: ruleset-build\n          path: |\n            docker/output/\n            mappings/rule_set_guard_rules_registry_all_rules.json\n          if-no-files-found: error\n",
    "source": "aws-cloudformation/aws-guard-rules-registry",
    "path": ".github/workflows/ci.yml",
    "url": "https://github.com/aws-cloudformation/aws-guard-rules-registry/blob/7f7340c26ae5d5e8874651dbffeb12e0e9f505b6/.github/workflows/ci.yml",
    "retrieved_at": "2025-09-06T12:39:58.635846Z",
    "question_style": "style_3"
  },
  {
    "question": "How is the `VERSION` environment variable used in the `buildRuleSet` job's Python script execution?",
    "answer": "name: Continuous Integration\n\non:\n  push:\n  pull_request:\n    branches:\n      - main\n\nenv:\n  VERSION: \"1.0.2\"\n\njobs:\n  testRules:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Run guard rules tests\n      shell: bash\n      run: |\n        curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/aws-cloudformation/cloudformation-guard/main/install-guard.sh | sh\n        export PATH=${PATH}:~/.guard/bin\n        cfn-guard test -d ./rules/\n    ## If test fails run step to pull out only failed tests\n    - name: Display Failed Rules Only\n      if: ${{ failure() }}\n      shell: bash\n      run: |\n        curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/aws-cloudformation/cloudformation-guard/main/install-guard.sh | sh\n        export PATH=${PATH}:~/.guard/bin\n        cfn-guard test -d ./rules/ | grep \"FAIL Rules:\" -B 2 -A 1\n  buildRuleSet:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repo\n        uses: actions/checkout@v2\n      - run: |\n          chmod +x ./mappings/build.py\n          python3 ./mappings/build.py -r $VERSION\n        shell: bash\n      - uses: actions/upload-artifact@v3\n        with:\n          name: ruleset-build\n          path: |\n            docker/output/\n            mappings/rule_set_guard_rules_registry_all_rules.json\n          if-no-files-found: error\n",
    "source": "aws-cloudformation/aws-guard-rules-registry",
    "path": ".github/workflows/ci.yml",
    "url": "https://github.com/aws-cloudformation/aws-guard-rules-registry/blob/7f7340c26ae5d5e8874651dbffeb12e0e9f505b6/.github/workflows/ci.yml",
    "retrieved_at": "2025-09-06T12:39:59.079387Z",
    "question_style": "style_4"
  },
  {
    "question": "What is the main function or goal of this CI workflow?",
    "answer": "name: Continuous Integration\n\non:\n  push:\n  pull_request:\n    branches:\n      - main\n\nenv:\n  VERSION: \"1.0.2\"\n\njobs:\n  testRules:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Run guard rules tests\n      shell: bash\n      run: |\n        curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/aws-cloudformation/cloudformation-guard/main/install-guard.sh | sh\n        export PATH=${PATH}:~/.guard/bin\n        cfn-guard test -d ./rules/\n    ## If test fails run step to pull out only failed tests\n    - name: Display Failed Rules Only\n      if: ${{ failure() }}\n      shell: bash\n      run: |\n        curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/aws-cloudformation/cloudformation-guard/main/install-guard.sh | sh\n        export PATH=${PATH}:~/.guard/bin\n        cfn-guard test -d ./rules/ | grep \"FAIL Rules:\" -B 2 -A 1\n  buildRuleSet:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repo\n        uses: actions/checkout@v2\n      - run: |\n          chmod +x ./mappings/build.py\n          python3 ./mappings/build.py -r $VERSION\n        shell: bash\n      - uses: actions/upload-artifact@v3\n        with:\n          name: ruleset-build\n          path: |\n            docker/output/\n            mappings/rule_set_guard_rules_registry_all_rules.json\n          if-no-files-found: error\n",
    "source": "aws-cloudformation/aws-guard-rules-registry",
    "path": ".github/workflows/ci.yml",
    "url": "https://github.com/aws-cloudformation/aws-guard-rules-registry/blob/7f7340c26ae5d5e8874651dbffeb12e0e9f505b6/.github/workflows/ci.yml",
    "retrieved_at": "2025-09-06T12:39:59.523621Z",
    "question_style": "style_5"
  },
  {
    "question": "Create a GitHub Actions workflow replicating the given YAML's PR GPU tests, including concurrency, matrix strategy, and secrets.",
    "answer": "name: PR GPU tests\non:\n  push:\n    branches:\n    - main\n    - release/*\n  pull_request_target:\n    branches:\n    - main\n    - release/**\n  workflow_dispatch:\n# Cancel old runs when a new commit is pushed to the same branch if not on main or dev\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}\n  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}\njobs:\n  pytest-gpu:\n    uses: ./.github/workflows/pytest-gpu.yaml\n    strategy:\n      matrix:\n        include:\n        - name: 'gpu-latest'\n          container: mosaicml/pytorch:latest  # mosaicml/pytorch:1.13.1_cu117-python3.10-ubuntu20.04\n          markers: 'gpu'\n          pytest_command: 'coverage run -m pytest'\n        - name: 'gpu-2.0.1'\n          container: mosaicml/pytorch:2.0.1_cu117-python3.10-ubuntu20.04\n          markers: 'gpu'\n          pytest_command: 'coverage run -m pytest'\n    name: ${{ matrix.name }}\n    if: github.repository_owner == 'mosaicml'\n    with:\n      container: ${{ matrix.container }}\n      mcloud-timeout: 1200\n      name: ${{ matrix.name }}\n      pytest-command: ${{ matrix.pytest_command }}\n      pytest-markers: ${{ matrix.markers }}\n      python-version: 3.9\n    secrets:\n      mcloud-api-key: ${{ secrets.MCLOUD_API_KEY }}\n",
    "source": "kyegomez/Andromeda",
    "path": ".github/workflows/pr-gpu.yaml",
    "url": "https://github.com/kyegomez/Andromeda/blob/991bd81d8c4ed072ec4e6bc2b9c8fc66903463cc/.github/workflows/pr-gpu.yaml",
    "retrieved_at": "2025-09-06T12:40:00.262442Z",
    "question_style": "style_1"
  },
  {
    "question": "What events trigger the \"PR GPU tests\" workflow?",
    "answer": "name: PR GPU tests\non:\n  push:\n    branches:\n    - main\n    - release/*\n  pull_request_target:\n    branches:\n    - main\n    - release/**\n  workflow_dispatch:\n# Cancel old runs when a new commit is pushed to the same branch if not on main or dev\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}\n  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}\njobs:\n  pytest-gpu:\n    uses: ./.github/workflows/pytest-gpu.yaml\n    strategy:\n      matrix:\n        include:\n        - name: 'gpu-latest'\n          container: mosaicml/pytorch:latest  # mosaicml/pytorch:1.13.1_cu117-python3.10-ubuntu20.04\n          markers: 'gpu'\n          pytest_command: 'coverage run -m pytest'\n        - name: 'gpu-2.0.1'\n          container: mosaicml/pytorch:2.0.1_cu117-python3.10-ubuntu20.04\n          markers: 'gpu'\n          pytest_command: 'coverage run -m pytest'\n    name: ${{ matrix.name }}\n    if: github.repository_owner == 'mosaicml'\n    with:\n      container: ${{ matrix.container }}\n      mcloud-timeout: 1200\n      name: ${{ matrix.name }}\n      pytest-command: ${{ matrix.pytest_command }}\n      pytest-markers: ${{ matrix.markers }}\n      python-version: 3.9\n    secrets:\n      mcloud-api-key: ${{ secrets.MCLOUD_API_KEY }}\n",
    "source": "kyegomez/Andromeda",
    "path": ".github/workflows/pr-gpu.yaml",
    "url": "https://github.com/kyegomez/Andromeda/blob/991bd81d8c4ed072ec4e6bc2b9c8fc66903463cc/.github/workflows/pr-gpu.yaml",
    "retrieved_at": "2025-09-06T12:40:00.703950Z",
    "question_style": "style_2"
  },
  {
    "question": "Which jobs or steps within this workflow run concurrently or sequentially based on dependencies?",
    "answer": "name: PR GPU tests\non:\n  push:\n    branches:\n    - main\n    - release/*\n  pull_request_target:\n    branches:\n    - main\n    - release/**\n  workflow_dispatch:\n# Cancel old runs when a new commit is pushed to the same branch if not on main or dev\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}\n  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}\njobs:\n  pytest-gpu:\n    uses: ./.github/workflows/pytest-gpu.yaml\n    strategy:\n      matrix:\n        include:\n        - name: 'gpu-latest'\n          container: mosaicml/pytorch:latest  # mosaicml/pytorch:1.13.1_cu117-python3.10-ubuntu20.04\n          markers: 'gpu'\n          pytest_command: 'coverage run -m pytest'\n        - name: 'gpu-2.0.1'\n          container: mosaicml/pytorch:2.0.1_cu117-python3.10-ubuntu20.04\n          markers: 'gpu'\n          pytest_command: 'coverage run -m pytest'\n    name: ${{ matrix.name }}\n    if: github.repository_owner == 'mosaicml'\n    with:\n      container: ${{ matrix.container }}\n      mcloud-timeout: 1200\n      name: ${{ matrix.name }}\n      pytest-command: ${{ matrix.pytest_command }}\n      pytest-markers: ${{ matrix.markers }}\n      python-version: 3.9\n    secrets:\n      mcloud-api-key: ${{ secrets.MCLOUD_API_KEY }}\n",
    "source": "kyegomez/Andromeda",
    "path": ".github/workflows/pr-gpu.yaml",
    "url": "https://github.com/kyegomez/Andromeda/blob/991bd81d8c4ed072ec4e6bc2b9c8fc66903463cc/.github/workflows/pr-gpu.yaml",
    "retrieved_at": "2025-09-06T12:40:01.091911Z",
    "question_style": "style_3"
  },
  {
    "question": "How is the `MCLOUD_API_KEY` secret used within the `pytest-gpu` job?",
    "answer": "name: PR GPU tests\non:\n  push:\n    branches:\n    - main\n    - release/*\n  pull_request_target:\n    branches:\n    - main\n    - release/**\n  workflow_dispatch:\n# Cancel old runs when a new commit is pushed to the same branch if not on main or dev\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}\n  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}\njobs:\n  pytest-gpu:\n    uses: ./.github/workflows/pytest-gpu.yaml\n    strategy:\n      matrix:\n        include:\n        - name: 'gpu-latest'\n          container: mosaicml/pytorch:latest  # mosaicml/pytorch:1.13.1_cu117-python3.10-ubuntu20.04\n          markers: 'gpu'\n          pytest_command: 'coverage run -m pytest'\n        - name: 'gpu-2.0.1'\n          container: mosaicml/pytorch:2.0.1_cu117-python3.10-ubuntu20.04\n          markers: 'gpu'\n          pytest_command: 'coverage run -m pytest'\n    name: ${{ matrix.name }}\n    if: github.repository_owner == 'mosaicml'\n    with:\n      container: ${{ matrix.container }}\n      mcloud-timeout: 1200\n      name: ${{ matrix.name }}\n      pytest-command: ${{ matrix.pytest_command }}\n      pytest-markers: ${{ matrix.markers }}\n      python-version: 3.9\n    secrets:\n      mcloud-api-key: ${{ secrets.MCLOUD_API_KEY }}\n",
    "source": "kyegomez/Andromeda",
    "path": ".github/workflows/pr-gpu.yaml",
    "url": "https://github.com/kyegomez/Andromeda/blob/991bd81d8c4ed072ec4e6bc2b9c8fc66903463cc/.github/workflows/pr-gpu.yaml",
    "retrieved_at": "2025-09-06T12:40:01.665699Z",
    "question_style": "style_4"
  },
  {
    "question": "What is the purpose of this workflow, which runs GPU-based pytest jobs on pull requests and pushes to main/release branches?",
    "answer": "name: PR GPU tests\non:\n  push:\n    branches:\n    - main\n    - release/*\n  pull_request_target:\n    branches:\n    - main\n    - release/**\n  workflow_dispatch:\n# Cancel old runs when a new commit is pushed to the same branch if not on main or dev\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}\n  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}\njobs:\n  pytest-gpu:\n    uses: ./.github/workflows/pytest-gpu.yaml\n    strategy:\n      matrix:\n        include:\n        - name: 'gpu-latest'\n          container: mosaicml/pytorch:latest  # mosaicml/pytorch:1.13.1_cu117-python3.10-ubuntu20.04\n          markers: 'gpu'\n          pytest_command: 'coverage run -m pytest'\n        - name: 'gpu-2.0.1'\n          container: mosaicml/pytorch:2.0.1_cu117-python3.10-ubuntu20.04\n          markers: 'gpu'\n          pytest_command: 'coverage run -m pytest'\n    name: ${{ matrix.name }}\n    if: github.repository_owner == 'mosaicml'\n    with:\n      container: ${{ matrix.container }}\n      mcloud-timeout: 1200\n      name: ${{ matrix.name }}\n      pytest-command: ${{ matrix.pytest_command }}\n      pytest-markers: ${{ matrix.markers }}\n      python-version: 3.9\n    secrets:\n      mcloud-api-key: ${{ secrets.MCLOUD_API_KEY }}\n",
    "source": "kyegomez/Andromeda",
    "path": ".github/workflows/pr-gpu.yaml",
    "url": "https://github.com/kyegomez/Andromeda/blob/991bd81d8c4ed072ec4e6bc2b9c8fc66903463cc/.github/workflows/pr-gpu.yaml",
    "retrieved_at": "2025-09-06T12:40:02.253606Z",
    "question_style": "style_5"
  },
  {
    "question": "Create a GitHub Actions workflow YAML file that replicates the cabal CI build process defined in the provided YAML file.",
    "answer": "name: Cabal CI\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n\njobs:\n  build:\n    name: cabal ${{ matrix.ghc }}\n    runs-on: ubuntu-16.04\n    strategy:\n      matrix:\n        ghc: [\"8.10.1\", \"8.8.1\", \"8.6.5\", \"8.6.4\", \"8.6.3\", \"8.6.2\"]\n        cabal: [\"3.0\"]\n\n    steps:\n    - uses: actions/checkout@v1\n    - uses: actions/setup-haskell@v1\n      name: Setup Haskell\n      with:\n        ghc-version: ${{ matrix.ghc }}\n        cabal-version: ${{ matrix.cabal }}\n\n    - uses: actions/cache@v1\n      name: Cache ~/.cabal/packages\n      with:\n        path: ~/.cabal/packages\n        key: cabal-packages-${{ matrix.ghc }}\n\n    - uses: actions/cache@v1\n      name: Cache ~/.cabal/store\n      with:\n        path: ~/.cabal/store\n        key: cabal-store-${{ matrix.ghc }}\n\n    - uses: actions/cache@v1\n      name: Cache dist-newstyle\n      with:\n        path: dist-newstyle\n        key: dist-newstyle-${{ matrix.ghc }}\n\n    - name: Install dependencies\n      run: |\n        cabal update\n    - name: Build\n      run: |\n        cabal new-build\n",
    "source": "sdiehl/pairing",
    "path": ".github/workflows/cabal.yml",
    "url": "https://github.com/sdiehl/pairing/blob/fa41b722d9f260bd00be0b250ce7cc5324f26a09/.github/workflows/cabal.yml",
    "retrieved_at": "2025-09-06T13:06:14.635683Z",
    "question_style": "style_1"
  },
  {
    "question": "What events on which branches trigger this GitHub Actions workflow?",
    "answer": "name: Cabal CI\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n\njobs:\n  build:\n    name: cabal ${{ matrix.ghc }}\n    runs-on: ubuntu-16.04\n    strategy:\n      matrix:\n        ghc: [\"8.10.1\", \"8.8.1\", \"8.6.5\", \"8.6.4\", \"8.6.3\", \"8.6.2\"]\n        cabal: [\"3.0\"]\n\n    steps:\n    - uses: actions/checkout@v1\n    - uses: actions/setup-haskell@v1\n      name: Setup Haskell\n      with:\n        ghc-version: ${{ matrix.ghc }}\n        cabal-version: ${{ matrix.cabal }}\n\n    - uses: actions/cache@v1\n      name: Cache ~/.cabal/packages\n      with:\n        path: ~/.cabal/packages\n        key: cabal-packages-${{ matrix.ghc }}\n\n    - uses: actions/cache@v1\n      name: Cache ~/.cabal/store\n      with:\n        path: ~/.cabal/store\n        key: cabal-store-${{ matrix.ghc }}\n\n    - uses: actions/cache@v1\n      name: Cache dist-newstyle\n      with:\n        path: dist-newstyle\n        key: dist-newstyle-${{ matrix.ghc }}\n\n    - name: Install dependencies\n      run: |\n        cabal update\n    - name: Build\n      run: |\n        cabal new-build\n",
    "source": "sdiehl/pairing",
    "path": ".github/workflows/cabal.yml",
    "url": "https://github.com/sdiehl/pairing/blob/fa41b722d9f260bd00be0b250ce7cc5324f26a09/.github/workflows/cabal.yml",
    "retrieved_at": "2025-09-06T13:06:15.203021Z",
    "question_style": "style_2"
  },
  {
    "question": "Which jobs or steps within the workflow run concurrently or sequentially based on dependencies?",
    "answer": "name: Cabal CI\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n\njobs:\n  build:\n    name: cabal ${{ matrix.ghc }}\n    runs-on: ubuntu-16.04\n    strategy:\n      matrix:\n        ghc: [\"8.10.1\", \"8.8.1\", \"8.6.5\", \"8.6.4\", \"8.6.3\", \"8.6.2\"]\n        cabal: [\"3.0\"]\n\n    steps:\n    - uses: actions/checkout@v1\n    - uses: actions/setup-haskell@v1\n      name: Setup Haskell\n      with:\n        ghc-version: ${{ matrix.ghc }}\n        cabal-version: ${{ matrix.cabal }}\n\n    - uses: actions/cache@v1\n      name: Cache ~/.cabal/packages\n      with:\n        path: ~/.cabal/packages\n        key: cabal-packages-${{ matrix.ghc }}\n\n    - uses: actions/cache@v1\n      name: Cache ~/.cabal/store\n      with:\n        path: ~/.cabal/store\n        key: cabal-store-${{ matrix.ghc }}\n\n    - uses: actions/cache@v1\n      name: Cache dist-newstyle\n      with:\n        path: dist-newstyle\n        key: dist-newstyle-${{ matrix.ghc }}\n\n    - name: Install dependencies\n      run: |\n        cabal update\n    - name: Build\n      run: |\n        cabal new-build\n",
    "source": "sdiehl/pairing",
    "path": ".github/workflows/cabal.yml",
    "url": "https://github.com/sdiehl/pairing/blob/fa41b722d9f260bd00be0b250ce7cc5324f26a09/.github/workflows/cabal.yml",
    "retrieved_at": "2025-09-06T13:06:15.707179Z",
    "question_style": "style_3"
  },
  {
    "question": "How are the cached paths for cabal packages, store, and dist-newstyle differentiated for different GHC versions?",
    "answer": "name: Cabal CI\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n\njobs:\n  build:\n    name: cabal ${{ matrix.ghc }}\n    runs-on: ubuntu-16.04\n    strategy:\n      matrix:\n        ghc: [\"8.10.1\", \"8.8.1\", \"8.6.5\", \"8.6.4\", \"8.6.3\", \"8.6.2\"]\n        cabal: [\"3.0\"]\n\n    steps:\n    - uses: actions/checkout@v1\n    - uses: actions/setup-haskell@v1\n      name: Setup Haskell\n      with:\n        ghc-version: ${{ matrix.ghc }}\n        cabal-version: ${{ matrix.cabal }}\n\n    - uses: actions/cache@v1\n      name: Cache ~/.cabal/packages\n      with:\n        path: ~/.cabal/packages\n        key: cabal-packages-${{ matrix.ghc }}\n\n    - uses: actions/cache@v1\n      name: Cache ~/.cabal/store\n      with:\n        path: ~/.cabal/store\n        key: cabal-store-${{ matrix.ghc }}\n\n    - uses: actions/cache@v1\n      name: Cache dist-newstyle\n      with:\n        path: dist-newstyle\n        key: dist-newstyle-${{ matrix.ghc }}\n\n    - name: Install dependencies\n      run: |\n        cabal update\n    - name: Build\n      run: |\n        cabal new-build\n",
    "source": "sdiehl/pairing",
    "path": ".github/workflows/cabal.yml",
    "url": "https://github.com/sdiehl/pairing/blob/fa41b722d9f260bd00be0b250ce7cc5324f26a09/.github/workflows/cabal.yml",
    "retrieved_at": "2025-09-06T13:06:16.206172Z",
    "question_style": "style_4"
  },
  {
    "question": "What is the primary function of this Cabal CI workflow?",
    "answer": "name: Cabal CI\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n\njobs:\n  build:\n    name: cabal ${{ matrix.ghc }}\n    runs-on: ubuntu-16.04\n    strategy:\n      matrix:\n        ghc: [\"8.10.1\", \"8.8.1\", \"8.6.5\", \"8.6.4\", \"8.6.3\", \"8.6.2\"]\n        cabal: [\"3.0\"]\n\n    steps:\n    - uses: actions/checkout@v1\n    - uses: actions/setup-haskell@v1\n      name: Setup Haskell\n      with:\n        ghc-version: ${{ matrix.ghc }}\n        cabal-version: ${{ matrix.cabal }}\n\n    - uses: actions/cache@v1\n      name: Cache ~/.cabal/packages\n      with:\n        path: ~/.cabal/packages\n        key: cabal-packages-${{ matrix.ghc }}\n\n    - uses: actions/cache@v1\n      name: Cache ~/.cabal/store\n      with:\n        path: ~/.cabal/store\n        key: cabal-store-${{ matrix.ghc }}\n\n    - uses: actions/cache@v1\n      name: Cache dist-newstyle\n      with:\n        path: dist-newstyle\n        key: dist-newstyle-${{ matrix.ghc }}\n\n    - name: Install dependencies\n      run: |\n        cabal update\n    - name: Build\n      run: |\n        cabal new-build\n",
    "source": "sdiehl/pairing",
    "path": ".github/workflows/cabal.yml",
    "url": "https://github.com/sdiehl/pairing/blob/fa41b722d9f260bd00be0b250ce7cc5324f26a09/.github/workflows/cabal.yml",
    "retrieved_at": "2025-09-06T13:06:16.714720Z",
    "question_style": "style_5"
  },
  {
    "question": "Create a GitHub Actions workflow YAML that replicates the functionality of the provided YAML, including Go setup, Redis service, and tests.",
    "answer": "name: Run Tests\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - uses: actions/setup-go@v2\n      with:\n        go-version: '^1.16.3'\n    - uses: supercharge/redis-github-action@1.2.0\n      with:\n        redis-version: 6\n    - run: go test -v -race ./\n",
    "source": "microsoft/redplex",
    "path": ".github/workflows/validate.yml",
    "url": "https://github.com/microsoft/redplex/blob/248ac9a6adfc13bb2da2404bea767dde69dc0272/.github/workflows/validate.yml",
    "retrieved_at": "2025-09-06T13:06:17.347426Z",
    "question_style": "style_1"
  },
  {
    "question": "What events trigger this workflow to run?",
    "answer": "name: Run Tests\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - uses: actions/setup-go@v2\n      with:\n        go-version: '^1.16.3'\n    - uses: supercharge/redis-github-action@1.2.0\n      with:\n        redis-version: 6\n    - run: go test -v -race ./\n",
    "source": "microsoft/redplex",
    "path": ".github/workflows/validate.yml",
    "url": "https://github.com/microsoft/redplex/blob/248ac9a6adfc13bb2da2404bea767dde69dc0272/.github/workflows/validate.yml",
    "retrieved_at": "2025-09-06T13:06:17.829708Z",
    "question_style": "style_2"
  },
  {
    "question": "Which jobs or steps within the 'Run Tests' workflow execute concurrently or sequentially based on dependencies?",
    "answer": "name: Run Tests\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - uses: actions/setup-go@v2\n      with:\n        go-version: '^1.16.3'\n    - uses: supercharge/redis-github-action@1.2.0\n      with:\n        redis-version: 6\n    - run: go test -v -race ./\n",
    "source": "microsoft/redplex",
    "path": ".github/workflows/validate.yml",
    "url": "https://github.com/microsoft/redplex/blob/248ac9a6adfc13bb2da2404bea767dde69dc0272/.github/workflows/validate.yml",
    "retrieved_at": "2025-09-06T13:06:18.272708Z",
    "question_style": "style_3"
  },
  {
    "question": "Does this workflow utilize environment variables, secrets, caching, or artifacts to enhance its testing process?",
    "answer": "name: Run Tests\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - uses: actions/setup-go@v2\n      with:\n        go-version: '^1.16.3'\n    - uses: supercharge/redis-github-action@1.2.0\n      with:\n        redis-version: 6\n    - run: go test -v -race ./\n",
    "source": "microsoft/redplex",
    "path": ".github/workflows/validate.yml",
    "url": "https://github.com/microsoft/redplex/blob/248ac9a6adfc13bb2da2404bea767dde69dc0272/.github/workflows/validate.yml",
    "retrieved_at": "2025-09-06T13:06:18.768610Z",
    "question_style": "style_4"
  },
  {
    "question": "What is the primary function of this \"Run Tests\" workflow?",
    "answer": "name: Run Tests\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - uses: actions/setup-go@v2\n      with:\n        go-version: '^1.16.3'\n    - uses: supercharge/redis-github-action@1.2.0\n      with:\n        redis-version: 6\n    - run: go test -v -race ./\n",
    "source": "microsoft/redplex",
    "path": ".github/workflows/validate.yml",
    "url": "https://github.com/microsoft/redplex/blob/248ac9a6adfc13bb2da2404bea767dde69dc0272/.github/workflows/validate.yml",
    "retrieved_at": "2025-09-06T13:06:19.160046Z",
    "question_style": "style_5"
  },
  {
    "question": "Create a GitHub Actions workflow YAML file that replicates the functionality of the provided Flatpak CI workflow.",
    "answer": "name: Flatpak CI\n\non:\n  push:\n    branches:\n    - main\n    - flatpak-1.0.x\n    - flatpak-1.2.x\n    - flatpak-1.4.x\n    - flatpak-1.6.x\n    - flatpak-1.8.x\n    - flatpak-1.10.x\n    - flatpak-1.12.x\n    - flatpak-1.14.x\n  pull_request:\n    paths-ignore:\n    - README.md\n    - CONTRIBUTING.md\n    - NEWS\n    - COPYING\n    - CODE_OF_CONDUCT.md\n    - uncrustify.cfg\n    - uncrustify.sh\n    branches:\n    - main\n    - flatpak-1.0.x\n    - flatpak-1.2.x\n    - flatpak-1.4.x\n    - flatpak-1.6.x\n    - flatpak-1.8.x\n    - flatpak-1.10.x\n    - flatpak-1.12.x\n    - flatpak-1.14.x\n\npermissions:\n  contents: read\n\njobs:\n  check:\n    name: Build with gcc and test\n    runs-on: ubuntu-22.04\n    steps:\n    - name: Install Dependencies\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y libglib2.0-dev attr automake gettext autopoint bison  dbus gtk-doc-tools \\\n        libfuse3-dev ostree libostree-dev libarchive-dev libzstd-dev libcap-dev libattr1-dev libdw-dev libelf-dev python3-pyparsing \\\n        libjson-glib-dev shared-mime-info desktop-file-utils libpolkit-agent-1-dev libpolkit-gobject-1-dev \\\n        libseccomp-dev libsoup2.4-dev libcurl4-openssl-dev libsystemd-dev libxml2-utils libgpgme11-dev gobject-introspection \\\n        libgirepository1.0-dev libappstream-dev libdconf-dev clang socat meson libdbus-1-dev e2fslibs-dev bubblewrap xdg-dbus-proxy \\\n        python3-pip meson ninja-build libyaml-dev libstemmer-dev gperf itstool libmalcontent-0-dev\n        # One of the tests wants this\n        sudo mkdir /tmp/flatpak-com.example.App-OwnedByRoot\n    - name: Check out flatpak\n      uses: actions/checkout@v3\n      with:\n        submodules: true\n    - name: Build appstream dependency # (We need at least 0.15.3 for the g_once fix)\n      run: |\n        sudo pip3 install 'meson~=0.62'\n        git clone --branch v0.15.4 --depth 1 --no-tags https://github.com/ximion/appstream.git ./appstream\n        pushd ./appstream\n        meson setup --prefix=/usr _build\n        ninja -C _build\n        sudo ninja -C _build install\n        popd\n    - name: Create logs dir\n      run: mkdir test-logs\n    - name: autogen.sh\n      run: NOCONFIGURE=1 ./autogen.sh\n    - name: configure\n      # We don't do gtk-doc or GObject-Introspection here, because they can\n      # clash with AddressSanitizer. Instead, the clang build enables those.\n      run: |\n        mkdir _build\n        pushd _build\n        ../configure  --enable-internal-checks --enable-asan --disable-introspection --with-curl --with-system-bubblewrap --with-system-dbus-proxy\n        popd\n      env:\n        CFLAGS: -O2 -Wp,-D_FORTIFY_SOURCE=2\n    - name: Build flatpak\n      run: make -C _build -j $(getconf _NPROCESSORS_ONLN)\n    - name: Run tests\n      run: make -C _build check -j $(getconf _NPROCESSORS_ONLN)\n      env:\n        ASAN_OPTIONS: detect_leaks=0 # Right now we're not fully clean, but this gets us use-after-free etc\n    - name: Collect overall test logs on failure\n      if: failure()\n      run: mv _build/test-suite.log test-logs/ || true\n    - name: Collect individual test logs on cancel\n      if: failure() || cancelled()\n      run: mv _build/tests/*.log test-logs/ || true\n    - name: Upload test logs\n      uses: actions/upload-artifact@v3\n      if: failure() || cancelled()\n      with:\n        name: test logs\n        path: test-logs\n\n  # This is similar to the above, but runs on an older OS with some different configuration:\n  # * Soup instead of curl\n  # * Use built in bubblewrap instead of external\n  # * Use built in xdg-dbus-proxy instead of external\n  # * Disable malcontent build-dependency\n  check-alt2:\n    name: Build with gcc and test (older)\n    runs-on: ubuntu-20.04\n    steps:\n    - name: Install Dependencies\n      run: |\n        sudo add-apt-repository ppa:flatpak/stable\n        sudo add-apt-repository 'deb https://download.mono-project.com/repo/ubuntu stable-bionic main' # Needed for updates to work\n        sudo apt-get update\n        sudo apt-get install -y libglib2.0-dev attr automake gettext autopoint bison  dbus gtk-doc-tools \\\n        libfuse-dev ostree libostree-dev libarchive-dev libzstd-dev libcap-dev libattr1-dev libdw-dev libelf-dev python3-pyparsing \\\n        libjson-glib-dev shared-mime-info desktop-file-utils libpolkit-agent-1-dev libpolkit-gobject-1-dev \\\n        libseccomp-dev libsoup2.4-dev libcurl4-openssl-dev libsystemd-dev libxml2-utils libgpgme11-dev gobject-introspection \\\n        libgirepository1.0-dev libappstream-dev libdconf-dev clang socat meson libdbus-1-dev e2fslibs-dev\n        # One of the tests wants this\n        sudo mkdir /tmp/flatpak-com.example.App-OwnedByRoot\n    - name: Check out flatpak\n      uses: actions/checkout@v3\n      with:\n        submodules: true\n    - name: Create logs dir\n      run: mkdir test-logs\n    - name: autogen.sh\n      run: NOCONFIGURE=1 ./autogen.sh\n    - name: configure\n      # We don't do gtk-doc or GObject-Introspection here, because they can\n      # clash with AddressSanitizer. Instead, the clang build enables those.\n      run: |\n        mkdir _build\n        pushd _build\n        ../configure  --enable-internal-checks --enable-asan --disable-introspection --without-curl\n        popd\n      env:\n        CFLAGS: -O2 -Wp,-D_FORTIFY_SOURCE=2\n    - name: Build flatpak\n      run: make -C _build -j $(getconf _NPROCESSORS_ONLN)\n    # We build with Ubuntu 18.04's GLib to prove that we can, but there's a\n    # race condition that makes it fail tests, so upgrade to a version from\n    # a PPA before running the tests: see\n    # https://github.com/flatpak/flatpak/pull/3121,\n    # https://gitlab.gnome.org/GNOME/glib/-/issues/1014\n    - name: Upgrade GLib before running tests\n      run: |\n        sudo apt-get install -y libglib2.0-dev\n    - name: Run tests\n      run: make -C _build check -j $(getconf _NPROCESSORS_ONLN)\n      env:\n        ASAN_OPTIONS: detect_leaks=0 # Right now we're not fully clean, but this gets us use-after-free etc\n    - name: Collect overall test logs on failure\n      if: failure()\n      run: mv _build/test-suite.log test-logs/ || true\n    - name: Collect individual test logs on cancel\n      if: failure() || cancelled()\n      run: mv _build/tests/*.log test-logs/ || true\n    - name: Upload test logs\n      uses: actions/upload-artifact@v3\n      if: failure() || cancelled()\n      with:\n        name: test logs\n        path: test-logs\n\n  clang:\n    permissions:\n      security-events: write # for codeql\n    name: Build with clang and analyze\n    runs-on: ubuntu-20.04\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'cpp', 'python' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n    steps:\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n    - name: Install Dependencies\n      run: |\n        sudo add-apt-repository ppa:flatpak/stable\n        sudo add-apt-repository 'deb https://download.mono-project.com/repo/ubuntu stable-bionic main' # Needed for updates to work\n        sudo apt-get update\n        sudo apt-get install -y libglib2.0-dev attr automake gettext autopoint bison  dbus gtk-doc-tools \\\n        libfuse-dev ostree libostree-dev libarchive-dev libzstd-dev libcap-dev libattr1-dev libdw-dev libelf-dev python3-pyparsing \\\n        libjson-glib-dev shared-mime-info desktop-file-utils libpolkit-agent-1-dev libpolkit-gobject-1-dev \\\n        libseccomp-dev libsoup2.4-dev libcurl4-openssl-dev libsystemd-dev libxml2-utils libgpgme11-dev gobject-introspection \\\n        libgirepository1.0-dev libappstream-dev libdconf-dev clang e2fslibs-dev\n    - name: Check out flatpak\n      uses: actions/checkout@v3\n      with:\n        submodules: true\n    - name: configure\n      run: ./autogen.sh\n      env:\n        CC: clang\n        CFLAGS: -Werror=unused-variable\n    - name: Build flatpak\n      run: make -j $(getconf _NPROCESSORS_ONLN)\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n\n  valgrind:\n    name: Run tests in valgrind\n    needs: check # Don't run expensive test if main check fails\n    runs-on: ubuntu-22.04 # Might as well test with a different one too\n    if: ${{ false }} # Currently Valgrind takes too long and always fails\n    steps:\n    - name: Install Dependencies\n      run: |\n        sudo add-apt-repository ppa:flatpak/stable\n        sudo apt-get update\n        sudo add-apt-repository 'deb https://download.mono-project.com/repo/ubuntu stable-focal main' # Needed for updates to work\n        sudo apt-get install -y libglib2.0-dev attr automake gettext autopoint bison  dbus gtk-doc-tools \\\n        libfuse-dev ostree libostree-dev libarchive-dev libzstd-dev libcap-dev libattr1-dev libdw-dev libelf-dev python3-pyparsing \\\n        libjson-glib-dev shared-mime-info desktop-file-utils libpolkit-agent-1-dev libpolkit-gobject-1-dev \\\n        libseccomp-dev libsoup2.4-dev libcurl4-openssl-dev libsystemd-dev libxml2-utils libgpgme11-dev gobject-introspection \\\n        libgirepository1.0-dev libappstream-dev libdconf-dev clang socat meson libdbus-1-dev \\\n        valgrind e2fslibs-dev\n    - name: Check out flatpak\n      uses: actions/checkout@v3\n      with:\n        submodules: true\n    - name: Create logs dir\n      run: mkdir test-logs\n    - name: autogen.sh\n      run: NOCONFIGURE=1 ./autogen.sh\n    - name: configure\n      run: |\n        mkdir _build\n        pushd _build\n        ../configure --enable-gtk-doc --enable-gtk-doc-html --enable-introspection\n        popd\n      env:\n        CFLAGS: -O2\n    - name: Build flatpak\n      run: make -C _build -j $(getconf _NPROCESSORS_ONLN)\n    - name: Distcheck\n      run: make -C _build distcheck\n    - name: Run tests under valgrind\n      run: make -C _build check\n      env:\n        FLATPAK_TESTS_VALGRIND: true\n    - name: Collect overall test logs on failure\n      if: failure()\n      run: mv _build/test-suite.log test-logs/ || true\n    - name: Collect individual test logs on cancel\n      if: failure() || cancelled()\n      run: mv _build/tests/*.log test-logs/ || true\n    - name: Upload test logs\n      uses: actions/upload-artifact@v3\n      if: failure() || cancelled()\n      with:\n        name: test logs\n        path: test-logs\n",
    "source": "endlessm/flatpak",
    "path": ".github/workflows/check.yml",
    "url": "https://github.com/endlessm/flatpak/blob/787caf96aaf2b233020a776397a2584ee079af44/.github/workflows/check.yml",
    "retrieved_at": "2025-09-07T01:43:20.860858Z",
    "question_style": "style_1"
  },
  {
    "question": "What push or pull request events on the main or flatpak-1.x.x branches trigger this workflow?",
    "answer": "name: Flatpak CI\n\non:\n  push:\n    branches:\n    - main\n    - flatpak-1.0.x\n    - flatpak-1.2.x\n    - flatpak-1.4.x\n    - flatpak-1.6.x\n    - flatpak-1.8.x\n    - flatpak-1.10.x\n    - flatpak-1.12.x\n    - flatpak-1.14.x\n  pull_request:\n    paths-ignore:\n    - README.md\n    - CONTRIBUTING.md\n    - NEWS\n    - COPYING\n    - CODE_OF_CONDUCT.md\n    - uncrustify.cfg\n    - uncrustify.sh\n    branches:\n    - main\n    - flatpak-1.0.x\n    - flatpak-1.2.x\n    - flatpak-1.4.x\n    - flatpak-1.6.x\n    - flatpak-1.8.x\n    - flatpak-1.10.x\n    - flatpak-1.12.x\n    - flatpak-1.14.x\n\npermissions:\n  contents: read\n\njobs:\n  check:\n    name: Build with gcc and test\n    runs-on: ubuntu-22.04\n    steps:\n    - name: Install Dependencies\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y libglib2.0-dev attr automake gettext autopoint bison  dbus gtk-doc-tools \\\n        libfuse3-dev ostree libostree-dev libarchive-dev libzstd-dev libcap-dev libattr1-dev libdw-dev libelf-dev python3-pyparsing \\\n        libjson-glib-dev shared-mime-info desktop-file-utils libpolkit-agent-1-dev libpolkit-gobject-1-dev \\\n        libseccomp-dev libsoup2.4-dev libcurl4-openssl-dev libsystemd-dev libxml2-utils libgpgme11-dev gobject-introspection \\\n        libgirepository1.0-dev libappstream-dev libdconf-dev clang socat meson libdbus-1-dev e2fslibs-dev bubblewrap xdg-dbus-proxy \\\n        python3-pip meson ninja-build libyaml-dev libstemmer-dev gperf itstool libmalcontent-0-dev\n        # One of the tests wants this\n        sudo mkdir /tmp/flatpak-com.example.App-OwnedByRoot\n    - name: Check out flatpak\n      uses: actions/checkout@v3\n      with:\n        submodules: true\n    - name: Build appstream dependency # (We need at least 0.15.3 for the g_once fix)\n      run: |\n        sudo pip3 install 'meson~=0.62'\n        git clone --branch v0.15.4 --depth 1 --no-tags https://github.com/ximion/appstream.git ./appstream\n        pushd ./appstream\n        meson setup --prefix=/usr _build\n        ninja -C _build\n        sudo ninja -C _build install\n        popd\n    - name: Create logs dir\n      run: mkdir test-logs\n    - name: autogen.sh\n      run: NOCONFIGURE=1 ./autogen.sh\n    - name: configure\n      # We don't do gtk-doc or GObject-Introspection here, because they can\n      # clash with AddressSanitizer. Instead, the clang build enables those.\n      run: |\n        mkdir _build\n        pushd _build\n        ../configure  --enable-internal-checks --enable-asan --disable-introspection --with-curl --with-system-bubblewrap --with-system-dbus-proxy\n        popd\n      env:\n        CFLAGS: -O2 -Wp,-D_FORTIFY_SOURCE=2\n    - name: Build flatpak\n      run: make -C _build -j $(getconf _NPROCESSORS_ONLN)\n    - name: Run tests\n      run: make -C _build check -j $(getconf _NPROCESSORS_ONLN)\n      env:\n        ASAN_OPTIONS: detect_leaks=0 # Right now we're not fully clean, but this gets us use-after-free etc\n    - name: Collect overall test logs on failure\n      if: failure()\n      run: mv _build/test-suite.log test-logs/ || true\n    - name: Collect individual test logs on cancel\n      if: failure() || cancelled()\n      run: mv _build/tests/*.log test-logs/ || true\n    - name: Upload test logs\n      uses: actions/upload-artifact@v3\n      if: failure() || cancelled()\n      with:\n        name: test logs\n        path: test-logs\n\n  # This is similar to the above, but runs on an older OS with some different configuration:\n  # * Soup instead of curl\n  # * Use built in bubblewrap instead of external\n  # * Use built in xdg-dbus-proxy instead of external\n  # * Disable malcontent build-dependency\n  check-alt2:\n    name: Build with gcc and test (older)\n    runs-on: ubuntu-20.04\n    steps:\n    - name: Install Dependencies\n      run: |\n        sudo add-apt-repository ppa:flatpak/stable\n        sudo add-apt-repository 'deb https://download.mono-project.com/repo/ubuntu stable-bionic main' # Needed for updates to work\n        sudo apt-get update\n        sudo apt-get install -y libglib2.0-dev attr automake gettext autopoint bison  dbus gtk-doc-tools \\\n        libfuse-dev ostree libostree-dev libarchive-dev libzstd-dev libcap-dev libattr1-dev libdw-dev libelf-dev python3-pyparsing \\\n        libjson-glib-dev shared-mime-info desktop-file-utils libpolkit-agent-1-dev libpolkit-gobject-1-dev \\\n        libseccomp-dev libsoup2.4-dev libcurl4-openssl-dev libsystemd-dev libxml2-utils libgpgme11-dev gobject-introspection \\\n        libgirepository1.0-dev libappstream-dev libdconf-dev clang socat meson libdbus-1-dev e2fslibs-dev\n        # One of the tests wants this\n        sudo mkdir /tmp/flatpak-com.example.App-OwnedByRoot\n    - name: Check out flatpak\n      uses: actions/checkout@v3\n      with:\n        submodules: true\n    - name: Create logs dir\n      run: mkdir test-logs\n    - name: autogen.sh\n      run: NOCONFIGURE=1 ./autogen.sh\n    - name: configure\n      # We don't do gtk-doc or GObject-Introspection here, because they can\n      # clash with AddressSanitizer. Instead, the clang build enables those.\n      run: |\n        mkdir _build\n        pushd _build\n        ../configure  --enable-internal-checks --enable-asan --disable-introspection --without-curl\n        popd\n      env:\n        CFLAGS: -O2 -Wp,-D_FORTIFY_SOURCE=2\n    - name: Build flatpak\n      run: make -C _build -j $(getconf _NPROCESSORS_ONLN)\n    # We build with Ubuntu 18.04's GLib to prove that we can, but there's a\n    # race condition that makes it fail tests, so upgrade to a version from\n    # a PPA before running the tests: see\n    # https://github.com/flatpak/flatpak/pull/3121,\n    # https://gitlab.gnome.org/GNOME/glib/-/issues/1014\n    - name: Upgrade GLib before running tests\n      run: |\n        sudo apt-get install -y libglib2.0-dev\n    - name: Run tests\n      run: make -C _build check -j $(getconf _NPROCESSORS_ONLN)\n      env:\n        ASAN_OPTIONS: detect_leaks=0 # Right now we're not fully clean, but this gets us use-after-free etc\n    - name: Collect overall test logs on failure\n      if: failure()\n      run: mv _build/test-suite.log test-logs/ || true\n    - name: Collect individual test logs on cancel\n      if: failure() || cancelled()\n      run: mv _build/tests/*.log test-logs/ || true\n    - name: Upload test logs\n      uses: actions/upload-artifact@v3\n      if: failure() || cancelled()\n      with:\n        name: test logs\n        path: test-logs\n\n  clang:\n    permissions:\n      security-events: write # for codeql\n    name: Build with clang and analyze\n    runs-on: ubuntu-20.04\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'cpp', 'python' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n    steps:\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n    - name: Install Dependencies\n      run: |\n        sudo add-apt-repository ppa:flatpak/stable\n        sudo add-apt-repository 'deb https://download.mono-project.com/repo/ubuntu stable-bionic main' # Needed for updates to work\n        sudo apt-get update\n        sudo apt-get install -y libglib2.0-dev attr automake gettext autopoint bison  dbus gtk-doc-tools \\\n        libfuse-dev ostree libostree-dev libarchive-dev libzstd-dev libcap-dev libattr1-dev libdw-dev libelf-dev python3-pyparsing \\\n        libjson-glib-dev shared-mime-info desktop-file-utils libpolkit-agent-1-dev libpolkit-gobject-1-dev \\\n        libseccomp-dev libsoup2.4-dev libcurl4-openssl-dev libsystemd-dev libxml2-utils libgpgme11-dev gobject-introspection \\\n        libgirepository1.0-dev libappstream-dev libdconf-dev clang e2fslibs-dev\n    - name: Check out flatpak\n      uses: actions/checkout@v3\n      with:\n        submodules: true\n    - name: configure\n      run: ./autogen.sh\n      env:\n        CC: clang\n        CFLAGS: -Werror=unused-variable\n    - name: Build flatpak\n      run: make -j $(getconf _NPROCESSORS_ONLN)\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n\n  valgrind:\n    name: Run tests in valgrind\n    needs: check # Don't run expensive test if main check fails\n    runs-on: ubuntu-22.04 # Might as well test with a different one too\n    if: ${{ false }} # Currently Valgrind takes too long and always fails\n    steps:\n    - name: Install Dependencies\n      run: |\n        sudo add-apt-repository ppa:flatpak/stable\n        sudo apt-get update\n        sudo add-apt-repository 'deb https://download.mono-project.com/repo/ubuntu stable-focal main' # Needed for updates to work\n        sudo apt-get install -y libglib2.0-dev attr automake gettext autopoint bison  dbus gtk-doc-tools \\\n        libfuse-dev ostree libostree-dev libarchive-dev libzstd-dev libcap-dev libattr1-dev libdw-dev libelf-dev python3-pyparsing \\\n        libjson-glib-dev shared-mime-info desktop-file-utils libpolkit-agent-1-dev libpolkit-gobject-1-dev \\\n        libseccomp-dev libsoup2.4-dev libcurl4-openssl-dev libsystemd-dev libxml2-utils libgpgme11-dev gobject-introspection \\\n        libgirepository1.0-dev libappstream-dev libdconf-dev clang socat meson libdbus-1-dev \\\n        valgrind e2fslibs-dev\n    - name: Check out flatpak\n      uses: actions/checkout@v3\n      with:\n        submodules: true\n    - name: Create logs dir\n      run: mkdir test-logs\n    - name: autogen.sh\n      run: NOCONFIGURE=1 ./autogen.sh\n    - name: configure\n      run: |\n        mkdir _build\n        pushd _build\n        ../configure --enable-gtk-doc --enable-gtk-doc-html --enable-introspection\n        popd\n      env:\n        CFLAGS: -O2\n    - name: Build flatpak\n      run: make -C _build -j $(getconf _NPROCESSORS_ONLN)\n    - name: Distcheck\n      run: make -C _build distcheck\n    - name: Run tests under valgrind\n      run: make -C _build check\n      env:\n        FLATPAK_TESTS_VALGRIND: true\n    - name: Collect overall test logs on failure\n      if: failure()\n      run: mv _build/test-suite.log test-logs/ || true\n    - name: Collect individual test logs on cancel\n      if: failure() || cancelled()\n      run: mv _build/tests/*.log test-logs/ || true\n    - name: Upload test logs\n      uses: actions/upload-artifact@v3\n      if: failure() || cancelled()\n      with:\n        name: test logs\n        path: test-logs\n",
    "source": "endlessm/flatpak",
    "path": ".github/workflows/check.yml",
    "url": "https://github.com/endlessm/flatpak/blob/787caf96aaf2b233020a776397a2584ee079af44/.github/workflows/check.yml",
    "retrieved_at": "2025-09-07T01:43:21.546192Z",
    "question_style": "style_2"
  },
  {
    "question": "Which jobs run in parallel, and what dependencies exist between the jobs and their steps?",
    "answer": "name: Flatpak CI\n\non:\n  push:\n    branches:\n    - main\n    - flatpak-1.0.x\n    - flatpak-1.2.x\n    - flatpak-1.4.x\n    - flatpak-1.6.x\n    - flatpak-1.8.x\n    - flatpak-1.10.x\n    - flatpak-1.12.x\n    - flatpak-1.14.x\n  pull_request:\n    paths-ignore:\n    - README.md\n    - CONTRIBUTING.md\n    - NEWS\n    - COPYING\n    - CODE_OF_CONDUCT.md\n    - uncrustify.cfg\n    - uncrustify.sh\n    branches:\n    - main\n    - flatpak-1.0.x\n    - flatpak-1.2.x\n    - flatpak-1.4.x\n    - flatpak-1.6.x\n    - flatpak-1.8.x\n    - flatpak-1.10.x\n    - flatpak-1.12.x\n    - flatpak-1.14.x\n\npermissions:\n  contents: read\n\njobs:\n  check:\n    name: Build with gcc and test\n    runs-on: ubuntu-22.04\n    steps:\n    - name: Install Dependencies\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y libglib2.0-dev attr automake gettext autopoint bison  dbus gtk-doc-tools \\\n        libfuse3-dev ostree libostree-dev libarchive-dev libzstd-dev libcap-dev libattr1-dev libdw-dev libelf-dev python3-pyparsing \\\n        libjson-glib-dev shared-mime-info desktop-file-utils libpolkit-agent-1-dev libpolkit-gobject-1-dev \\\n        libseccomp-dev libsoup2.4-dev libcurl4-openssl-dev libsystemd-dev libxml2-utils libgpgme11-dev gobject-introspection \\\n        libgirepository1.0-dev libappstream-dev libdconf-dev clang socat meson libdbus-1-dev e2fslibs-dev bubblewrap xdg-dbus-proxy \\\n        python3-pip meson ninja-build libyaml-dev libstemmer-dev gperf itstool libmalcontent-0-dev\n        # One of the tests wants this\n        sudo mkdir /tmp/flatpak-com.example.App-OwnedByRoot\n    - name: Check out flatpak\n      uses: actions/checkout@v3\n      with:\n        submodules: true\n    - name: Build appstream dependency # (We need at least 0.15.3 for the g_once fix)\n      run: |\n        sudo pip3 install 'meson~=0.62'\n        git clone --branch v0.15.4 --depth 1 --no-tags https://github.com/ximion/appstream.git ./appstream\n        pushd ./appstream\n        meson setup --prefix=/usr _build\n        ninja -C _build\n        sudo ninja -C _build install\n        popd\n    - name: Create logs dir\n      run: mkdir test-logs\n    - name: autogen.sh\n      run: NOCONFIGURE=1 ./autogen.sh\n    - name: configure\n      # We don't do gtk-doc or GObject-Introspection here, because they can\n      # clash with AddressSanitizer. Instead, the clang build enables those.\n      run: |\n        mkdir _build\n        pushd _build\n        ../configure  --enable-internal-checks --enable-asan --disable-introspection --with-curl --with-system-bubblewrap --with-system-dbus-proxy\n        popd\n      env:\n        CFLAGS: -O2 -Wp,-D_FORTIFY_SOURCE=2\n    - name: Build flatpak\n      run: make -C _build -j $(getconf _NPROCESSORS_ONLN)\n    - name: Run tests\n      run: make -C _build check -j $(getconf _NPROCESSORS_ONLN)\n      env:\n        ASAN_OPTIONS: detect_leaks=0 # Right now we're not fully clean, but this gets us use-after-free etc\n    - name: Collect overall test logs on failure\n      if: failure()\n      run: mv _build/test-suite.log test-logs/ || true\n    - name: Collect individual test logs on cancel\n      if: failure() || cancelled()\n      run: mv _build/tests/*.log test-logs/ || true\n    - name: Upload test logs\n      uses: actions/upload-artifact@v3\n      if: failure() || cancelled()\n      with:\n        name: test logs\n        path: test-logs\n\n  # This is similar to the above, but runs on an older OS with some different configuration:\n  # * Soup instead of curl\n  # * Use built in bubblewrap instead of external\n  # * Use built in xdg-dbus-proxy instead of external\n  # * Disable malcontent build-dependency\n  check-alt2:\n    name: Build with gcc and test (older)\n    runs-on: ubuntu-20.04\n    steps:\n    - name: Install Dependencies\n      run: |\n        sudo add-apt-repository ppa:flatpak/stable\n        sudo add-apt-repository 'deb https://download.mono-project.com/repo/ubuntu stable-bionic main' # Needed for updates to work\n        sudo apt-get update\n        sudo apt-get install -y libglib2.0-dev attr automake gettext autopoint bison  dbus gtk-doc-tools \\\n        libfuse-dev ostree libostree-dev libarchive-dev libzstd-dev libcap-dev libattr1-dev libdw-dev libelf-dev python3-pyparsing \\\n        libjson-glib-dev shared-mime-info desktop-file-utils libpolkit-agent-1-dev libpolkit-gobject-1-dev \\\n        libseccomp-dev libsoup2.4-dev libcurl4-openssl-dev libsystemd-dev libxml2-utils libgpgme11-dev gobject-introspection \\\n        libgirepository1.0-dev libappstream-dev libdconf-dev clang socat meson libdbus-1-dev e2fslibs-dev\n        # One of the tests wants this\n        sudo mkdir /tmp/flatpak-com.example.App-OwnedByRoot\n    - name: Check out flatpak\n      uses: actions/checkout@v3\n      with:\n        submodules: true\n    - name: Create logs dir\n      run: mkdir test-logs\n    - name: autogen.sh\n      run: NOCONFIGURE=1 ./autogen.sh\n    - name: configure\n      # We don't do gtk-doc or GObject-Introspection here, because they can\n      # clash with AddressSanitizer. Instead, the clang build enables those.\n      run: |\n        mkdir _build\n        pushd _build\n        ../configure  --enable-internal-checks --enable-asan --disable-introspection --without-curl\n        popd\n      env:\n        CFLAGS: -O2 -Wp,-D_FORTIFY_SOURCE=2\n    - name: Build flatpak\n      run: make -C _build -j $(getconf _NPROCESSORS_ONLN)\n    # We build with Ubuntu 18.04's GLib to prove that we can, but there's a\n    # race condition that makes it fail tests, so upgrade to a version from\n    # a PPA before running the tests: see\n    # https://github.com/flatpak/flatpak/pull/3121,\n    # https://gitlab.gnome.org/GNOME/glib/-/issues/1014\n    - name: Upgrade GLib before running tests\n      run: |\n        sudo apt-get install -y libglib2.0-dev\n    - name: Run tests\n      run: make -C _build check -j $(getconf _NPROCESSORS_ONLN)\n      env:\n        ASAN_OPTIONS: detect_leaks=0 # Right now we're not fully clean, but this gets us use-after-free etc\n    - name: Collect overall test logs on failure\n      if: failure()\n      run: mv _build/test-suite.log test-logs/ || true\n    - name: Collect individual test logs on cancel\n      if: failure() || cancelled()\n      run: mv _build/tests/*.log test-logs/ || true\n    - name: Upload test logs\n      uses: actions/upload-artifact@v3\n      if: failure() || cancelled()\n      with:\n        name: test logs\n        path: test-logs\n\n  clang:\n    permissions:\n      security-events: write # for codeql\n    name: Build with clang and analyze\n    runs-on: ubuntu-20.04\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'cpp', 'python' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n    steps:\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n    - name: Install Dependencies\n      run: |\n        sudo add-apt-repository ppa:flatpak/stable\n        sudo add-apt-repository 'deb https://download.mono-project.com/repo/ubuntu stable-bionic main' # Needed for updates to work\n        sudo apt-get update\n        sudo apt-get install -y libglib2.0-dev attr automake gettext autopoint bison  dbus gtk-doc-tools \\\n        libfuse-dev ostree libostree-dev libarchive-dev libzstd-dev libcap-dev libattr1-dev libdw-dev libelf-dev python3-pyparsing \\\n        libjson-glib-dev shared-mime-info desktop-file-utils libpolkit-agent-1-dev libpolkit-gobject-1-dev \\\n        libseccomp-dev libsoup2.4-dev libcurl4-openssl-dev libsystemd-dev libxml2-utils libgpgme11-dev gobject-introspection \\\n        libgirepository1.0-dev libappstream-dev libdconf-dev clang e2fslibs-dev\n    - name: Check out flatpak\n      uses: actions/checkout@v3\n      with:\n        submodules: true\n    - name: configure\n      run: ./autogen.sh\n      env:\n        CC: clang\n        CFLAGS: -Werror=unused-variable\n    - name: Build flatpak\n      run: make -j $(getconf _NPROCESSORS_ONLN)\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n\n  valgrind:\n    name: Run tests in valgrind\n    needs: check # Don't run expensive test if main check fails\n    runs-on: ubuntu-22.04 # Might as well test with a different one too\n    if: ${{ false }} # Currently Valgrind takes too long and always fails\n    steps:\n    - name: Install Dependencies\n      run: |\n        sudo add-apt-repository ppa:flatpak/stable\n        sudo apt-get update\n        sudo add-apt-repository 'deb https://download.mono-project.com/repo/ubuntu stable-focal main' # Needed for updates to work\n        sudo apt-get install -y libglib2.0-dev attr automake gettext autopoint bison  dbus gtk-doc-tools \\\n        libfuse-dev ostree libostree-dev libarchive-dev libzstd-dev libcap-dev libattr1-dev libdw-dev libelf-dev python3-pyparsing \\\n        libjson-glib-dev shared-mime-info desktop-file-utils libpolkit-agent-1-dev libpolkit-gobject-1-dev \\\n        libseccomp-dev libsoup2.4-dev libcurl4-openssl-dev libsystemd-dev libxml2-utils libgpgme11-dev gobject-introspection \\\n        libgirepository1.0-dev libappstream-dev libdconf-dev clang socat meson libdbus-1-dev \\\n        valgrind e2fslibs-dev\n    - name: Check out flatpak\n      uses: actions/checkout@v3\n      with:\n        submodules: true\n    - name: Create logs dir\n      run: mkdir test-logs\n    - name: autogen.sh\n      run: NOCONFIGURE=1 ./autogen.sh\n    - name: configure\n      run: |\n        mkdir _build\n        pushd _build\n        ../configure --enable-gtk-doc --enable-gtk-doc-html --enable-introspection\n        popd\n      env:\n        CFLAGS: -O2\n    - name: Build flatpak\n      run: make -C _build -j $(getconf _NPROCESSORS_ONLN)\n    - name: Distcheck\n      run: make -C _build distcheck\n    - name: Run tests under valgrind\n      run: make -C _build check\n      env:\n        FLATPAK_TESTS_VALGRIND: true\n    - name: Collect overall test logs on failure\n      if: failure()\n      run: mv _build/test-suite.log test-logs/ || true\n    - name: Collect individual test logs on cancel\n      if: failure() || cancelled()\n      run: mv _build/tests/*.log test-logs/ || true\n    - name: Upload test logs\n      uses: actions/upload-artifact@v3\n      if: failure() || cancelled()\n      with:\n        name: test logs\n        path: test-logs\n",
    "source": "endlessm/flatpak",
    "path": ".github/workflows/check.yml",
    "url": "https://github.com/endlessm/flatpak/blob/787caf96aaf2b233020a776397a2584ee079af44/.github/workflows/check.yml",
    "retrieved_at": "2025-09-07T01:43:22.268307Z",
    "question_style": "style_3"
  },
  {
    "question": "How are environment variables used to configure the build and test processes in the workflow?",
    "answer": "name: Flatpak CI\n\non:\n  push:\n    branches:\n    - main\n    - flatpak-1.0.x\n    - flatpak-1.2.x\n    - flatpak-1.4.x\n    - flatpak-1.6.x\n    - flatpak-1.8.x\n    - flatpak-1.10.x\n    - flatpak-1.12.x\n    - flatpak-1.14.x\n  pull_request:\n    paths-ignore:\n    - README.md\n    - CONTRIBUTING.md\n    - NEWS\n    - COPYING\n    - CODE_OF_CONDUCT.md\n    - uncrustify.cfg\n    - uncrustify.sh\n    branches:\n    - main\n    - flatpak-1.0.x\n    - flatpak-1.2.x\n    - flatpak-1.4.x\n    - flatpak-1.6.x\n    - flatpak-1.8.x\n    - flatpak-1.10.x\n    - flatpak-1.12.x\n    - flatpak-1.14.x\n\npermissions:\n  contents: read\n\njobs:\n  check:\n    name: Build with gcc and test\n    runs-on: ubuntu-22.04\n    steps:\n    - name: Install Dependencies\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y libglib2.0-dev attr automake gettext autopoint bison  dbus gtk-doc-tools \\\n        libfuse3-dev ostree libostree-dev libarchive-dev libzstd-dev libcap-dev libattr1-dev libdw-dev libelf-dev python3-pyparsing \\\n        libjson-glib-dev shared-mime-info desktop-file-utils libpolkit-agent-1-dev libpolkit-gobject-1-dev \\\n        libseccomp-dev libsoup2.4-dev libcurl4-openssl-dev libsystemd-dev libxml2-utils libgpgme11-dev gobject-introspection \\\n        libgirepository1.0-dev libappstream-dev libdconf-dev clang socat meson libdbus-1-dev e2fslibs-dev bubblewrap xdg-dbus-proxy \\\n        python3-pip meson ninja-build libyaml-dev libstemmer-dev gperf itstool libmalcontent-0-dev\n        # One of the tests wants this\n        sudo mkdir /tmp/flatpak-com.example.App-OwnedByRoot\n    - name: Check out flatpak\n      uses: actions/checkout@v3\n      with:\n        submodules: true\n    - name: Build appstream dependency # (We need at least 0.15.3 for the g_once fix)\n      run: |\n        sudo pip3 install 'meson~=0.62'\n        git clone --branch v0.15.4 --depth 1 --no-tags https://github.com/ximion/appstream.git ./appstream\n        pushd ./appstream\n        meson setup --prefix=/usr _build\n        ninja -C _build\n        sudo ninja -C _build install\n        popd\n    - name: Create logs dir\n      run: mkdir test-logs\n    - name: autogen.sh\n      run: NOCONFIGURE=1 ./autogen.sh\n    - name: configure\n      # We don't do gtk-doc or GObject-Introspection here, because they can\n      # clash with AddressSanitizer. Instead, the clang build enables those.\n      run: |\n        mkdir _build\n        pushd _build\n        ../configure  --enable-internal-checks --enable-asan --disable-introspection --with-curl --with-system-bubblewrap --with-system-dbus-proxy\n        popd\n      env:\n        CFLAGS: -O2 -Wp,-D_FORTIFY_SOURCE=2\n    - name: Build flatpak\n      run: make -C _build -j $(getconf _NPROCESSORS_ONLN)\n    - name: Run tests\n      run: make -C _build check -j $(getconf _NPROCESSORS_ONLN)\n      env:\n        ASAN_OPTIONS: detect_leaks=0 # Right now we're not fully clean, but this gets us use-after-free etc\n    - name: Collect overall test logs on failure\n      if: failure()\n      run: mv _build/test-suite.log test-logs/ || true\n    - name: Collect individual test logs on cancel\n      if: failure() || cancelled()\n      run: mv _build/tests/*.log test-logs/ || true\n    - name: Upload test logs\n      uses: actions/upload-artifact@v3\n      if: failure() || cancelled()\n      with:\n        name: test logs\n        path: test-logs\n\n  # This is similar to the above, but runs on an older OS with some different configuration:\n  # * Soup instead of curl\n  # * Use built in bubblewrap instead of external\n  # * Use built in xdg-dbus-proxy instead of external\n  # * Disable malcontent build-dependency\n  check-alt2:\n    name: Build with gcc and test (older)\n    runs-on: ubuntu-20.04\n    steps:\n    - name: Install Dependencies\n      run: |\n        sudo add-apt-repository ppa:flatpak/stable\n        sudo add-apt-repository 'deb https://download.mono-project.com/repo/ubuntu stable-bionic main' # Needed for updates to work\n        sudo apt-get update\n        sudo apt-get install -y libglib2.0-dev attr automake gettext autopoint bison  dbus gtk-doc-tools \\\n        libfuse-dev ostree libostree-dev libarchive-dev libzstd-dev libcap-dev libattr1-dev libdw-dev libelf-dev python3-pyparsing \\\n        libjson-glib-dev shared-mime-info desktop-file-utils libpolkit-agent-1-dev libpolkit-gobject-1-dev \\\n        libseccomp-dev libsoup2.4-dev libcurl4-openssl-dev libsystemd-dev libxml2-utils libgpgme11-dev gobject-introspection \\\n        libgirepository1.0-dev libappstream-dev libdconf-dev clang socat meson libdbus-1-dev e2fslibs-dev\n        # One of the tests wants this\n        sudo mkdir /tmp/flatpak-com.example.App-OwnedByRoot\n    - name: Check out flatpak\n      uses: actions/checkout@v3\n      with:\n        submodules: true\n    - name: Create logs dir\n      run: mkdir test-logs\n    - name: autogen.sh\n      run: NOCONFIGURE=1 ./autogen.sh\n    - name: configure\n      # We don't do gtk-doc or GObject-Introspection here, because they can\n      # clash with AddressSanitizer. Instead, the clang build enables those.\n      run: |\n        mkdir _build\n        pushd _build\n        ../configure  --enable-internal-checks --enable-asan --disable-introspection --without-curl\n        popd\n      env:\n        CFLAGS: -O2 -Wp,-D_FORTIFY_SOURCE=2\n    - name: Build flatpak\n      run: make -C _build -j $(getconf _NPROCESSORS_ONLN)\n    # We build with Ubuntu 18.04's GLib to prove that we can, but there's a\n    # race condition that makes it fail tests, so upgrade to a version from\n    # a PPA before running the tests: see\n    # https://github.com/flatpak/flatpak/pull/3121,\n    # https://gitlab.gnome.org/GNOME/glib/-/issues/1014\n    - name: Upgrade GLib before running tests\n      run: |\n        sudo apt-get install -y libglib2.0-dev\n    - name: Run tests\n      run: make -C _build check -j $(getconf _NPROCESSORS_ONLN)\n      env:\n        ASAN_OPTIONS: detect_leaks=0 # Right now we're not fully clean, but this gets us use-after-free etc\n    - name: Collect overall test logs on failure\n      if: failure()\n      run: mv _build/test-suite.log test-logs/ || true\n    - name: Collect individual test logs on cancel\n      if: failure() || cancelled()\n      run: mv _build/tests/*.log test-logs/ || true\n    - name: Upload test logs\n      uses: actions/upload-artifact@v3\n      if: failure() || cancelled()\n      with:\n        name: test logs\n        path: test-logs\n\n  clang:\n    permissions:\n      security-events: write # for codeql\n    name: Build with clang and analyze\n    runs-on: ubuntu-20.04\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'cpp', 'python' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n    steps:\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n    - name: Install Dependencies\n      run: |\n        sudo add-apt-repository ppa:flatpak/stable\n        sudo add-apt-repository 'deb https://download.mono-project.com/repo/ubuntu stable-bionic main' # Needed for updates to work\n        sudo apt-get update\n        sudo apt-get install -y libglib2.0-dev attr automake gettext autopoint bison  dbus gtk-doc-tools \\\n        libfuse-dev ostree libostree-dev libarchive-dev libzstd-dev libcap-dev libattr1-dev libdw-dev libelf-dev python3-pyparsing \\\n        libjson-glib-dev shared-mime-info desktop-file-utils libpolkit-agent-1-dev libpolkit-gobject-1-dev \\\n        libseccomp-dev libsoup2.4-dev libcurl4-openssl-dev libsystemd-dev libxml2-utils libgpgme11-dev gobject-introspection \\\n        libgirepository1.0-dev libappstream-dev libdconf-dev clang e2fslibs-dev\n    - name: Check out flatpak\n      uses: actions/checkout@v3\n      with:\n        submodules: true\n    - name: configure\n      run: ./autogen.sh\n      env:\n        CC: clang\n        CFLAGS: -Werror=unused-variable\n    - name: Build flatpak\n      run: make -j $(getconf _NPROCESSORS_ONLN)\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n\n  valgrind:\n    name: Run tests in valgrind\n    needs: check # Don't run expensive test if main check fails\n    runs-on: ubuntu-22.04 # Might as well test with a different one too\n    if: ${{ false }} # Currently Valgrind takes too long and always fails\n    steps:\n    - name: Install Dependencies\n      run: |\n        sudo add-apt-repository ppa:flatpak/stable\n        sudo apt-get update\n        sudo add-apt-repository 'deb https://download.mono-project.com/repo/ubuntu stable-focal main' # Needed for updates to work\n        sudo apt-get install -y libglib2.0-dev attr automake gettext autopoint bison  dbus gtk-doc-tools \\\n        libfuse-dev ostree libostree-dev libarchive-dev libzstd-dev libcap-dev libattr1-dev libdw-dev libelf-dev python3-pyparsing \\\n        libjson-glib-dev shared-mime-info desktop-file-utils libpolkit-agent-1-dev libpolkit-gobject-1-dev \\\n        libseccomp-dev libsoup2.4-dev libcurl4-openssl-dev libsystemd-dev libxml2-utils libgpgme11-dev gobject-introspection \\\n        libgirepository1.0-dev libappstream-dev libdconf-dev clang socat meson libdbus-1-dev \\\n        valgrind e2fslibs-dev\n    - name: Check out flatpak\n      uses: actions/checkout@v3\n      with:\n        submodules: true\n    - name: Create logs dir\n      run: mkdir test-logs\n    - name: autogen.sh\n      run: NOCONFIGURE=1 ./autogen.sh\n    - name: configure\n      run: |\n        mkdir _build\n        pushd _build\n        ../configure --enable-gtk-doc --enable-gtk-doc-html --enable-introspection\n        popd\n      env:\n        CFLAGS: -O2\n    - name: Build flatpak\n      run: make -C _build -j $(getconf _NPROCESSORS_ONLN)\n    - name: Distcheck\n      run: make -C _build distcheck\n    - name: Run tests under valgrind\n      run: make -C _build check\n      env:\n        FLATPAK_TESTS_VALGRIND: true\n    - name: Collect overall test logs on failure\n      if: failure()\n      run: mv _build/test-suite.log test-logs/ || true\n    - name: Collect individual test logs on cancel\n      if: failure() || cancelled()\n      run: mv _build/tests/*.log test-logs/ || true\n    - name: Upload test logs\n      uses: actions/upload-artifact@v3\n      if: failure() || cancelled()\n      with:\n        name: test logs\n        path: test-logs\n",
    "source": "endlessm/flatpak",
    "path": ".github/workflows/check.yml",
    "url": "https://github.com/endlessm/flatpak/blob/787caf96aaf2b233020a776397a2584ee079af44/.github/workflows/check.yml",
    "retrieved_at": "2025-09-07T01:43:22.852477Z",
    "question_style": "style_4"
  },
  {
    "question": "What is the main purpose of the \"Flatpak CI\" workflow?",
    "answer": "name: Flatpak CI\n\non:\n  push:\n    branches:\n    - main\n    - flatpak-1.0.x\n    - flatpak-1.2.x\n    - flatpak-1.4.x\n    - flatpak-1.6.x\n    - flatpak-1.8.x\n    - flatpak-1.10.x\n    - flatpak-1.12.x\n    - flatpak-1.14.x\n  pull_request:\n    paths-ignore:\n    - README.md\n    - CONTRIBUTING.md\n    - NEWS\n    - COPYING\n    - CODE_OF_CONDUCT.md\n    - uncrustify.cfg\n    - uncrustify.sh\n    branches:\n    - main\n    - flatpak-1.0.x\n    - flatpak-1.2.x\n    - flatpak-1.4.x\n    - flatpak-1.6.x\n    - flatpak-1.8.x\n    - flatpak-1.10.x\n    - flatpak-1.12.x\n    - flatpak-1.14.x\n\npermissions:\n  contents: read\n\njobs:\n  check:\n    name: Build with gcc and test\n    runs-on: ubuntu-22.04\n    steps:\n    - name: Install Dependencies\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y libglib2.0-dev attr automake gettext autopoint bison  dbus gtk-doc-tools \\\n        libfuse3-dev ostree libostree-dev libarchive-dev libzstd-dev libcap-dev libattr1-dev libdw-dev libelf-dev python3-pyparsing \\\n        libjson-glib-dev shared-mime-info desktop-file-utils libpolkit-agent-1-dev libpolkit-gobject-1-dev \\\n        libseccomp-dev libsoup2.4-dev libcurl4-openssl-dev libsystemd-dev libxml2-utils libgpgme11-dev gobject-introspection \\\n        libgirepository1.0-dev libappstream-dev libdconf-dev clang socat meson libdbus-1-dev e2fslibs-dev bubblewrap xdg-dbus-proxy \\\n        python3-pip meson ninja-build libyaml-dev libstemmer-dev gperf itstool libmalcontent-0-dev\n        # One of the tests wants this\n        sudo mkdir /tmp/flatpak-com.example.App-OwnedByRoot\n    - name: Check out flatpak\n      uses: actions/checkout@v3\n      with:\n        submodules: true\n    - name: Build appstream dependency # (We need at least 0.15.3 for the g_once fix)\n      run: |\n        sudo pip3 install 'meson~=0.62'\n        git clone --branch v0.15.4 --depth 1 --no-tags https://github.com/ximion/appstream.git ./appstream\n        pushd ./appstream\n        meson setup --prefix=/usr _build\n        ninja -C _build\n        sudo ninja -C _build install\n        popd\n    - name: Create logs dir\n      run: mkdir test-logs\n    - name: autogen.sh\n      run: NOCONFIGURE=1 ./autogen.sh\n    - name: configure\n      # We don't do gtk-doc or GObject-Introspection here, because they can\n      # clash with AddressSanitizer. Instead, the clang build enables those.\n      run: |\n        mkdir _build\n        pushd _build\n        ../configure  --enable-internal-checks --enable-asan --disable-introspection --with-curl --with-system-bubblewrap --with-system-dbus-proxy\n        popd\n      env:\n        CFLAGS: -O2 -Wp,-D_FORTIFY_SOURCE=2\n    - name: Build flatpak\n      run: make -C _build -j $(getconf _NPROCESSORS_ONLN)\n    - name: Run tests\n      run: make -C _build check -j $(getconf _NPROCESSORS_ONLN)\n      env:\n        ASAN_OPTIONS: detect_leaks=0 # Right now we're not fully clean, but this gets us use-after-free etc\n    - name: Collect overall test logs on failure\n      if: failure()\n      run: mv _build/test-suite.log test-logs/ || true\n    - name: Collect individual test logs on cancel\n      if: failure() || cancelled()\n      run: mv _build/tests/*.log test-logs/ || true\n    - name: Upload test logs\n      uses: actions/upload-artifact@v3\n      if: failure() || cancelled()\n      with:\n        name: test logs\n        path: test-logs\n\n  # This is similar to the above, but runs on an older OS with some different configuration:\n  # * Soup instead of curl\n  # * Use built in bubblewrap instead of external\n  # * Use built in xdg-dbus-proxy instead of external\n  # * Disable malcontent build-dependency\n  check-alt2:\n    name: Build with gcc and test (older)\n    runs-on: ubuntu-20.04\n    steps:\n    - name: Install Dependencies\n      run: |\n        sudo add-apt-repository ppa:flatpak/stable\n        sudo add-apt-repository 'deb https://download.mono-project.com/repo/ubuntu stable-bionic main' # Needed for updates to work\n        sudo apt-get update\n        sudo apt-get install -y libglib2.0-dev attr automake gettext autopoint bison  dbus gtk-doc-tools \\\n        libfuse-dev ostree libostree-dev libarchive-dev libzstd-dev libcap-dev libattr1-dev libdw-dev libelf-dev python3-pyparsing \\\n        libjson-glib-dev shared-mime-info desktop-file-utils libpolkit-agent-1-dev libpolkit-gobject-1-dev \\\n        libseccomp-dev libsoup2.4-dev libcurl4-openssl-dev libsystemd-dev libxml2-utils libgpgme11-dev gobject-introspection \\\n        libgirepository1.0-dev libappstream-dev libdconf-dev clang socat meson libdbus-1-dev e2fslibs-dev\n        # One of the tests wants this\n        sudo mkdir /tmp/flatpak-com.example.App-OwnedByRoot\n    - name: Check out flatpak\n      uses: actions/checkout@v3\n      with:\n        submodules: true\n    - name: Create logs dir\n      run: mkdir test-logs\n    - name: autogen.sh\n      run: NOCONFIGURE=1 ./autogen.sh\n    - name: configure\n      # We don't do gtk-doc or GObject-Introspection here, because they can\n      # clash with AddressSanitizer. Instead, the clang build enables those.\n      run: |\n        mkdir _build\n        pushd _build\n        ../configure  --enable-internal-checks --enable-asan --disable-introspection --without-curl\n        popd\n      env:\n        CFLAGS: -O2 -Wp,-D_FORTIFY_SOURCE=2\n    - name: Build flatpak\n      run: make -C _build -j $(getconf _NPROCESSORS_ONLN)\n    # We build with Ubuntu 18.04's GLib to prove that we can, but there's a\n    # race condition that makes it fail tests, so upgrade to a version from\n    # a PPA before running the tests: see\n    # https://github.com/flatpak/flatpak/pull/3121,\n    # https://gitlab.gnome.org/GNOME/glib/-/issues/1014\n    - name: Upgrade GLib before running tests\n      run: |\n        sudo apt-get install -y libglib2.0-dev\n    - name: Run tests\n      run: make -C _build check -j $(getconf _NPROCESSORS_ONLN)\n      env:\n        ASAN_OPTIONS: detect_leaks=0 # Right now we're not fully clean, but this gets us use-after-free etc\n    - name: Collect overall test logs on failure\n      if: failure()\n      run: mv _build/test-suite.log test-logs/ || true\n    - name: Collect individual test logs on cancel\n      if: failure() || cancelled()\n      run: mv _build/tests/*.log test-logs/ || true\n    - name: Upload test logs\n      uses: actions/upload-artifact@v3\n      if: failure() || cancelled()\n      with:\n        name: test logs\n        path: test-logs\n\n  clang:\n    permissions:\n      security-events: write # for codeql\n    name: Build with clang and analyze\n    runs-on: ubuntu-20.04\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'cpp', 'python' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n    steps:\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n    - name: Install Dependencies\n      run: |\n        sudo add-apt-repository ppa:flatpak/stable\n        sudo add-apt-repository 'deb https://download.mono-project.com/repo/ubuntu stable-bionic main' # Needed for updates to work\n        sudo apt-get update\n        sudo apt-get install -y libglib2.0-dev attr automake gettext autopoint bison  dbus gtk-doc-tools \\\n        libfuse-dev ostree libostree-dev libarchive-dev libzstd-dev libcap-dev libattr1-dev libdw-dev libelf-dev python3-pyparsing \\\n        libjson-glib-dev shared-mime-info desktop-file-utils libpolkit-agent-1-dev libpolkit-gobject-1-dev \\\n        libseccomp-dev libsoup2.4-dev libcurl4-openssl-dev libsystemd-dev libxml2-utils libgpgme11-dev gobject-introspection \\\n        libgirepository1.0-dev libappstream-dev libdconf-dev clang e2fslibs-dev\n    - name: Check out flatpak\n      uses: actions/checkout@v3\n      with:\n        submodules: true\n    - name: configure\n      run: ./autogen.sh\n      env:\n        CC: clang\n        CFLAGS: -Werror=unused-variable\n    - name: Build flatpak\n      run: make -j $(getconf _NPROCESSORS_ONLN)\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n\n  valgrind:\n    name: Run tests in valgrind\n    needs: check # Don't run expensive test if main check fails\n    runs-on: ubuntu-22.04 # Might as well test with a different one too\n    if: ${{ false }} # Currently Valgrind takes too long and always fails\n    steps:\n    - name: Install Dependencies\n      run: |\n        sudo add-apt-repository ppa:flatpak/stable\n        sudo apt-get update\n        sudo add-apt-repository 'deb https://download.mono-project.com/repo/ubuntu stable-focal main' # Needed for updates to work\n        sudo apt-get install -y libglib2.0-dev attr automake gettext autopoint bison  dbus gtk-doc-tools \\\n        libfuse-dev ostree libostree-dev libarchive-dev libzstd-dev libcap-dev libattr1-dev libdw-dev libelf-dev python3-pyparsing \\\n        libjson-glib-dev shared-mime-info desktop-file-utils libpolkit-agent-1-dev libpolkit-gobject-1-dev \\\n        libseccomp-dev libsoup2.4-dev libcurl4-openssl-dev libsystemd-dev libxml2-utils libgpgme11-dev gobject-introspection \\\n        libgirepository1.0-dev libappstream-dev libdconf-dev clang socat meson libdbus-1-dev \\\n        valgrind e2fslibs-dev\n    - name: Check out flatpak\n      uses: actions/checkout@v3\n      with:\n        submodules: true\n    - name: Create logs dir\n      run: mkdir test-logs\n    - name: autogen.sh\n      run: NOCONFIGURE=1 ./autogen.sh\n    - name: configure\n      run: |\n        mkdir _build\n        pushd _build\n        ../configure --enable-gtk-doc --enable-gtk-doc-html --enable-introspection\n        popd\n      env:\n        CFLAGS: -O2\n    - name: Build flatpak\n      run: make -C _build -j $(getconf _NPROCESSORS_ONLN)\n    - name: Distcheck\n      run: make -C _build distcheck\n    - name: Run tests under valgrind\n      run: make -C _build check\n      env:\n        FLATPAK_TESTS_VALGRIND: true\n    - name: Collect overall test logs on failure\n      if: failure()\n      run: mv _build/test-suite.log test-logs/ || true\n    - name: Collect individual test logs on cancel\n      if: failure() || cancelled()\n      run: mv _build/tests/*.log test-logs/ || true\n    - name: Upload test logs\n      uses: actions/upload-artifact@v3\n      if: failure() || cancelled()\n      with:\n        name: test logs\n        path: test-logs\n",
    "source": "endlessm/flatpak",
    "path": ".github/workflows/check.yml",
    "url": "https://github.com/endlessm/flatpak/blob/787caf96aaf2b233020a776397a2584ee079af44/.github/workflows/check.yml",
    "retrieved_at": "2025-09-07T01:43:23.463969Z",
    "question_style": "style_5"
  },
  {
    "question": "Generate a GitHub Actions workflow YAML file that replicates the functionality of the provided CodeQL workflow for code analysis.",
    "answer": "# For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"dev\", master ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"dev\" ]\n  schedule:\n    - cron: '22 22 * * 2'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'java', 'javascript', 'python' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        \n        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n        # queries: security-extended,security-and-quality\n\n        \n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # ℹ️ Command-line programs to run using the OS shell.\n    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    #   If the Autobuild fails above, remove it and uncomment the following three lines. \n    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.\n\n    # - run: |\n    #   echo \"Run, Build Application using script\"\n    #   ./location_of_script_within_repo/buildscript.sh\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n",
    "source": "ibi-group/datatools-server",
    "path": ".github/workflows/codeql-analysis.yml",
    "url": "https://github.com/ibi-group/datatools-server/blob/80c716e3048828d50e68ee53d10453e658cfdeeb/.github/workflows/codeql-analysis.yml",
    "retrieved_at": "2025-09-07T01:43:24.177596Z",
    "question_style": "style_1"
  },
  {
    "question": "What events or schedule configurations trigger this CodeQL workflow to run?",
    "answer": "# For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"dev\", master ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"dev\" ]\n  schedule:\n    - cron: '22 22 * * 2'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'java', 'javascript', 'python' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        \n        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n        # queries: security-extended,security-and-quality\n\n        \n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # ℹ️ Command-line programs to run using the OS shell.\n    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    #   If the Autobuild fails above, remove it and uncomment the following three lines. \n    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.\n\n    # - run: |\n    #   echo \"Run, Build Application using script\"\n    #   ./location_of_script_within_repo/buildscript.sh\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n",
    "source": "ibi-group/datatools-server",
    "path": ".github/workflows/codeql-analysis.yml",
    "url": "https://github.com/ibi-group/datatools-server/blob/80c716e3048828d50e68ee53d10453e658cfdeeb/.github/workflows/codeql-analysis.yml",
    "retrieved_at": "2025-09-07T01:43:24.838621Z",
    "question_style": "style_2"
  },
  {
    "question": "Which jobs or steps within the CodeQL workflow run in parallel, and which have dependencies on others?",
    "answer": "# For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"dev\", master ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"dev\" ]\n  schedule:\n    - cron: '22 22 * * 2'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'java', 'javascript', 'python' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        \n        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n        # queries: security-extended,security-and-quality\n\n        \n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # ℹ️ Command-line programs to run using the OS shell.\n    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    #   If the Autobuild fails above, remove it and uncomment the following three lines. \n    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.\n\n    # - run: |\n    #   echo \"Run, Build Application using script\"\n    #   ./location_of_script_within_repo/buildscript.sh\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n",
    "source": "ibi-group/datatools-server",
    "path": ".github/workflows/codeql-analysis.yml",
    "url": "https://github.com/ibi-group/datatools-server/blob/80c716e3048828d50e68ee53d10453e658cfdeeb/.github/workflows/codeql-analysis.yml",
    "retrieved_at": "2025-09-07T01:43:25.402337Z",
    "question_style": "style_3"
  },
  {
    "question": "Does this workflow utilize any environment variables, secrets, caching or artifacts?",
    "answer": "# For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"dev\", master ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"dev\" ]\n  schedule:\n    - cron: '22 22 * * 2'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'java', 'javascript', 'python' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        \n        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n        # queries: security-extended,security-and-quality\n\n        \n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # ℹ️ Command-line programs to run using the OS shell.\n    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    #   If the Autobuild fails above, remove it and uncomment the following three lines. \n    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.\n\n    # - run: |\n    #   echo \"Run, Build Application using script\"\n    #   ./location_of_script_within_repo/buildscript.sh\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n",
    "source": "ibi-group/datatools-server",
    "path": ".github/workflows/codeql-analysis.yml",
    "url": "https://github.com/ibi-group/datatools-server/blob/80c716e3048828d50e68ee53d10453e658cfdeeb/.github/workflows/codeql-analysis.yml",
    "retrieved_at": "2025-09-07T01:43:25.796755Z",
    "question_style": "style_4"
  },
  {
    "question": "What is the main purpose of this CodeQL workflow?",
    "answer": "# For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"dev\", master ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"dev\" ]\n  schedule:\n    - cron: '22 22 * * 2'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'java', 'javascript', 'python' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        \n        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n        # queries: security-extended,security-and-quality\n\n        \n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # ℹ️ Command-line programs to run using the OS shell.\n    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    #   If the Autobuild fails above, remove it and uncomment the following three lines. \n    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.\n\n    # - run: |\n    #   echo \"Run, Build Application using script\"\n    #   ./location_of_script_within_repo/buildscript.sh\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n",
    "source": "ibi-group/datatools-server",
    "path": ".github/workflows/codeql-analysis.yml",
    "url": "https://github.com/ibi-group/datatools-server/blob/80c716e3048828d50e68ee53d10453e658cfdeeb/.github/workflows/codeql-analysis.yml",
    "retrieved_at": "2025-09-07T01:43:26.215093Z",
    "question_style": "style_5"
  },
  {
    "question": "Create a GitHub Actions workflow that duplicates the functionality of the provided YAML, assigning reviewers based on a configuration file.",
    "answer": "# This file is related to assigning the Project Lead for the PRs\n\nname: 'Add Project Lead as Reviewer'\non: pull_request\n\njobs:\n  add-reviews:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: kentaro-m/auto-assign-action@v1.1.2\n        with:\n          configuration-path: \".github/auto_assign.yml\"\n",
    "source": "KamalDGRT/yii2-portfolio",
    "path": ".github/workflows/assign_pr.yml",
    "url": "https://github.com/KamalDGRT/yii2-portfolio/blob/5671dcf57fcc4d3451520d36f155dc8263ffc35f/.github/workflows/assign_pr.yml",
    "retrieved_at": "2025-09-08T01:43:07.200490Z",
    "question_style": "style_1"
  },
  {
    "question": "What pull request event triggers this workflow?",
    "answer": "# This file is related to assigning the Project Lead for the PRs\n\nname: 'Add Project Lead as Reviewer'\non: pull_request\n\njobs:\n  add-reviews:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: kentaro-m/auto-assign-action@v1.1.2\n        with:\n          configuration-path: \".github/auto_assign.yml\"\n",
    "source": "KamalDGRT/yii2-portfolio",
    "path": ".github/workflows/assign_pr.yml",
    "url": "https://github.com/KamalDGRT/yii2-portfolio/blob/5671dcf57fcc4d3451520d36f155dc8263ffc35f/.github/workflows/assign_pr.yml",
    "retrieved_at": "2025-09-08T01:43:07.654947Z",
    "question_style": "style_2"
  },
  {
    "question": "Which jobs or steps in this workflow run concurrently or are contingent upon the completion of others?",
    "answer": "# This file is related to assigning the Project Lead for the PRs\n\nname: 'Add Project Lead as Reviewer'\non: pull_request\n\njobs:\n  add-reviews:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: kentaro-m/auto-assign-action@v1.1.2\n        with:\n          configuration-path: \".github/auto_assign.yml\"\n",
    "source": "KamalDGRT/yii2-portfolio",
    "path": ".github/workflows/assign_pr.yml",
    "url": "https://github.com/KamalDGRT/yii2-portfolio/blob/5671dcf57fcc4d3451520d36f155dc8263ffc35f/.github/workflows/assign_pr.yml",
    "retrieved_at": "2025-09-08T01:43:08.210769Z",
    "question_style": "style_3"
  },
  {
    "question": "Does the `auto_assign.yml` configuration file contain any secrets or environment variables?",
    "answer": "# This file is related to assigning the Project Lead for the PRs\n\nname: 'Add Project Lead as Reviewer'\non: pull_request\n\njobs:\n  add-reviews:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: kentaro-m/auto-assign-action@v1.1.2\n        with:\n          configuration-path: \".github/auto_assign.yml\"\n",
    "source": "KamalDGRT/yii2-portfolio",
    "path": ".github/workflows/assign_pr.yml",
    "url": "https://github.com/KamalDGRT/yii2-portfolio/blob/5671dcf57fcc4d3451520d36f155dc8263ffc35f/.github/workflows/assign_pr.yml",
    "retrieved_at": "2025-09-08T01:43:08.811271Z",
    "question_style": "style_4"
  },
  {
    "question": "What is the primary function of this workflow regarding pull requests?",
    "answer": "# This file is related to assigning the Project Lead for the PRs\n\nname: 'Add Project Lead as Reviewer'\non: pull_request\n\njobs:\n  add-reviews:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: kentaro-m/auto-assign-action@v1.1.2\n        with:\n          configuration-path: \".github/auto_assign.yml\"\n",
    "source": "KamalDGRT/yii2-portfolio",
    "path": ".github/workflows/assign_pr.yml",
    "url": "https://github.com/KamalDGRT/yii2-portfolio/blob/5671dcf57fcc4d3451520d36f155dc8263ffc35f/.github/workflows/assign_pr.yml",
    "retrieved_at": "2025-09-08T01:43:09.188007Z",
    "question_style": "style_5"
  },
  {
    "question": "Create a GitHub Actions workflow YAML file that replicates the functionality of the provided Crowdin Action workflow.",
    "answer": "name: Crowdin Action\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  synchronize-with-crowdin:\n    runs-on: ubuntu-latest\n\n    steps:\n\n    - name: Checkout\n      uses: actions/checkout@v2\n\n    - name: crowdin action\n      uses: crowdin/github-action@1.4.2\n      with:\n        upload_translations: true\n        download_translations: true\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}\n        CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}\n",
    "source": "sagivo/calendso-2",
    "path": ".github/workflows/crowdin.yml",
    "url": "https://github.com/sagivo/calendso-2/blob/0d50d278bbb734598e112f507334596544a44955/.github/workflows/crowdin.yml",
    "retrieved_at": "2025-09-08T01:43:09.946922Z",
    "question_style": "style_1"
  },
  {
    "question": "What events on the `main` branch trigger this Crowdin synchronization workflow?",
    "answer": "name: Crowdin Action\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  synchronize-with-crowdin:\n    runs-on: ubuntu-latest\n\n    steps:\n\n    - name: Checkout\n      uses: actions/checkout@v2\n\n    - name: crowdin action\n      uses: crowdin/github-action@1.4.2\n      with:\n        upload_translations: true\n        download_translations: true\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}\n        CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}\n",
    "source": "sagivo/calendso-2",
    "path": ".github/workflows/crowdin.yml",
    "url": "https://github.com/sagivo/calendso-2/blob/0d50d278bbb734598e112f507334596544a44955/.github/workflows/crowdin.yml",
    "retrieved_at": "2025-09-08T01:43:10.489654Z",
    "question_style": "style_2"
  },
  {
    "question": "Does this workflow have any jobs or steps that execute in parallel or depend on the completion of other jobs or steps?",
    "answer": "name: Crowdin Action\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  synchronize-with-crowdin:\n    runs-on: ubuntu-latest\n\n    steps:\n\n    - name: Checkout\n      uses: actions/checkout@v2\n\n    - name: crowdin action\n      uses: crowdin/github-action@1.4.2\n      with:\n        upload_translations: true\n        download_translations: true\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}\n        CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}\n",
    "source": "sagivo/calendso-2",
    "path": ".github/workflows/crowdin.yml",
    "url": "https://github.com/sagivo/calendso-2/blob/0d50d278bbb734598e112f507334596544a44955/.github/workflows/crowdin.yml",
    "retrieved_at": "2025-09-08T01:43:11.147387Z",
    "question_style": "style_3"
  },
  {
    "question": "How are the `CROWDIN_PROJECT_ID` and `CROWDIN_PERSONAL_TOKEN` secrets used within the Crowdin Action?",
    "answer": "name: Crowdin Action\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  synchronize-with-crowdin:\n    runs-on: ubuntu-latest\n\n    steps:\n\n    - name: Checkout\n      uses: actions/checkout@v2\n\n    - name: crowdin action\n      uses: crowdin/github-action@1.4.2\n      with:\n        upload_translations: true\n        download_translations: true\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}\n        CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}\n",
    "source": "sagivo/calendso-2",
    "path": ".github/workflows/crowdin.yml",
    "url": "https://github.com/sagivo/calendso-2/blob/0d50d278bbb734598e112f507334596544a44955/.github/workflows/crowdin.yml",
    "retrieved_at": "2025-09-08T01:43:11.601051Z",
    "question_style": "style_4"
  },
  {
    "question": "What is the primary function of the Crowdin Action workflow?",
    "answer": "name: Crowdin Action\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  synchronize-with-crowdin:\n    runs-on: ubuntu-latest\n\n    steps:\n\n    - name: Checkout\n      uses: actions/checkout@v2\n\n    - name: crowdin action\n      uses: crowdin/github-action@1.4.2\n      with:\n        upload_translations: true\n        download_translations: true\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}\n        CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}\n",
    "source": "sagivo/calendso-2",
    "path": ".github/workflows/crowdin.yml",
    "url": "https://github.com/sagivo/calendso-2/blob/0d50d278bbb734598e112f507334596544a44955/.github/workflows/crowdin.yml",
    "retrieved_at": "2025-09-08T01:43:12.000806Z",
    "question_style": "style_5"
  },
  {
    "question": "Create a GitHub Actions workflow YAML file that replicates the functionality of the provided workflow YAML, including triggers, jobs, and steps.",
    "answer": "# Copyright (c) 2020 Linaro Limited.\n# SPDX-License-Identifier: Apache-2.0\n\nname: Zephyr West Command Tests\n\non:\n  push:\n    paths:\n    - 'scripts/west-commands.yml'\n    - 'scripts/west_commands/**'\n    - '.github/workflows/west_cmds.yml'\n  pull_request:\n    paths:\n    - 'scripts/west-commands.yml'\n    - 'scripts/west_commands/**'\n    - '.github/workflows/west_cmds.yml'\n\njobs:\n  west-commnads:\n    name: West Command Tests\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        python-version: [3.6, 3.7, 3.8]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        exclude:\n          - os: macos-latest\n            python-version: 3.6\n          - os: windows-latest\n            python-version: 3.6\n    steps:\n    - name: checkout\n      uses: actions/checkout@v2\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v1\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: cache-pip-linux\n      if: startsWith(runner.os, 'Linux')\n      uses: actions/cache@v1\n      with:\n        path: ~/.cache/pip\n        key: ${{ runner.os }}-pip-${{ matrix.python-version }}\n        restore-keys: |\n          ${{ runner.os }}-pip-${{ matrix.python-version }}\n    - name: cache-pip-mac\n      if: startsWith(runner.os, 'macOS')\n      uses: actions/cache@v1\n      with:\n        path: ~/Library/Caches/pip\n        # Trailing '-' was just to get a different cache name\n        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-\n        restore-keys: |\n          ${{ runner.os }}-pip-${{ matrix.python-version }}-\n    - name: cache-pip-win\n      if: startsWith(runner.os, 'Windows')\n      uses: actions/cache@v1\n      with:\n        path: ~\\AppData\\Local\\pip\\Cache\n        key: ${{ runner.os }}-pip-${{ matrix.python-version }}\n        restore-keys: |\n          ${{ runner.os }}-pip-${{ matrix.python-version }}\n    - name: install pytest\n      run: |\n        pip3 install wheel\n        pip3 install pytest west pyelftools canopen progress mypy intelhex psutil\n    - name: run pytest-win\n      if: runner.os == 'Windows'\n      run: |\n        python ./scripts/west_commands/run_tests.py\n    - name: run pytest-mac-linux\n      if: runner.os != 'Windows'\n      run: |\n        ./scripts/west_commands/run_tests.py\n",
    "source": "GPE-Sistemas/zephyr-ncs-gpe",
    "path": ".github/workflows/west_cmds.yml",
    "url": "https://github.com/GPE-Sistemas/zephyr-ncs-gpe/blob/fe0c5d10e02de3083a4044aa51a97144e749d144/.github/workflows/west_cmds.yml",
    "retrieved_at": "2025-09-09T01:40:09.001404Z",
    "question_style": "style_1"
  },
  {
    "question": "What events on the repository trigger the Zephyr West Command Tests workflow?",
    "answer": "# Copyright (c) 2020 Linaro Limited.\n# SPDX-License-Identifier: Apache-2.0\n\nname: Zephyr West Command Tests\n\non:\n  push:\n    paths:\n    - 'scripts/west-commands.yml'\n    - 'scripts/west_commands/**'\n    - '.github/workflows/west_cmds.yml'\n  pull_request:\n    paths:\n    - 'scripts/west-commands.yml'\n    - 'scripts/west_commands/**'\n    - '.github/workflows/west_cmds.yml'\n\njobs:\n  west-commnads:\n    name: West Command Tests\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        python-version: [3.6, 3.7, 3.8]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        exclude:\n          - os: macos-latest\n            python-version: 3.6\n          - os: windows-latest\n            python-version: 3.6\n    steps:\n    - name: checkout\n      uses: actions/checkout@v2\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v1\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: cache-pip-linux\n      if: startsWith(runner.os, 'Linux')\n      uses: actions/cache@v1\n      with:\n        path: ~/.cache/pip\n        key: ${{ runner.os }}-pip-${{ matrix.python-version }}\n        restore-keys: |\n          ${{ runner.os }}-pip-${{ matrix.python-version }}\n    - name: cache-pip-mac\n      if: startsWith(runner.os, 'macOS')\n      uses: actions/cache@v1\n      with:\n        path: ~/Library/Caches/pip\n        # Trailing '-' was just to get a different cache name\n        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-\n        restore-keys: |\n          ${{ runner.os }}-pip-${{ matrix.python-version }}-\n    - name: cache-pip-win\n      if: startsWith(runner.os, 'Windows')\n      uses: actions/cache@v1\n      with:\n        path: ~\\AppData\\Local\\pip\\Cache\n        key: ${{ runner.os }}-pip-${{ matrix.python-version }}\n        restore-keys: |\n          ${{ runner.os }}-pip-${{ matrix.python-version }}\n    - name: install pytest\n      run: |\n        pip3 install wheel\n        pip3 install pytest west pyelftools canopen progress mypy intelhex psutil\n    - name: run pytest-win\n      if: runner.os == 'Windows'\n      run: |\n        python ./scripts/west_commands/run_tests.py\n    - name: run pytest-mac-linux\n      if: runner.os != 'Windows'\n      run: |\n        ./scripts/west_commands/run_tests.py\n",
    "source": "GPE-Sistemas/zephyr-ncs-gpe",
    "path": ".github/workflows/west_cmds.yml",
    "url": "https://github.com/GPE-Sistemas/zephyr-ncs-gpe/blob/fe0c5d10e02de3083a4044aa51a97144e749d144/.github/workflows/west_cmds.yml",
    "retrieved_at": "2025-09-09T01:40:10.639143Z",
    "question_style": "style_2"
  },
  {
    "question": "Which jobs or steps within the \"West Command Tests\" workflow execute in parallel, and which have dependencies on others?",
    "answer": "# Copyright (c) 2020 Linaro Limited.\n# SPDX-License-Identifier: Apache-2.0\n\nname: Zephyr West Command Tests\n\non:\n  push:\n    paths:\n    - 'scripts/west-commands.yml'\n    - 'scripts/west_commands/**'\n    - '.github/workflows/west_cmds.yml'\n  pull_request:\n    paths:\n    - 'scripts/west-commands.yml'\n    - 'scripts/west_commands/**'\n    - '.github/workflows/west_cmds.yml'\n\njobs:\n  west-commnads:\n    name: West Command Tests\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        python-version: [3.6, 3.7, 3.8]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        exclude:\n          - os: macos-latest\n            python-version: 3.6\n          - os: windows-latest\n            python-version: 3.6\n    steps:\n    - name: checkout\n      uses: actions/checkout@v2\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v1\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: cache-pip-linux\n      if: startsWith(runner.os, 'Linux')\n      uses: actions/cache@v1\n      with:\n        path: ~/.cache/pip\n        key: ${{ runner.os }}-pip-${{ matrix.python-version }}\n        restore-keys: |\n          ${{ runner.os }}-pip-${{ matrix.python-version }}\n    - name: cache-pip-mac\n      if: startsWith(runner.os, 'macOS')\n      uses: actions/cache@v1\n      with:\n        path: ~/Library/Caches/pip\n        # Trailing '-' was just to get a different cache name\n        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-\n        restore-keys: |\n          ${{ runner.os }}-pip-${{ matrix.python-version }}-\n    - name: cache-pip-win\n      if: startsWith(runner.os, 'Windows')\n      uses: actions/cache@v1\n      with:\n        path: ~\\AppData\\Local\\pip\\Cache\n        key: ${{ runner.os }}-pip-${{ matrix.python-version }}\n        restore-keys: |\n          ${{ runner.os }}-pip-${{ matrix.python-version }}\n    - name: install pytest\n      run: |\n        pip3 install wheel\n        pip3 install pytest west pyelftools canopen progress mypy intelhex psutil\n    - name: run pytest-win\n      if: runner.os == 'Windows'\n      run: |\n        python ./scripts/west_commands/run_tests.py\n    - name: run pytest-mac-linux\n      if: runner.os != 'Windows'\n      run: |\n        ./scripts/west_commands/run_tests.py\n",
    "source": "GPE-Sistemas/zephyr-ncs-gpe",
    "path": ".github/workflows/west_cmds.yml",
    "url": "https://github.com/GPE-Sistemas/zephyr-ncs-gpe/blob/fe0c5d10e02de3083a4044aa51a97144e749d144/.github/workflows/west_cmds.yml",
    "retrieved_at": "2025-09-09T01:40:12.890911Z",
    "question_style": "style_3"
  },
  {
    "question": "How are the pip cache keys constructed and how do they differ across operating systems?",
    "answer": "# Copyright (c) 2020 Linaro Limited.\n# SPDX-License-Identifier: Apache-2.0\n\nname: Zephyr West Command Tests\n\non:\n  push:\n    paths:\n    - 'scripts/west-commands.yml'\n    - 'scripts/west_commands/**'\n    - '.github/workflows/west_cmds.yml'\n  pull_request:\n    paths:\n    - 'scripts/west-commands.yml'\n    - 'scripts/west_commands/**'\n    - '.github/workflows/west_cmds.yml'\n\njobs:\n  west-commnads:\n    name: West Command Tests\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        python-version: [3.6, 3.7, 3.8]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        exclude:\n          - os: macos-latest\n            python-version: 3.6\n          - os: windows-latest\n            python-version: 3.6\n    steps:\n    - name: checkout\n      uses: actions/checkout@v2\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v1\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: cache-pip-linux\n      if: startsWith(runner.os, 'Linux')\n      uses: actions/cache@v1\n      with:\n        path: ~/.cache/pip\n        key: ${{ runner.os }}-pip-${{ matrix.python-version }}\n        restore-keys: |\n          ${{ runner.os }}-pip-${{ matrix.python-version }}\n    - name: cache-pip-mac\n      if: startsWith(runner.os, 'macOS')\n      uses: actions/cache@v1\n      with:\n        path: ~/Library/Caches/pip\n        # Trailing '-' was just to get a different cache name\n        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-\n        restore-keys: |\n          ${{ runner.os }}-pip-${{ matrix.python-version }}-\n    - name: cache-pip-win\n      if: startsWith(runner.os, 'Windows')\n      uses: actions/cache@v1\n      with:\n        path: ~\\AppData\\Local\\pip\\Cache\n        key: ${{ runner.os }}-pip-${{ matrix.python-version }}\n        restore-keys: |\n          ${{ runner.os }}-pip-${{ matrix.python-version }}\n    - name: install pytest\n      run: |\n        pip3 install wheel\n        pip3 install pytest west pyelftools canopen progress mypy intelhex psutil\n    - name: run pytest-win\n      if: runner.os == 'Windows'\n      run: |\n        python ./scripts/west_commands/run_tests.py\n    - name: run pytest-mac-linux\n      if: runner.os != 'Windows'\n      run: |\n        ./scripts/west_commands/run_tests.py\n",
    "source": "GPE-Sistemas/zephyr-ncs-gpe",
    "path": ".github/workflows/west_cmds.yml",
    "url": "https://github.com/GPE-Sistemas/zephyr-ncs-gpe/blob/fe0c5d10e02de3083a4044aa51a97144e749d144/.github/workflows/west_cmds.yml",
    "retrieved_at": "2025-09-09T01:40:13.422547Z",
    "question_style": "style_4"
  },
  {
    "question": "What is the purpose of the \"Zephyr West Command Tests\" workflow?",
    "answer": "# Copyright (c) 2020 Linaro Limited.\n# SPDX-License-Identifier: Apache-2.0\n\nname: Zephyr West Command Tests\n\non:\n  push:\n    paths:\n    - 'scripts/west-commands.yml'\n    - 'scripts/west_commands/**'\n    - '.github/workflows/west_cmds.yml'\n  pull_request:\n    paths:\n    - 'scripts/west-commands.yml'\n    - 'scripts/west_commands/**'\n    - '.github/workflows/west_cmds.yml'\n\njobs:\n  west-commnads:\n    name: West Command Tests\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        python-version: [3.6, 3.7, 3.8]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        exclude:\n          - os: macos-latest\n            python-version: 3.6\n          - os: windows-latest\n            python-version: 3.6\n    steps:\n    - name: checkout\n      uses: actions/checkout@v2\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v1\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: cache-pip-linux\n      if: startsWith(runner.os, 'Linux')\n      uses: actions/cache@v1\n      with:\n        path: ~/.cache/pip\n        key: ${{ runner.os }}-pip-${{ matrix.python-version }}\n        restore-keys: |\n          ${{ runner.os }}-pip-${{ matrix.python-version }}\n    - name: cache-pip-mac\n      if: startsWith(runner.os, 'macOS')\n      uses: actions/cache@v1\n      with:\n        path: ~/Library/Caches/pip\n        # Trailing '-' was just to get a different cache name\n        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-\n        restore-keys: |\n          ${{ runner.os }}-pip-${{ matrix.python-version }}-\n    - name: cache-pip-win\n      if: startsWith(runner.os, 'Windows')\n      uses: actions/cache@v1\n      with:\n        path: ~\\AppData\\Local\\pip\\Cache\n        key: ${{ runner.os }}-pip-${{ matrix.python-version }}\n        restore-keys: |\n          ${{ runner.os }}-pip-${{ matrix.python-version }}\n    - name: install pytest\n      run: |\n        pip3 install wheel\n        pip3 install pytest west pyelftools canopen progress mypy intelhex psutil\n    - name: run pytest-win\n      if: runner.os == 'Windows'\n      run: |\n        python ./scripts/west_commands/run_tests.py\n    - name: run pytest-mac-linux\n      if: runner.os != 'Windows'\n      run: |\n        ./scripts/west_commands/run_tests.py\n",
    "source": "GPE-Sistemas/zephyr-ncs-gpe",
    "path": ".github/workflows/west_cmds.yml",
    "url": "https://github.com/GPE-Sistemas/zephyr-ncs-gpe/blob/fe0c5d10e02de3083a4044aa51a97144e749d144/.github/workflows/west_cmds.yml",
    "retrieved_at": "2025-09-09T01:40:14.095184Z",
    "question_style": "style_5"
  },
  {
    "question": "Generate a GitHub Actions workflow YAML file that replicates the functionality of the provided workflow.",
    "answer": "name: Autograding Tests\n'on':\n  - push\n  - workflow_dispatch\n  - repository_dispatch\npermissions:\n  checks: write\n  actions: read\n  contents: read\njobs:\n  run-autograding-tests:\n    runs-on: ubuntu-latest\n    if: github.actor != 'github-classroom[bot]'\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      - name: Download mempool\n        uses: GuillaumeFalourd/clone-github-repo-action@v2.3\n        with:\n          owner: 'SummerOfBitcoin'\n          repository: 'code-challenge-2024-mempool'\n      - name: Validate block\n        id: validate-block\n        uses: SummerOfBitcoin/code-challenge-2024-grader@v2.8\n        with:\n          test-name: 'Validate block '\n          command: chmod +x ./run.sh && ./run.sh\n          timeout: 10\n          max-fee: 20616923\n          max-score: 100\n          passing-score: 60\n      - name: Autograding Reporter\n        uses: SummerOfBitcoin/autograding-grading-reporter@v2.2\n        env:\n          VALIDATE-BLOCK_RESULTS: \"${{steps.validate-block.outputs.result}}\"\n        with:\n          runners: validate-block\n",
    "source": "Hugongra/code-challenge-2024-Hugongra",
    "path": ".github/workflows/classroom.yml",
    "url": "https://github.com/Hugongra/code-challenge-2024-Hugongra/blob/493c09fba612c14feb89bfc7e245b81c8be2b541/.github/workflows/classroom.yml",
    "retrieved_at": "2025-09-09T01:40:14.898486Z",
    "question_style": "style_1"
  },
  {
    "question": "What events trigger the Autograding Tests workflow?",
    "answer": "name: Autograding Tests\n'on':\n  - push\n  - workflow_dispatch\n  - repository_dispatch\npermissions:\n  checks: write\n  actions: read\n  contents: read\njobs:\n  run-autograding-tests:\n    runs-on: ubuntu-latest\n    if: github.actor != 'github-classroom[bot]'\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      - name: Download mempool\n        uses: GuillaumeFalourd/clone-github-repo-action@v2.3\n        with:\n          owner: 'SummerOfBitcoin'\n          repository: 'code-challenge-2024-mempool'\n      - name: Validate block\n        id: validate-block\n        uses: SummerOfBitcoin/code-challenge-2024-grader@v2.8\n        with:\n          test-name: 'Validate block '\n          command: chmod +x ./run.sh && ./run.sh\n          timeout: 10\n          max-fee: 20616923\n          max-score: 100\n          passing-score: 60\n      - name: Autograding Reporter\n        uses: SummerOfBitcoin/autograding-grading-reporter@v2.2\n        env:\n          VALIDATE-BLOCK_RESULTS: \"${{steps.validate-block.outputs.result}}\"\n        with:\n          runners: validate-block\n",
    "source": "Hugongra/code-challenge-2024-Hugongra",
    "path": ".github/workflows/classroom.yml",
    "url": "https://github.com/Hugongra/code-challenge-2024-Hugongra/blob/493c09fba612c14feb89bfc7e245b81c8be2b541/.github/workflows/classroom.yml",
    "retrieved_at": "2025-09-09T01:40:15.321558Z",
    "question_style": "style_2"
  },
  {
    "question": "Which jobs or steps within this workflow execute concurrently or sequentially based on dependencies?",
    "answer": "name: Autograding Tests\n'on':\n  - push\n  - workflow_dispatch\n  - repository_dispatch\npermissions:\n  checks: write\n  actions: read\n  contents: read\njobs:\n  run-autograding-tests:\n    runs-on: ubuntu-latest\n    if: github.actor != 'github-classroom[bot]'\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      - name: Download mempool\n        uses: GuillaumeFalourd/clone-github-repo-action@v2.3\n        with:\n          owner: 'SummerOfBitcoin'\n          repository: 'code-challenge-2024-mempool'\n      - name: Validate block\n        id: validate-block\n        uses: SummerOfBitcoin/code-challenge-2024-grader@v2.8\n        with:\n          test-name: 'Validate block '\n          command: chmod +x ./run.sh && ./run.sh\n          timeout: 10\n          max-fee: 20616923\n          max-score: 100\n          passing-score: 60\n      - name: Autograding Reporter\n        uses: SummerOfBitcoin/autograding-grading-reporter@v2.2\n        env:\n          VALIDATE-BLOCK_RESULTS: \"${{steps.validate-block.outputs.result}}\"\n        with:\n          runners: validate-block\n",
    "source": "Hugongra/code-challenge-2024-Hugongra",
    "path": ".github/workflows/classroom.yml",
    "url": "https://github.com/Hugongra/code-challenge-2024-Hugongra/blob/493c09fba612c14feb89bfc7e245b81c8be2b541/.github/workflows/classroom.yml",
    "retrieved_at": "2025-09-09T01:40:15.761589Z",
    "question_style": "style_3"
  },
  {
    "question": "How are environment variables used to pass results between autograding steps?",
    "answer": "name: Autograding Tests\n'on':\n  - push\n  - workflow_dispatch\n  - repository_dispatch\npermissions:\n  checks: write\n  actions: read\n  contents: read\njobs:\n  run-autograding-tests:\n    runs-on: ubuntu-latest\n    if: github.actor != 'github-classroom[bot]'\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      - name: Download mempool\n        uses: GuillaumeFalourd/clone-github-repo-action@v2.3\n        with:\n          owner: 'SummerOfBitcoin'\n          repository: 'code-challenge-2024-mempool'\n      - name: Validate block\n        id: validate-block\n        uses: SummerOfBitcoin/code-challenge-2024-grader@v2.8\n        with:\n          test-name: 'Validate block '\n          command: chmod +x ./run.sh && ./run.sh\n          timeout: 10\n          max-fee: 20616923\n          max-score: 100\n          passing-score: 60\n      - name: Autograding Reporter\n        uses: SummerOfBitcoin/autograding-grading-reporter@v2.2\n        env:\n          VALIDATE-BLOCK_RESULTS: \"${{steps.validate-block.outputs.result}}\"\n        with:\n          runners: validate-block\n",
    "source": "Hugongra/code-challenge-2024-Hugongra",
    "path": ".github/workflows/classroom.yml",
    "url": "https://github.com/Hugongra/code-challenge-2024-Hugongra/blob/493c09fba612c14feb89bfc7e245b81c8be2b541/.github/workflows/classroom.yml",
    "retrieved_at": "2025-09-09T01:40:16.528527Z",
    "question_style": "style_4"
  },
  {
    "question": "What is the primary function or effect of this autograding tests workflow?",
    "answer": "name: Autograding Tests\n'on':\n  - push\n  - workflow_dispatch\n  - repository_dispatch\npermissions:\n  checks: write\n  actions: read\n  contents: read\njobs:\n  run-autograding-tests:\n    runs-on: ubuntu-latest\n    if: github.actor != 'github-classroom[bot]'\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      - name: Download mempool\n        uses: GuillaumeFalourd/clone-github-repo-action@v2.3\n        with:\n          owner: 'SummerOfBitcoin'\n          repository: 'code-challenge-2024-mempool'\n      - name: Validate block\n        id: validate-block\n        uses: SummerOfBitcoin/code-challenge-2024-grader@v2.8\n        with:\n          test-name: 'Validate block '\n          command: chmod +x ./run.sh && ./run.sh\n          timeout: 10\n          max-fee: 20616923\n          max-score: 100\n          passing-score: 60\n      - name: Autograding Reporter\n        uses: SummerOfBitcoin/autograding-grading-reporter@v2.2\n        env:\n          VALIDATE-BLOCK_RESULTS: \"${{steps.validate-block.outputs.result}}\"\n        with:\n          runners: validate-block\n",
    "source": "Hugongra/code-challenge-2024-Hugongra",
    "path": ".github/workflows/classroom.yml",
    "url": "https://github.com/Hugongra/code-challenge-2024-Hugongra/blob/493c09fba612c14feb89bfc7e245b81c8be2b541/.github/workflows/classroom.yml",
    "retrieved_at": "2025-09-09T01:40:17.127774Z",
    "question_style": "style_5"
  },
  {
    "question": "Create a GitHub Actions workflow YAML file that replicates the functionality of the provided workflow YAML file.",
    "answer": "name: Add model like runner\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    paths:\n      - \"src/**\"\n      - \"tests/**\"\n      - \".github/**\"\n    types: [opened, synchronize, reopened]\n\njobs:\n  run_tests_templates_like:\n    name: \"Add new model like template tests\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Install dependencies\n        run: |\n          sudo apt -y update && sudo apt install -y libsndfile1-dev\n\n      - name: Load cached virtual environment\n        uses: actions/cache@v2\n        id: cache\n        with:\n          path: ~/venv/\n          key: v4-tests_model_like-${{ hashFiles('setup.py') }}\n\n      - name: Create virtual environment on cache miss\n        if: steps.cache.outputs.cache-hit != 'true'\n        run: |\n          python -m venv ~/venv && . ~/venv/bin/activate\n          pip install --upgrade pip!=21.3\n          pip install -e .[dev]\n\n      - name: Check transformers location\n        # make `transformers` available as package (required since we use `-e` flag) and check it's indeed from the repo.\n        run: |\n          . ~/venv/bin/activate\n          python setup.py develop\n          transformers_install=$(pip list -e | grep transformers)\n          transformers_install_array=($transformers_install)\n          transformers_loc=${transformers_install_array[-1]}\n          transformers_repo_loc=$(pwd .)\n          if [ \"$transformers_loc\" != \"$transformers_repo_loc\" ]; then\n              echo \"transformers is from $transformers_loc but it shoud be from $transformers_repo_loc/src.\"\n              echo \"A fix is required. Stop testing.\"\n              exit 1\n          fi\n\n      - name: Create model files\n        run: |\n          . ~/venv/bin/activate\n          transformers-cli add-new-model-like --config_file tests/fixtures/add_distilbert_like_config.json --path_to_repo .\n          make style\n          make fix-copies\n\n      - name: Run all PyTorch modeling test\n        run: |\n          . ~/venv/bin/activate\n          python -m pytest -n 2 --dist=loadfile -s --make-reports=tests_new_models tests/bert_new/test_modeling_bert_new.py\n\n      - name: Run style changes\n        run: |\n          . ~/venv/bin/activate\n          make style && make quality && make repo-consistency\n\n      - name: Failure short reports\n        if: ${{ always() }}\n        run: cat reports/tests_new_models/failures_short.txt\n\n      - name: Test suite reports artifacts\n        if: ${{ always() }}\n        uses: actions/upload-artifact@v2\n        with:\n          name: run_all_tests_new_models_test_reports\n          path: reports/tests_new_models\n",
    "source": "da03/hierarchical_diffusion_LM",
    "path": ".github/workflows/add-model-like.yml",
    "url": "https://github.com/da03/hierarchical_diffusion_LM/blob/53005cd4b1ca697fd3fece5b4f103af40df9299d/.github/workflows/add-model-like.yml",
    "retrieved_at": "2025-09-10T01:36:43.700037Z",
    "question_style": "style_1"
  },
  {
    "question": "What events on the `main` branch and pull requests targeting specific paths trigger this workflow?",
    "answer": "name: Add model like runner\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    paths:\n      - \"src/**\"\n      - \"tests/**\"\n      - \".github/**\"\n    types: [opened, synchronize, reopened]\n\njobs:\n  run_tests_templates_like:\n    name: \"Add new model like template tests\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Install dependencies\n        run: |\n          sudo apt -y update && sudo apt install -y libsndfile1-dev\n\n      - name: Load cached virtual environment\n        uses: actions/cache@v2\n        id: cache\n        with:\n          path: ~/venv/\n          key: v4-tests_model_like-${{ hashFiles('setup.py') }}\n\n      - name: Create virtual environment on cache miss\n        if: steps.cache.outputs.cache-hit != 'true'\n        run: |\n          python -m venv ~/venv && . ~/venv/bin/activate\n          pip install --upgrade pip!=21.3\n          pip install -e .[dev]\n\n      - name: Check transformers location\n        # make `transformers` available as package (required since we use `-e` flag) and check it's indeed from the repo.\n        run: |\n          . ~/venv/bin/activate\n          python setup.py develop\n          transformers_install=$(pip list -e | grep transformers)\n          transformers_install_array=($transformers_install)\n          transformers_loc=${transformers_install_array[-1]}\n          transformers_repo_loc=$(pwd .)\n          if [ \"$transformers_loc\" != \"$transformers_repo_loc\" ]; then\n              echo \"transformers is from $transformers_loc but it shoud be from $transformers_repo_loc/src.\"\n              echo \"A fix is required. Stop testing.\"\n              exit 1\n          fi\n\n      - name: Create model files\n        run: |\n          . ~/venv/bin/activate\n          transformers-cli add-new-model-like --config_file tests/fixtures/add_distilbert_like_config.json --path_to_repo .\n          make style\n          make fix-copies\n\n      - name: Run all PyTorch modeling test\n        run: |\n          . ~/venv/bin/activate\n          python -m pytest -n 2 --dist=loadfile -s --make-reports=tests_new_models tests/bert_new/test_modeling_bert_new.py\n\n      - name: Run style changes\n        run: |\n          . ~/venv/bin/activate\n          make style && make quality && make repo-consistency\n\n      - name: Failure short reports\n        if: ${{ always() }}\n        run: cat reports/tests_new_models/failures_short.txt\n\n      - name: Test suite reports artifacts\n        if: ${{ always() }}\n        uses: actions/upload-artifact@v2\n        with:\n          name: run_all_tests_new_models_test_reports\n          path: reports/tests_new_models\n",
    "source": "da03/hierarchical_diffusion_LM",
    "path": ".github/workflows/add-model-like.yml",
    "url": "https://github.com/da03/hierarchical_diffusion_LM/blob/53005cd4b1ca697fd3fece5b4f103af40df9299d/.github/workflows/add-model-like.yml",
    "retrieved_at": "2025-09-10T01:36:44.204297Z",
    "question_style": "style_2"
  },
  {
    "question": "Which jobs or steps within this workflow run in parallel, and what dependencies exist between them?",
    "answer": "name: Add model like runner\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    paths:\n      - \"src/**\"\n      - \"tests/**\"\n      - \".github/**\"\n    types: [opened, synchronize, reopened]\n\njobs:\n  run_tests_templates_like:\n    name: \"Add new model like template tests\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Install dependencies\n        run: |\n          sudo apt -y update && sudo apt install -y libsndfile1-dev\n\n      - name: Load cached virtual environment\n        uses: actions/cache@v2\n        id: cache\n        with:\n          path: ~/venv/\n          key: v4-tests_model_like-${{ hashFiles('setup.py') }}\n\n      - name: Create virtual environment on cache miss\n        if: steps.cache.outputs.cache-hit != 'true'\n        run: |\n          python -m venv ~/venv && . ~/venv/bin/activate\n          pip install --upgrade pip!=21.3\n          pip install -e .[dev]\n\n      - name: Check transformers location\n        # make `transformers` available as package (required since we use `-e` flag) and check it's indeed from the repo.\n        run: |\n          . ~/venv/bin/activate\n          python setup.py develop\n          transformers_install=$(pip list -e | grep transformers)\n          transformers_install_array=($transformers_install)\n          transformers_loc=${transformers_install_array[-1]}\n          transformers_repo_loc=$(pwd .)\n          if [ \"$transformers_loc\" != \"$transformers_repo_loc\" ]; then\n              echo \"transformers is from $transformers_loc but it shoud be from $transformers_repo_loc/src.\"\n              echo \"A fix is required. Stop testing.\"\n              exit 1\n          fi\n\n      - name: Create model files\n        run: |\n          . ~/venv/bin/activate\n          transformers-cli add-new-model-like --config_file tests/fixtures/add_distilbert_like_config.json --path_to_repo .\n          make style\n          make fix-copies\n\n      - name: Run all PyTorch modeling test\n        run: |\n          . ~/venv/bin/activate\n          python -m pytest -n 2 --dist=loadfile -s --make-reports=tests_new_models tests/bert_new/test_modeling_bert_new.py\n\n      - name: Run style changes\n        run: |\n          . ~/venv/bin/activate\n          make style && make quality && make repo-consistency\n\n      - name: Failure short reports\n        if: ${{ always() }}\n        run: cat reports/tests_new_models/failures_short.txt\n\n      - name: Test suite reports artifacts\n        if: ${{ always() }}\n        uses: actions/upload-artifact@v2\n        with:\n          name: run_all_tests_new_models_test_reports\n          path: reports/tests_new_models\n",
    "source": "da03/hierarchical_diffusion_LM",
    "path": ".github/workflows/add-model-like.yml",
    "url": "https://github.com/da03/hierarchical_diffusion_LM/blob/53005cd4b1ca697fd3fece5b4f103af40df9299d/.github/workflows/add-model-like.yml",
    "retrieved_at": "2025-09-10T01:36:44.830953Z",
    "question_style": "style_3"
  },
  {
    "question": "How is the virtual environment cached and what key is used to invalidate it?",
    "answer": "name: Add model like runner\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    paths:\n      - \"src/**\"\n      - \"tests/**\"\n      - \".github/**\"\n    types: [opened, synchronize, reopened]\n\njobs:\n  run_tests_templates_like:\n    name: \"Add new model like template tests\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Install dependencies\n        run: |\n          sudo apt -y update && sudo apt install -y libsndfile1-dev\n\n      - name: Load cached virtual environment\n        uses: actions/cache@v2\n        id: cache\n        with:\n          path: ~/venv/\n          key: v4-tests_model_like-${{ hashFiles('setup.py') }}\n\n      - name: Create virtual environment on cache miss\n        if: steps.cache.outputs.cache-hit != 'true'\n        run: |\n          python -m venv ~/venv && . ~/venv/bin/activate\n          pip install --upgrade pip!=21.3\n          pip install -e .[dev]\n\n      - name: Check transformers location\n        # make `transformers` available as package (required since we use `-e` flag) and check it's indeed from the repo.\n        run: |\n          . ~/venv/bin/activate\n          python setup.py develop\n          transformers_install=$(pip list -e | grep transformers)\n          transformers_install_array=($transformers_install)\n          transformers_loc=${transformers_install_array[-1]}\n          transformers_repo_loc=$(pwd .)\n          if [ \"$transformers_loc\" != \"$transformers_repo_loc\" ]; then\n              echo \"transformers is from $transformers_loc but it shoud be from $transformers_repo_loc/src.\"\n              echo \"A fix is required. Stop testing.\"\n              exit 1\n          fi\n\n      - name: Create model files\n        run: |\n          . ~/venv/bin/activate\n          transformers-cli add-new-model-like --config_file tests/fixtures/add_distilbert_like_config.json --path_to_repo .\n          make style\n          make fix-copies\n\n      - name: Run all PyTorch modeling test\n        run: |\n          . ~/venv/bin/activate\n          python -m pytest -n 2 --dist=loadfile -s --make-reports=tests_new_models tests/bert_new/test_modeling_bert_new.py\n\n      - name: Run style changes\n        run: |\n          . ~/venv/bin/activate\n          make style && make quality && make repo-consistency\n\n      - name: Failure short reports\n        if: ${{ always() }}\n        run: cat reports/tests_new_models/failures_short.txt\n\n      - name: Test suite reports artifacts\n        if: ${{ always() }}\n        uses: actions/upload-artifact@v2\n        with:\n          name: run_all_tests_new_models_test_reports\n          path: reports/tests_new_models\n",
    "source": "da03/hierarchical_diffusion_LM",
    "path": ".github/workflows/add-model-like.yml",
    "url": "https://github.com/da03/hierarchical_diffusion_LM/blob/53005cd4b1ca697fd3fece5b4f103af40df9299d/.github/workflows/add-model-like.yml",
    "retrieved_at": "2025-09-10T01:36:45.385604Z",
    "question_style": "style_4"
  },
  {
    "question": "What is the primary purpose or effect of this GitHub Actions workflow?",
    "answer": "name: Add model like runner\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    paths:\n      - \"src/**\"\n      - \"tests/**\"\n      - \".github/**\"\n    types: [opened, synchronize, reopened]\n\njobs:\n  run_tests_templates_like:\n    name: \"Add new model like template tests\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Install dependencies\n        run: |\n          sudo apt -y update && sudo apt install -y libsndfile1-dev\n\n      - name: Load cached virtual environment\n        uses: actions/cache@v2\n        id: cache\n        with:\n          path: ~/venv/\n          key: v4-tests_model_like-${{ hashFiles('setup.py') }}\n\n      - name: Create virtual environment on cache miss\n        if: steps.cache.outputs.cache-hit != 'true'\n        run: |\n          python -m venv ~/venv && . ~/venv/bin/activate\n          pip install --upgrade pip!=21.3\n          pip install -e .[dev]\n\n      - name: Check transformers location\n        # make `transformers` available as package (required since we use `-e` flag) and check it's indeed from the repo.\n        run: |\n          . ~/venv/bin/activate\n          python setup.py develop\n          transformers_install=$(pip list -e | grep transformers)\n          transformers_install_array=($transformers_install)\n          transformers_loc=${transformers_install_array[-1]}\n          transformers_repo_loc=$(pwd .)\n          if [ \"$transformers_loc\" != \"$transformers_repo_loc\" ]; then\n              echo \"transformers is from $transformers_loc but it shoud be from $transformers_repo_loc/src.\"\n              echo \"A fix is required. Stop testing.\"\n              exit 1\n          fi\n\n      - name: Create model files\n        run: |\n          . ~/venv/bin/activate\n          transformers-cli add-new-model-like --config_file tests/fixtures/add_distilbert_like_config.json --path_to_repo .\n          make style\n          make fix-copies\n\n      - name: Run all PyTorch modeling test\n        run: |\n          . ~/venv/bin/activate\n          python -m pytest -n 2 --dist=loadfile -s --make-reports=tests_new_models tests/bert_new/test_modeling_bert_new.py\n\n      - name: Run style changes\n        run: |\n          . ~/venv/bin/activate\n          make style && make quality && make repo-consistency\n\n      - name: Failure short reports\n        if: ${{ always() }}\n        run: cat reports/tests_new_models/failures_short.txt\n\n      - name: Test suite reports artifacts\n        if: ${{ always() }}\n        uses: actions/upload-artifact@v2\n        with:\n          name: run_all_tests_new_models_test_reports\n          path: reports/tests_new_models\n",
    "source": "da03/hierarchical_diffusion_LM",
    "path": ".github/workflows/add-model-like.yml",
    "url": "https://github.com/da03/hierarchical_diffusion_LM/blob/53005cd4b1ca697fd3fece5b4f103af40df9299d/.github/workflows/add-model-like.yml",
    "retrieved_at": "2025-09-10T01:36:45.947137Z",
    "question_style": "style_5"
  },
  {
    "question": "Create a GitHub Actions workflow that replicates the given YAML, checking out code, linting the repository, and saving the repolinter report as an artifact.",
    "answer": "# SPDX-License-Identifier: Apache-2.0\n# Hyperledger Repolinter Action\n\nname: Repolinter\n\non:\n  workflow_dispatch:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    container: ghcr.io/todogroup/repolinter:v0.10.1\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v4\n      - name: Lint Repo\n        continue-on-error: true\n        run: bundle exec /app/bin/repolinter.js --rulesetUrl https://raw.githubusercontent.com/hyperledger-labs/hyperledger-community-management-tools/master/repo_structure/repolint.json --format markdown | tee /repolinter-report.md\n      - name: Save repolinter-report file\n        uses: actions/upload-artifact@v3\n        with:\n          name: repolinter-report\n          path: /repolinter-report.md\n",
    "source": "NJITBlockchainLab/bifold",
    "path": ".github/workflows/repolinter.yml",
    "url": "https://github.com/NJITBlockchainLab/bifold/blob/c8d91286782825cbb4c32f80305b443b37b46168/.github/workflows/repolinter.yml",
    "retrieved_at": "2025-09-10T01:36:46.965726Z",
    "question_style": "style_1"
  },
  {
    "question": "What event triggers the \"Repolinter\" workflow to run?",
    "answer": "# SPDX-License-Identifier: Apache-2.0\n# Hyperledger Repolinter Action\n\nname: Repolinter\n\non:\n  workflow_dispatch:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    container: ghcr.io/todogroup/repolinter:v0.10.1\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v4\n      - name: Lint Repo\n        continue-on-error: true\n        run: bundle exec /app/bin/repolinter.js --rulesetUrl https://raw.githubusercontent.com/hyperledger-labs/hyperledger-community-management-tools/master/repo_structure/repolint.json --format markdown | tee /repolinter-report.md\n      - name: Save repolinter-report file\n        uses: actions/upload-artifact@v3\n        with:\n          name: repolinter-report\n          path: /repolinter-report.md\n",
    "source": "NJITBlockchainLab/bifold",
    "path": ".github/workflows/repolinter.yml",
    "url": "https://github.com/NJITBlockchainLab/bifold/blob/c8d91286782825cbb4c32f80305b443b37b46168/.github/workflows/repolinter.yml",
    "retrieved_at": "2025-09-10T01:36:47.490513Z",
    "question_style": "style_2"
  },
  {
    "question": "Which jobs or steps within the \"Repolinter\" workflow execute concurrently or sequentially, based on dependencies?",
    "answer": "# SPDX-License-Identifier: Apache-2.0\n# Hyperledger Repolinter Action\n\nname: Repolinter\n\non:\n  workflow_dispatch:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    container: ghcr.io/todogroup/repolinter:v0.10.1\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v4\n      - name: Lint Repo\n        continue-on-error: true\n        run: bundle exec /app/bin/repolinter.js --rulesetUrl https://raw.githubusercontent.com/hyperledger-labs/hyperledger-community-management-tools/master/repo_structure/repolint.json --format markdown | tee /repolinter-report.md\n      - name: Save repolinter-report file\n        uses: actions/upload-artifact@v3\n        with:\n          name: repolinter-report\n          path: /repolinter-report.md\n",
    "source": "NJITBlockchainLab/bifold",
    "path": ".github/workflows/repolinter.yml",
    "url": "https://github.com/NJITBlockchainLab/bifold/blob/c8d91286782825cbb4c32f80305b443b37b46168/.github/workflows/repolinter.yml",
    "retrieved_at": "2025-09-10T01:36:48.126477Z",
    "question_style": "style_3"
  },
  {
    "question": "Does this workflow utilize any environment variables or secrets for authentication or configuration within the repolinter container?",
    "answer": "# SPDX-License-Identifier: Apache-2.0\n# Hyperledger Repolinter Action\n\nname: Repolinter\n\non:\n  workflow_dispatch:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    container: ghcr.io/todogroup/repolinter:v0.10.1\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v4\n      - name: Lint Repo\n        continue-on-error: true\n        run: bundle exec /app/bin/repolinter.js --rulesetUrl https://raw.githubusercontent.com/hyperledger-labs/hyperledger-community-management-tools/master/repo_structure/repolint.json --format markdown | tee /repolinter-report.md\n      - name: Save repolinter-report file\n        uses: actions/upload-artifact@v3\n        with:\n          name: repolinter-report\n          path: /repolinter-report.md\n",
    "source": "NJITBlockchainLab/bifold",
    "path": ".github/workflows/repolinter.yml",
    "url": "https://github.com/NJITBlockchainLab/bifold/blob/c8d91286782825cbb4c32f80305b443b37b46168/.github/workflows/repolinter.yml",
    "retrieved_at": "2025-09-10T01:36:48.772199Z",
    "question_style": "style_4"
  },
  {
    "question": "What is the main function of this GitHub Actions workflow?",
    "answer": "# SPDX-License-Identifier: Apache-2.0\n# Hyperledger Repolinter Action\n\nname: Repolinter\n\non:\n  workflow_dispatch:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    container: ghcr.io/todogroup/repolinter:v0.10.1\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v4\n      - name: Lint Repo\n        continue-on-error: true\n        run: bundle exec /app/bin/repolinter.js --rulesetUrl https://raw.githubusercontent.com/hyperledger-labs/hyperledger-community-management-tools/master/repo_structure/repolint.json --format markdown | tee /repolinter-report.md\n      - name: Save repolinter-report file\n        uses: actions/upload-artifact@v3\n        with:\n          name: repolinter-report\n          path: /repolinter-report.md\n",
    "source": "NJITBlockchainLab/bifold",
    "path": ".github/workflows/repolinter.yml",
    "url": "https://github.com/NJITBlockchainLab/bifold/blob/c8d91286782825cbb4c32f80305b443b37b46168/.github/workflows/repolinter.yml",
    "retrieved_at": "2025-09-10T01:36:49.345357Z",
    "question_style": "style_5"
  },
  {
    "question": "Generate a GitHub Actions workflow YAML file that replicates the functionality of the provided workflow YAML, including the matrix strategy and steps.",
    "answer": "name: msvc\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\npermissions:\n  contents: read\n\njobs:\n  msvc:\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-2019, windows-latest]\n        include:\n          - name: msvc-2019-x86\n            os: windows-2019\n            ARCH: x86\n          - name: msvc-2019-amd64\n            os: windows-latest\n            ARCH: amd64\n    name: ${{ matrix.name }}\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4.1.5\n    - name: Setup Ccache\n      uses: hendrikmuhs/ccache-action@c92f40bee50034e84c763e33b317c77adaa81c92 # v1.2.13\n      with:\n        variant: sccache\n        key: ${{ github.job }}-${{ matrix.os }}-${{ matrix.ARCH }}\n    - name: Setup Python\n      uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d # v5.1.0\n      with:\n        python-version: '3.x'\n    - name: Setup MSVC\n      uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756 # v1.13.0\n      with:\n        arch : ${{ matrix.ARCH }}\n    - name: Install Python Dependencies\n      run: |\n        pip3 install -r .ci/requirements.txt --require-hashes\n    - name: Setup Meson\n      run: |\n          sccache --version\n          meson setup build `\n            --wrap-mode=forcefallback `\n            --buildtype=release `\n            -Dglib=enabled `\n            -Dfreetype=enabled `\n            -Dgdi=enabled `\n            -Ddirectwrite=enabled\n    - name: Build\n      run: meson compile -Cbuild\n    - name: Test\n      run: meson test --print-errorlogs --suite=harfbuzz -Cbuild\n",
    "source": "YOU-i-Labs/harfbuzz",
    "path": ".github/workflows/msvc-ci.yml",
    "url": "https://github.com/YOU-i-Labs/harfbuzz/blob/adf995a44927ca4dba3083e6dc766023a6f460d9/.github/workflows/msvc-ci.yml",
    "retrieved_at": "2025-09-11T01:39:07.744083Z",
    "question_style": "style_1"
  },
  {
    "question": "What events involving the `main` branch trigger this GitHub Actions workflow?",
    "answer": "name: msvc\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\npermissions:\n  contents: read\n\njobs:\n  msvc:\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-2019, windows-latest]\n        include:\n          - name: msvc-2019-x86\n            os: windows-2019\n            ARCH: x86\n          - name: msvc-2019-amd64\n            os: windows-latest\n            ARCH: amd64\n    name: ${{ matrix.name }}\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4.1.5\n    - name: Setup Ccache\n      uses: hendrikmuhs/ccache-action@c92f40bee50034e84c763e33b317c77adaa81c92 # v1.2.13\n      with:\n        variant: sccache\n        key: ${{ github.job }}-${{ matrix.os }}-${{ matrix.ARCH }}\n    - name: Setup Python\n      uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d # v5.1.0\n      with:\n        python-version: '3.x'\n    - name: Setup MSVC\n      uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756 # v1.13.0\n      with:\n        arch : ${{ matrix.ARCH }}\n    - name: Install Python Dependencies\n      run: |\n        pip3 install -r .ci/requirements.txt --require-hashes\n    - name: Setup Meson\n      run: |\n          sccache --version\n          meson setup build `\n            --wrap-mode=forcefallback `\n            --buildtype=release `\n            -Dglib=enabled `\n            -Dfreetype=enabled `\n            -Dgdi=enabled `\n            -Ddirectwrite=enabled\n    - name: Build\n      run: meson compile -Cbuild\n    - name: Test\n      run: meson test --print-errorlogs --suite=harfbuzz -Cbuild\n",
    "source": "YOU-i-Labs/harfbuzz",
    "path": ".github/workflows/msvc-ci.yml",
    "url": "https://github.com/YOU-i-Labs/harfbuzz/blob/adf995a44927ca4dba3083e6dc766023a6f460d9/.github/workflows/msvc-ci.yml",
    "retrieved_at": "2025-09-11T01:39:08.157954Z",
    "question_style": "style_2"
  },
  {
    "question": "Which jobs or steps within the workflow are executed concurrently or depend on the successful completion of other jobs or steps?",
    "answer": "name: msvc\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\npermissions:\n  contents: read\n\njobs:\n  msvc:\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-2019, windows-latest]\n        include:\n          - name: msvc-2019-x86\n            os: windows-2019\n            ARCH: x86\n          - name: msvc-2019-amd64\n            os: windows-latest\n            ARCH: amd64\n    name: ${{ matrix.name }}\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4.1.5\n    - name: Setup Ccache\n      uses: hendrikmuhs/ccache-action@c92f40bee50034e84c763e33b317c77adaa81c92 # v1.2.13\n      with:\n        variant: sccache\n        key: ${{ github.job }}-${{ matrix.os }}-${{ matrix.ARCH }}\n    - name: Setup Python\n      uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d # v5.1.0\n      with:\n        python-version: '3.x'\n    - name: Setup MSVC\n      uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756 # v1.13.0\n      with:\n        arch : ${{ matrix.ARCH }}\n    - name: Install Python Dependencies\n      run: |\n        pip3 install -r .ci/requirements.txt --require-hashes\n    - name: Setup Meson\n      run: |\n          sccache --version\n          meson setup build `\n            --wrap-mode=forcefallback `\n            --buildtype=release `\n            -Dglib=enabled `\n            -Dfreetype=enabled `\n            -Dgdi=enabled `\n            -Ddirectwrite=enabled\n    - name: Build\n      run: meson compile -Cbuild\n    - name: Test\n      run: meson test --print-errorlogs --suite=harfbuzz -Cbuild\n",
    "source": "YOU-i-Labs/harfbuzz",
    "path": ".github/workflows/msvc-ci.yml",
    "url": "https://github.com/YOU-i-Labs/harfbuzz/blob/adf995a44927ca4dba3083e6dc766023a6f460d9/.github/workflows/msvc-ci.yml",
    "retrieved_at": "2025-09-11T01:39:08.905314Z",
    "question_style": "style_3"
  },
  {
    "question": "How are environment variables used to configure the Meson build?",
    "answer": "name: msvc\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\npermissions:\n  contents: read\n\njobs:\n  msvc:\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-2019, windows-latest]\n        include:\n          - name: msvc-2019-x86\n            os: windows-2019\n            ARCH: x86\n          - name: msvc-2019-amd64\n            os: windows-latest\n            ARCH: amd64\n    name: ${{ matrix.name }}\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4.1.5\n    - name: Setup Ccache\n      uses: hendrikmuhs/ccache-action@c92f40bee50034e84c763e33b317c77adaa81c92 # v1.2.13\n      with:\n        variant: sccache\n        key: ${{ github.job }}-${{ matrix.os }}-${{ matrix.ARCH }}\n    - name: Setup Python\n      uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d # v5.1.0\n      with:\n        python-version: '3.x'\n    - name: Setup MSVC\n      uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756 # v1.13.0\n      with:\n        arch : ${{ matrix.ARCH }}\n    - name: Install Python Dependencies\n      run: |\n        pip3 install -r .ci/requirements.txt --require-hashes\n    - name: Setup Meson\n      run: |\n          sccache --version\n          meson setup build `\n            --wrap-mode=forcefallback `\n            --buildtype=release `\n            -Dglib=enabled `\n            -Dfreetype=enabled `\n            -Dgdi=enabled `\n            -Ddirectwrite=enabled\n    - name: Build\n      run: meson compile -Cbuild\n    - name: Test\n      run: meson test --print-errorlogs --suite=harfbuzz -Cbuild\n",
    "source": "YOU-i-Labs/harfbuzz",
    "path": ".github/workflows/msvc-ci.yml",
    "url": "https://github.com/YOU-i-Labs/harfbuzz/blob/adf995a44927ca4dba3083e6dc766023a6f460d9/.github/workflows/msvc-ci.yml",
    "retrieved_at": "2025-09-11T01:39:09.343040Z",
    "question_style": "style_4"
  },
  {
    "question": "What does this workflow accomplish by running builds and tests on Windows using MSVC?",
    "answer": "name: msvc\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\npermissions:\n  contents: read\n\njobs:\n  msvc:\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-2019, windows-latest]\n        include:\n          - name: msvc-2019-x86\n            os: windows-2019\n            ARCH: x86\n          - name: msvc-2019-amd64\n            os: windows-latest\n            ARCH: amd64\n    name: ${{ matrix.name }}\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4.1.5\n    - name: Setup Ccache\n      uses: hendrikmuhs/ccache-action@c92f40bee50034e84c763e33b317c77adaa81c92 # v1.2.13\n      with:\n        variant: sccache\n        key: ${{ github.job }}-${{ matrix.os }}-${{ matrix.ARCH }}\n    - name: Setup Python\n      uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d # v5.1.0\n      with:\n        python-version: '3.x'\n    - name: Setup MSVC\n      uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756 # v1.13.0\n      with:\n        arch : ${{ matrix.ARCH }}\n    - name: Install Python Dependencies\n      run: |\n        pip3 install -r .ci/requirements.txt --require-hashes\n    - name: Setup Meson\n      run: |\n          sccache --version\n          meson setup build `\n            --wrap-mode=forcefallback `\n            --buildtype=release `\n            -Dglib=enabled `\n            -Dfreetype=enabled `\n            -Dgdi=enabled `\n            -Ddirectwrite=enabled\n    - name: Build\n      run: meson compile -Cbuild\n    - name: Test\n      run: meson test --print-errorlogs --suite=harfbuzz -Cbuild\n",
    "source": "YOU-i-Labs/harfbuzz",
    "path": ".github/workflows/msvc-ci.yml",
    "url": "https://github.com/YOU-i-Labs/harfbuzz/blob/adf995a44927ca4dba3083e6dc766023a6f460d9/.github/workflows/msvc-ci.yml",
    "retrieved_at": "2025-09-11T01:39:09.896200Z",
    "question_style": "style_5"
  },
  {
    "question": "Generate a GitHub Actions workflow YAML file that replicates the functionality of the provided workflow YAML for Docker CI.",
    "answer": "name: Docker CI\n\non:\n  push:\n    branches: [ master ]\n    paths-ignore:\n      - 'tests/Auto-GPT-test-cassettes'\n      - 'tests/challenges/current_score.json'\n  pull_request:\n    branches: [ master, release-*, stable ]\n\nconcurrency:\n  group: ${{ format('docker-ci-{0}', github.head_ref && format('pr-{0}', github.event.pull_request.number) || github.sha) }}\n  cancel-in-progress: ${{ github.event_name == 'pull_request' }}\n\nenv:\n  IMAGE_NAME: auto-gpt\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        build-type: [release, dev]\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v2\n\n    - if: runner.debug\n      run: |\n        ls -al\n        du -hs *\n\n    - id: build\n      name: Build image\n      uses: docker/build-push-action@v3\n      with:\n        build-args: BUILD_TYPE=${{ matrix.build-type }}\n        tags: ${{ env.IMAGE_NAME }}\n        load: true    # save to docker images\n        # cache layers in GitHub Actions cache to speed up builds\n        cache-from: type=gha,scope=docker-${{ matrix.build-type }}\n        cache-to: type=gha,scope=docker-${{ matrix.build-type }},mode=max\n\n    - name: Generate build report\n      env:\n        event_name: ${{ github.event_name }}\n        event_ref: ${{ github.event.ref }}\n        event_ref_type: ${{ github.event.ref}}\n\n        build_type: ${{ matrix.build-type }}\n\n        prod_branch: stable\n        dev_branch: master\n        repository: ${{ github.repository }}\n        base_branch: ${{ github.ref_name != 'master' && github.ref_name != 'stable' && 'master' || 'stable' }}\n\n        current_ref: ${{ github.ref_name }}\n        commit_hash: ${{ github.event.after }}\n        source_url: ${{ format('{0}/tree/{1}', github.event.repository.url, github.event.release && github.event.release.tag_name || github.sha) }}\n        push_forced_label: ${{ github.event.forced && '☢️ forced' || '' }}\n\n        new_commits_json: ${{ toJSON(github.event.commits) }}\n        compare_url_template: ${{ format('/{0}/compare/{{base}}...{{head}}', github.repository) }}\n\n        github_context_json: ${{ toJSON(github) }}\n        job_env_json: ${{ toJSON(env) }}\n        vars_json: ${{ toJSON(vars) }}\n\n      run: .github/workflows/scripts/docker-ci-summary.sh >> $GITHUB_STEP_SUMMARY\n      continue-on-error: true\n\n  test:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n        with:\n          submodules: true\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - id: build\n        name: Build image\n        uses: docker/build-push-action@v3\n        with:\n          build-args: BUILD_TYPE=dev  # include pytest\n          tags: ${{ env.IMAGE_NAME }}\n          load: true                  # save to docker images\n          # cache layers in GitHub Actions cache to speed up builds\n          cache-from: type=gha,scope=docker-dev\n          cache-to: type=gha,scope=docker-dev,mode=max\n\n      - id: test\n        name: Run tests\n        env:\n          CI: true\n          PLAIN_OUTPUT: True\n          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n        run: |\n          set +e\n          test_output=$(\n            docker run --env CI --env OPENAI_API_KEY --entrypoint python ${{ env.IMAGE_NAME }} -m \\\n            pytest -v --cov=autogpt --cov-branch --cov-report term-missing \\\n              --numprocesses=4 --durations=10 \\\n              tests/unit tests/integration 2>&1\n          )\n          test_failure=$?\n\n          echo \"$test_output\"\n\n          cat << $EOF >> $GITHUB_STEP_SUMMARY\n          # Tests $([ $test_failure = 0 ] && echo '✅' || echo '❌')\n          \\`\\`\\`\n          $test_output\n          \\`\\`\\`\n          $EOF\n\n          exit $test_failure\n",
    "source": "elder-plinius/Synthia",
    "path": ".github/workflows/docker-ci.yml",
    "url": "https://github.com/elder-plinius/Synthia/blob/bfe457a4a4bc97f6293b586d3e53eb95b7433830/.github/workflows/docker-ci.yml",
    "retrieved_at": "2025-09-11T01:39:10.791414Z",
    "question_style": "style_1"
  },
  {
    "question": "What events and branch/path conditions trigger this GitHub Actions workflow?",
    "answer": "name: Docker CI\n\non:\n  push:\n    branches: [ master ]\n    paths-ignore:\n      - 'tests/Auto-GPT-test-cassettes'\n      - 'tests/challenges/current_score.json'\n  pull_request:\n    branches: [ master, release-*, stable ]\n\nconcurrency:\n  group: ${{ format('docker-ci-{0}', github.head_ref && format('pr-{0}', github.event.pull_request.number) || github.sha) }}\n  cancel-in-progress: ${{ github.event_name == 'pull_request' }}\n\nenv:\n  IMAGE_NAME: auto-gpt\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        build-type: [release, dev]\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v2\n\n    - if: runner.debug\n      run: |\n        ls -al\n        du -hs *\n\n    - id: build\n      name: Build image\n      uses: docker/build-push-action@v3\n      with:\n        build-args: BUILD_TYPE=${{ matrix.build-type }}\n        tags: ${{ env.IMAGE_NAME }}\n        load: true    # save to docker images\n        # cache layers in GitHub Actions cache to speed up builds\n        cache-from: type=gha,scope=docker-${{ matrix.build-type }}\n        cache-to: type=gha,scope=docker-${{ matrix.build-type }},mode=max\n\n    - name: Generate build report\n      env:\n        event_name: ${{ github.event_name }}\n        event_ref: ${{ github.event.ref }}\n        event_ref_type: ${{ github.event.ref}}\n\n        build_type: ${{ matrix.build-type }}\n\n        prod_branch: stable\n        dev_branch: master\n        repository: ${{ github.repository }}\n        base_branch: ${{ github.ref_name != 'master' && github.ref_name != 'stable' && 'master' || 'stable' }}\n\n        current_ref: ${{ github.ref_name }}\n        commit_hash: ${{ github.event.after }}\n        source_url: ${{ format('{0}/tree/{1}', github.event.repository.url, github.event.release && github.event.release.tag_name || github.sha) }}\n        push_forced_label: ${{ github.event.forced && '☢️ forced' || '' }}\n\n        new_commits_json: ${{ toJSON(github.event.commits) }}\n        compare_url_template: ${{ format('/{0}/compare/{{base}}...{{head}}', github.repository) }}\n\n        github_context_json: ${{ toJSON(github) }}\n        job_env_json: ${{ toJSON(env) }}\n        vars_json: ${{ toJSON(vars) }}\n\n      run: .github/workflows/scripts/docker-ci-summary.sh >> $GITHUB_STEP_SUMMARY\n      continue-on-error: true\n\n  test:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n        with:\n          submodules: true\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - id: build\n        name: Build image\n        uses: docker/build-push-action@v3\n        with:\n          build-args: BUILD_TYPE=dev  # include pytest\n          tags: ${{ env.IMAGE_NAME }}\n          load: true                  # save to docker images\n          # cache layers in GitHub Actions cache to speed up builds\n          cache-from: type=gha,scope=docker-dev\n          cache-to: type=gha,scope=docker-dev,mode=max\n\n      - id: test\n        name: Run tests\n        env:\n          CI: true\n          PLAIN_OUTPUT: True\n          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n        run: |\n          set +e\n          test_output=$(\n            docker run --env CI --env OPENAI_API_KEY --entrypoint python ${{ env.IMAGE_NAME }} -m \\\n            pytest -v --cov=autogpt --cov-branch --cov-report term-missing \\\n              --numprocesses=4 --durations=10 \\\n              tests/unit tests/integration 2>&1\n          )\n          test_failure=$?\n\n          echo \"$test_output\"\n\n          cat << $EOF >> $GITHUB_STEP_SUMMARY\n          # Tests $([ $test_failure = 0 ] && echo '✅' || echo '❌')\n          \\`\\`\\`\n          $test_output\n          \\`\\`\\`\n          $EOF\n\n          exit $test_failure\n",
    "source": "elder-plinius/Synthia",
    "path": ".github/workflows/docker-ci.yml",
    "url": "https://github.com/elder-plinius/Synthia/blob/bfe457a4a4bc97f6293b586d3e53eb95b7433830/.github/workflows/docker-ci.yml",
    "retrieved_at": "2025-09-11T01:39:11.308987Z",
    "question_style": "style_2"
  },
  {
    "question": "Which jobs or steps within this workflow run in parallel, and what dependencies exist between them?",
    "answer": "name: Docker CI\n\non:\n  push:\n    branches: [ master ]\n    paths-ignore:\n      - 'tests/Auto-GPT-test-cassettes'\n      - 'tests/challenges/current_score.json'\n  pull_request:\n    branches: [ master, release-*, stable ]\n\nconcurrency:\n  group: ${{ format('docker-ci-{0}', github.head_ref && format('pr-{0}', github.event.pull_request.number) || github.sha) }}\n  cancel-in-progress: ${{ github.event_name == 'pull_request' }}\n\nenv:\n  IMAGE_NAME: auto-gpt\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        build-type: [release, dev]\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v2\n\n    - if: runner.debug\n      run: |\n        ls -al\n        du -hs *\n\n    - id: build\n      name: Build image\n      uses: docker/build-push-action@v3\n      with:\n        build-args: BUILD_TYPE=${{ matrix.build-type }}\n        tags: ${{ env.IMAGE_NAME }}\n        load: true    # save to docker images\n        # cache layers in GitHub Actions cache to speed up builds\n        cache-from: type=gha,scope=docker-${{ matrix.build-type }}\n        cache-to: type=gha,scope=docker-${{ matrix.build-type }},mode=max\n\n    - name: Generate build report\n      env:\n        event_name: ${{ github.event_name }}\n        event_ref: ${{ github.event.ref }}\n        event_ref_type: ${{ github.event.ref}}\n\n        build_type: ${{ matrix.build-type }}\n\n        prod_branch: stable\n        dev_branch: master\n        repository: ${{ github.repository }}\n        base_branch: ${{ github.ref_name != 'master' && github.ref_name != 'stable' && 'master' || 'stable' }}\n\n        current_ref: ${{ github.ref_name }}\n        commit_hash: ${{ github.event.after }}\n        source_url: ${{ format('{0}/tree/{1}', github.event.repository.url, github.event.release && github.event.release.tag_name || github.sha) }}\n        push_forced_label: ${{ github.event.forced && '☢️ forced' || '' }}\n\n        new_commits_json: ${{ toJSON(github.event.commits) }}\n        compare_url_template: ${{ format('/{0}/compare/{{base}}...{{head}}', github.repository) }}\n\n        github_context_json: ${{ toJSON(github) }}\n        job_env_json: ${{ toJSON(env) }}\n        vars_json: ${{ toJSON(vars) }}\n\n      run: .github/workflows/scripts/docker-ci-summary.sh >> $GITHUB_STEP_SUMMARY\n      continue-on-error: true\n\n  test:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n        with:\n          submodules: true\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - id: build\n        name: Build image\n        uses: docker/build-push-action@v3\n        with:\n          build-args: BUILD_TYPE=dev  # include pytest\n          tags: ${{ env.IMAGE_NAME }}\n          load: true                  # save to docker images\n          # cache layers in GitHub Actions cache to speed up builds\n          cache-from: type=gha,scope=docker-dev\n          cache-to: type=gha,scope=docker-dev,mode=max\n\n      - id: test\n        name: Run tests\n        env:\n          CI: true\n          PLAIN_OUTPUT: True\n          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n        run: |\n          set +e\n          test_output=$(\n            docker run --env CI --env OPENAI_API_KEY --entrypoint python ${{ env.IMAGE_NAME }} -m \\\n            pytest -v --cov=autogpt --cov-branch --cov-report term-missing \\\n              --numprocesses=4 --durations=10 \\\n              tests/unit tests/integration 2>&1\n          )\n          test_failure=$?\n\n          echo \"$test_output\"\n\n          cat << $EOF >> $GITHUB_STEP_SUMMARY\n          # Tests $([ $test_failure = 0 ] && echo '✅' || echo '❌')\n          \\`\\`\\`\n          $test_output\n          \\`\\`\\`\n          $EOF\n\n          exit $test_failure\n",
    "source": "elder-plinius/Synthia",
    "path": ".github/workflows/docker-ci.yml",
    "url": "https://github.com/elder-plinius/Synthia/blob/bfe457a4a4bc97f6293b586d3e53eb95b7433830/.github/workflows/docker-ci.yml",
    "retrieved_at": "2025-09-11T01:39:11.933524Z",
    "question_style": "style_3"
  },
  {
    "question": "How are the Docker build cache layers being scoped and utilized in the workflow?",
    "answer": "name: Docker CI\n\non:\n  push:\n    branches: [ master ]\n    paths-ignore:\n      - 'tests/Auto-GPT-test-cassettes'\n      - 'tests/challenges/current_score.json'\n  pull_request:\n    branches: [ master, release-*, stable ]\n\nconcurrency:\n  group: ${{ format('docker-ci-{0}', github.head_ref && format('pr-{0}', github.event.pull_request.number) || github.sha) }}\n  cancel-in-progress: ${{ github.event_name == 'pull_request' }}\n\nenv:\n  IMAGE_NAME: auto-gpt\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        build-type: [release, dev]\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v2\n\n    - if: runner.debug\n      run: |\n        ls -al\n        du -hs *\n\n    - id: build\n      name: Build image\n      uses: docker/build-push-action@v3\n      with:\n        build-args: BUILD_TYPE=${{ matrix.build-type }}\n        tags: ${{ env.IMAGE_NAME }}\n        load: true    # save to docker images\n        # cache layers in GitHub Actions cache to speed up builds\n        cache-from: type=gha,scope=docker-${{ matrix.build-type }}\n        cache-to: type=gha,scope=docker-${{ matrix.build-type }},mode=max\n\n    - name: Generate build report\n      env:\n        event_name: ${{ github.event_name }}\n        event_ref: ${{ github.event.ref }}\n        event_ref_type: ${{ github.event.ref}}\n\n        build_type: ${{ matrix.build-type }}\n\n        prod_branch: stable\n        dev_branch: master\n        repository: ${{ github.repository }}\n        base_branch: ${{ github.ref_name != 'master' && github.ref_name != 'stable' && 'master' || 'stable' }}\n\n        current_ref: ${{ github.ref_name }}\n        commit_hash: ${{ github.event.after }}\n        source_url: ${{ format('{0}/tree/{1}', github.event.repository.url, github.event.release && github.event.release.tag_name || github.sha) }}\n        push_forced_label: ${{ github.event.forced && '☢️ forced' || '' }}\n\n        new_commits_json: ${{ toJSON(github.event.commits) }}\n        compare_url_template: ${{ format('/{0}/compare/{{base}}...{{head}}', github.repository) }}\n\n        github_context_json: ${{ toJSON(github) }}\n        job_env_json: ${{ toJSON(env) }}\n        vars_json: ${{ toJSON(vars) }}\n\n      run: .github/workflows/scripts/docker-ci-summary.sh >> $GITHUB_STEP_SUMMARY\n      continue-on-error: true\n\n  test:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n        with:\n          submodules: true\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - id: build\n        name: Build image\n        uses: docker/build-push-action@v3\n        with:\n          build-args: BUILD_TYPE=dev  # include pytest\n          tags: ${{ env.IMAGE_NAME }}\n          load: true                  # save to docker images\n          # cache layers in GitHub Actions cache to speed up builds\n          cache-from: type=gha,scope=docker-dev\n          cache-to: type=gha,scope=docker-dev,mode=max\n\n      - id: test\n        name: Run tests\n        env:\n          CI: true\n          PLAIN_OUTPUT: True\n          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n        run: |\n          set +e\n          test_output=$(\n            docker run --env CI --env OPENAI_API_KEY --entrypoint python ${{ env.IMAGE_NAME }} -m \\\n            pytest -v --cov=autogpt --cov-branch --cov-report term-missing \\\n              --numprocesses=4 --durations=10 \\\n              tests/unit tests/integration 2>&1\n          )\n          test_failure=$?\n\n          echo \"$test_output\"\n\n          cat << $EOF >> $GITHUB_STEP_SUMMARY\n          # Tests $([ $test_failure = 0 ] && echo '✅' || echo '❌')\n          \\`\\`\\`\n          $test_output\n          \\`\\`\\`\n          $EOF\n\n          exit $test_failure\n",
    "source": "elder-plinius/Synthia",
    "path": ".github/workflows/docker-ci.yml",
    "url": "https://github.com/elder-plinius/Synthia/blob/bfe457a4a4bc97f6293b586d3e53eb95b7433830/.github/workflows/docker-ci.yml",
    "retrieved_at": "2025-09-11T01:39:12.427823Z",
    "question_style": "style_4"
  },
  {
    "question": "What is the primary purpose of this GitHub Actions workflow?",
    "answer": "name: Docker CI\n\non:\n  push:\n    branches: [ master ]\n    paths-ignore:\n      - 'tests/Auto-GPT-test-cassettes'\n      - 'tests/challenges/current_score.json'\n  pull_request:\n    branches: [ master, release-*, stable ]\n\nconcurrency:\n  group: ${{ format('docker-ci-{0}', github.head_ref && format('pr-{0}', github.event.pull_request.number) || github.sha) }}\n  cancel-in-progress: ${{ github.event_name == 'pull_request' }}\n\nenv:\n  IMAGE_NAME: auto-gpt\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        build-type: [release, dev]\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v2\n\n    - if: runner.debug\n      run: |\n        ls -al\n        du -hs *\n\n    - id: build\n      name: Build image\n      uses: docker/build-push-action@v3\n      with:\n        build-args: BUILD_TYPE=${{ matrix.build-type }}\n        tags: ${{ env.IMAGE_NAME }}\n        load: true    # save to docker images\n        # cache layers in GitHub Actions cache to speed up builds\n        cache-from: type=gha,scope=docker-${{ matrix.build-type }}\n        cache-to: type=gha,scope=docker-${{ matrix.build-type }},mode=max\n\n    - name: Generate build report\n      env:\n        event_name: ${{ github.event_name }}\n        event_ref: ${{ github.event.ref }}\n        event_ref_type: ${{ github.event.ref}}\n\n        build_type: ${{ matrix.build-type }}\n\n        prod_branch: stable\n        dev_branch: master\n        repository: ${{ github.repository }}\n        base_branch: ${{ github.ref_name != 'master' && github.ref_name != 'stable' && 'master' || 'stable' }}\n\n        current_ref: ${{ github.ref_name }}\n        commit_hash: ${{ github.event.after }}\n        source_url: ${{ format('{0}/tree/{1}', github.event.repository.url, github.event.release && github.event.release.tag_name || github.sha) }}\n        push_forced_label: ${{ github.event.forced && '☢️ forced' || '' }}\n\n        new_commits_json: ${{ toJSON(github.event.commits) }}\n        compare_url_template: ${{ format('/{0}/compare/{{base}}...{{head}}', github.repository) }}\n\n        github_context_json: ${{ toJSON(github) }}\n        job_env_json: ${{ toJSON(env) }}\n        vars_json: ${{ toJSON(vars) }}\n\n      run: .github/workflows/scripts/docker-ci-summary.sh >> $GITHUB_STEP_SUMMARY\n      continue-on-error: true\n\n  test:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n        with:\n          submodules: true\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - id: build\n        name: Build image\n        uses: docker/build-push-action@v3\n        with:\n          build-args: BUILD_TYPE=dev  # include pytest\n          tags: ${{ env.IMAGE_NAME }}\n          load: true                  # save to docker images\n          # cache layers in GitHub Actions cache to speed up builds\n          cache-from: type=gha,scope=docker-dev\n          cache-to: type=gha,scope=docker-dev,mode=max\n\n      - id: test\n        name: Run tests\n        env:\n          CI: true\n          PLAIN_OUTPUT: True\n          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n        run: |\n          set +e\n          test_output=$(\n            docker run --env CI --env OPENAI_API_KEY --entrypoint python ${{ env.IMAGE_NAME }} -m \\\n            pytest -v --cov=autogpt --cov-branch --cov-report term-missing \\\n              --numprocesses=4 --durations=10 \\\n              tests/unit tests/integration 2>&1\n          )\n          test_failure=$?\n\n          echo \"$test_output\"\n\n          cat << $EOF >> $GITHUB_STEP_SUMMARY\n          # Tests $([ $test_failure = 0 ] && echo '✅' || echo '❌')\n          \\`\\`\\`\n          $test_output\n          \\`\\`\\`\n          $EOF\n\n          exit $test_failure\n",
    "source": "elder-plinius/Synthia",
    "path": ".github/workflows/docker-ci.yml",
    "url": "https://github.com/elder-plinius/Synthia/blob/bfe457a4a4bc97f6293b586d3e53eb95b7433830/.github/workflows/docker-ci.yml",
    "retrieved_at": "2025-09-11T01:39:12.920169Z",
    "question_style": "style_5"
  },
  {
    "question": "Create a GitHub Actions workflow YAML file that replicates the functionality of the provided YAML file.",
    "answer": "# ----------------------------------------------------------------------------\n# Copyright 2021 The Netty Project\n#\n# The Netty Project licenses this file to you under the Apache License,\n# version 2.0 (the \"License\"); you may not use this file except in compliance\n# with the License. You may obtain a copy of the License at:\n#\n#   https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n# License for the specific language governing permissions and limitations\n# under the License.\n# ----------------------------------------------------------------------------\nname: PR Reports\non:\n  workflow_run:\n    workflows: [ \"Build PR\" ]\n    types:\n      - completed\nenv:\n  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryhandler.count=5 -Dmaven.wagon.httpconnectionManager.ttlSeconds=240\n\npermissions: read-all\n\njobs:\n  tests:\n    permissions:\n      actions: read  # for dawidd6/action-download-artifact to query and download artifacts\n      checks: write  # for scacap/action-surefire-report to publish result as PR check\n      pull-requests: read  # for dawidd6/action-download-artifact to query commit hash\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        ignore-if-missing: [false]\n        include:\n          - setup: linux-x86_64-java8\n            ignore-if-missing: true\n          - setup: linux-x86_64-java11\n          - setup: linux-x86_64-java11-boringssl\n          - setup: linux-x86_64-java17\n          - setup: linux-x86_64-java18\n          - setup: linux-x86_64-java21\n          - setup: linux-x86_64-java22\n          - setup: windows-x86_64-java11-boringssl\n    continue-on-error: ${{ matrix.ignore-if-missing }}\n    steps:\n      - name: Download Artifacts\n        uses: dawidd6/action-download-artifact@v3.0.0\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          workflow: ${{ github.event.workflow_run.workflow_id }}\n          workflow_conclusion: completed\n          commit: ${{ github.event.workflow_run.head_commit.id }}\n          # File location set in ci-pr.yml and must be coordinated.\n          name: test-results-${{ matrix.setup }}\n      - name: Publish Test Report\n        uses: scacap/action-surefire-report@v1.7.3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          report_paths: '**/target/surefire-reports/TEST-*.xml'\n          commit: ${{ github.event.workflow_run.head_commit.id }}\n          check_name: ${{ matrix.setup }} test reports\n",
    "source": "leviYX/netty-source-code",
    "path": ".github/workflows/ci-pr-reports.yml",
    "url": "https://github.com/leviYX/netty-source-code/blob/2e93efc254676719aaa4002af349ba23f9da7fd0/.github/workflows/ci-pr-reports.yml",
    "retrieved_at": "2025-09-12T01:27:47.886680Z",
    "question_style": "style_1"
  },
  {
    "question": "What event triggers this workflow to run?",
    "answer": "# ----------------------------------------------------------------------------\n# Copyright 2021 The Netty Project\n#\n# The Netty Project licenses this file to you under the Apache License,\n# version 2.0 (the \"License\"); you may not use this file except in compliance\n# with the License. You may obtain a copy of the License at:\n#\n#   https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n# License for the specific language governing permissions and limitations\n# under the License.\n# ----------------------------------------------------------------------------\nname: PR Reports\non:\n  workflow_run:\n    workflows: [ \"Build PR\" ]\n    types:\n      - completed\nenv:\n  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryhandler.count=5 -Dmaven.wagon.httpconnectionManager.ttlSeconds=240\n\npermissions: read-all\n\njobs:\n  tests:\n    permissions:\n      actions: read  # for dawidd6/action-download-artifact to query and download artifacts\n      checks: write  # for scacap/action-surefire-report to publish result as PR check\n      pull-requests: read  # for dawidd6/action-download-artifact to query commit hash\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        ignore-if-missing: [false]\n        include:\n          - setup: linux-x86_64-java8\n            ignore-if-missing: true\n          - setup: linux-x86_64-java11\n          - setup: linux-x86_64-java11-boringssl\n          - setup: linux-x86_64-java17\n          - setup: linux-x86_64-java18\n          - setup: linux-x86_64-java21\n          - setup: linux-x86_64-java22\n          - setup: windows-x86_64-java11-boringssl\n    continue-on-error: ${{ matrix.ignore-if-missing }}\n    steps:\n      - name: Download Artifacts\n        uses: dawidd6/action-download-artifact@v3.0.0\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          workflow: ${{ github.event.workflow_run.workflow_id }}\n          workflow_conclusion: completed\n          commit: ${{ github.event.workflow_run.head_commit.id }}\n          # File location set in ci-pr.yml and must be coordinated.\n          name: test-results-${{ matrix.setup }}\n      - name: Publish Test Report\n        uses: scacap/action-surefire-report@v1.7.3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          report_paths: '**/target/surefire-reports/TEST-*.xml'\n          commit: ${{ github.event.workflow_run.head_commit.id }}\n          check_name: ${{ matrix.setup }} test reports\n",
    "source": "leviYX/netty-source-code",
    "path": ".github/workflows/ci-pr-reports.yml",
    "url": "https://github.com/leviYX/netty-source-code/blob/2e93efc254676719aaa4002af349ba23f9da7fd0/.github/workflows/ci-pr-reports.yml",
    "retrieved_at": "2025-09-12T01:27:48.405808Z",
    "question_style": "style_2"
  },
  {
    "question": "Which jobs or steps within the 'PR Reports' workflow run in parallel or have dependencies on each other?",
    "answer": "# ----------------------------------------------------------------------------\n# Copyright 2021 The Netty Project\n#\n# The Netty Project licenses this file to you under the Apache License,\n# version 2.0 (the \"License\"); you may not use this file except in compliance\n# with the License. You may obtain a copy of the License at:\n#\n#   https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n# License for the specific language governing permissions and limitations\n# under the License.\n# ----------------------------------------------------------------------------\nname: PR Reports\non:\n  workflow_run:\n    workflows: [ \"Build PR\" ]\n    types:\n      - completed\nenv:\n  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryhandler.count=5 -Dmaven.wagon.httpconnectionManager.ttlSeconds=240\n\npermissions: read-all\n\njobs:\n  tests:\n    permissions:\n      actions: read  # for dawidd6/action-download-artifact to query and download artifacts\n      checks: write  # for scacap/action-surefire-report to publish result as PR check\n      pull-requests: read  # for dawidd6/action-download-artifact to query commit hash\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        ignore-if-missing: [false]\n        include:\n          - setup: linux-x86_64-java8\n            ignore-if-missing: true\n          - setup: linux-x86_64-java11\n          - setup: linux-x86_64-java11-boringssl\n          - setup: linux-x86_64-java17\n          - setup: linux-x86_64-java18\n          - setup: linux-x86_64-java21\n          - setup: linux-x86_64-java22\n          - setup: windows-x86_64-java11-boringssl\n    continue-on-error: ${{ matrix.ignore-if-missing }}\n    steps:\n      - name: Download Artifacts\n        uses: dawidd6/action-download-artifact@v3.0.0\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          workflow: ${{ github.event.workflow_run.workflow_id }}\n          workflow_conclusion: completed\n          commit: ${{ github.event.workflow_run.head_commit.id }}\n          # File location set in ci-pr.yml and must be coordinated.\n          name: test-results-${{ matrix.setup }}\n      - name: Publish Test Report\n        uses: scacap/action-surefire-report@v1.7.3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          report_paths: '**/target/surefire-reports/TEST-*.xml'\n          commit: ${{ github.event.workflow_run.head_commit.id }}\n          check_name: ${{ matrix.setup }} test reports\n",
    "source": "leviYX/netty-source-code",
    "path": ".github/workflows/ci-pr-reports.yml",
    "url": "https://github.com/leviYX/netty-source-code/blob/2e93efc254676719aaa4002af349ba23f9da7fd0/.github/workflows/ci-pr-reports.yml",
    "retrieved_at": "2025-09-12T01:27:48.974546Z",
    "question_style": "style_3"
  },
  {
    "question": "How are the downloaded artifacts named and used in the subsequent \"Publish Test Report\" step?",
    "answer": "# ----------------------------------------------------------------------------\n# Copyright 2021 The Netty Project\n#\n# The Netty Project licenses this file to you under the Apache License,\n# version 2.0 (the \"License\"); you may not use this file except in compliance\n# with the License. You may obtain a copy of the License at:\n#\n#   https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n# License for the specific language governing permissions and limitations\n# under the License.\n# ----------------------------------------------------------------------------\nname: PR Reports\non:\n  workflow_run:\n    workflows: [ \"Build PR\" ]\n    types:\n      - completed\nenv:\n  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryhandler.count=5 -Dmaven.wagon.httpconnectionManager.ttlSeconds=240\n\npermissions: read-all\n\njobs:\n  tests:\n    permissions:\n      actions: read  # for dawidd6/action-download-artifact to query and download artifacts\n      checks: write  # for scacap/action-surefire-report to publish result as PR check\n      pull-requests: read  # for dawidd6/action-download-artifact to query commit hash\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        ignore-if-missing: [false]\n        include:\n          - setup: linux-x86_64-java8\n            ignore-if-missing: true\n          - setup: linux-x86_64-java11\n          - setup: linux-x86_64-java11-boringssl\n          - setup: linux-x86_64-java17\n          - setup: linux-x86_64-java18\n          - setup: linux-x86_64-java21\n          - setup: linux-x86_64-java22\n          - setup: windows-x86_64-java11-boringssl\n    continue-on-error: ${{ matrix.ignore-if-missing }}\n    steps:\n      - name: Download Artifacts\n        uses: dawidd6/action-download-artifact@v3.0.0\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          workflow: ${{ github.event.workflow_run.workflow_id }}\n          workflow_conclusion: completed\n          commit: ${{ github.event.workflow_run.head_commit.id }}\n          # File location set in ci-pr.yml and must be coordinated.\n          name: test-results-${{ matrix.setup }}\n      - name: Publish Test Report\n        uses: scacap/action-surefire-report@v1.7.3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          report_paths: '**/target/surefire-reports/TEST-*.xml'\n          commit: ${{ github.event.workflow_run.head_commit.id }}\n          check_name: ${{ matrix.setup }} test reports\n",
    "source": "leviYX/netty-source-code",
    "path": ".github/workflows/ci-pr-reports.yml",
    "url": "https://github.com/leviYX/netty-source-code/blob/2e93efc254676719aaa4002af349ba23f9da7fd0/.github/workflows/ci-pr-reports.yml",
    "retrieved_at": "2025-09-12T01:27:49.537729Z",
    "question_style": "style_4"
  },
  {
    "question": "What is the primary function of the \"PR Reports\" workflow?",
    "answer": "# ----------------------------------------------------------------------------\n# Copyright 2021 The Netty Project\n#\n# The Netty Project licenses this file to you under the Apache License,\n# version 2.0 (the \"License\"); you may not use this file except in compliance\n# with the License. You may obtain a copy of the License at:\n#\n#   https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n# License for the specific language governing permissions and limitations\n# under the License.\n# ----------------------------------------------------------------------------\nname: PR Reports\non:\n  workflow_run:\n    workflows: [ \"Build PR\" ]\n    types:\n      - completed\nenv:\n  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryhandler.count=5 -Dmaven.wagon.httpconnectionManager.ttlSeconds=240\n\npermissions: read-all\n\njobs:\n  tests:\n    permissions:\n      actions: read  # for dawidd6/action-download-artifact to query and download artifacts\n      checks: write  # for scacap/action-surefire-report to publish result as PR check\n      pull-requests: read  # for dawidd6/action-download-artifact to query commit hash\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        ignore-if-missing: [false]\n        include:\n          - setup: linux-x86_64-java8\n            ignore-if-missing: true\n          - setup: linux-x86_64-java11\n          - setup: linux-x86_64-java11-boringssl\n          - setup: linux-x86_64-java17\n          - setup: linux-x86_64-java18\n          - setup: linux-x86_64-java21\n          - setup: linux-x86_64-java22\n          - setup: windows-x86_64-java11-boringssl\n    continue-on-error: ${{ matrix.ignore-if-missing }}\n    steps:\n      - name: Download Artifacts\n        uses: dawidd6/action-download-artifact@v3.0.0\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          workflow: ${{ github.event.workflow_run.workflow_id }}\n          workflow_conclusion: completed\n          commit: ${{ github.event.workflow_run.head_commit.id }}\n          # File location set in ci-pr.yml and must be coordinated.\n          name: test-results-${{ matrix.setup }}\n      - name: Publish Test Report\n        uses: scacap/action-surefire-report@v1.7.3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          report_paths: '**/target/surefire-reports/TEST-*.xml'\n          commit: ${{ github.event.workflow_run.head_commit.id }}\n          check_name: ${{ matrix.setup }} test reports\n",
    "source": "leviYX/netty-source-code",
    "path": ".github/workflows/ci-pr-reports.yml",
    "url": "https://github.com/leviYX/netty-source-code/blob/2e93efc254676719aaa4002af349ba23f9da7fd0/.github/workflows/ci-pr-reports.yml",
    "retrieved_at": "2025-09-12T01:27:50.042603Z",
    "question_style": "style_5"
  },
  {
    "question": "Create a GitHub Actions workflow YAML file that replicates the functionality of the given YAML file.",
    "answer": "name: Refresh Citation Style Language Files\n\non:\n  schedule:\n    # run on 1st and 15th of each month\n    - cron: '1 2 1,15 * *'\n  workflow_dispatch:\n\njobs:\n  publish:\n    name: Refresh Citation Style Language Files\n    runs-on: ubuntu-latest\n    if: github.repository == 'JabRef/jabref'\n    steps:\n      - name: Checkout source\n        uses: actions/checkout@v2\n        with:\n          ref: main\n          fetch-depth: 0\n      - name: Initialize git\n        run: |\n          git checkout main\n          git config --local core.editor /usr/bin/cat\n          git config user.name \"github actions\"\n          git config user.email \"jabrefmail+webfeedback@gmail.com\"\n      - name: Add csl-styles remote\n        run: git remote add -f csl-styles https://github.com/citation-style-language/styles.git\n      - name: Update csl-styles\n        run: |\n          git subtree pull --prefix buildres/csl/csl-styles csl-styles master --squash || true\n          cp buildres/csl/csl-styles/acm-siggraph.csl src/main/resources/csl-styles/\n          cp buildres/csl/csl-styles/ieee.csl src/main/resources/csl-styles/\n          cp buildres/csl/csl-styles/turabian-author-date.csl src/main/resources/csl-styles/\n          git add .\n          git commit -m\"Refresh example styles\" || true\n      - name: Add csl-locales remote\n        run: git remote add -f csl-locales https://github.com/citation-style-language/locales.git\n      - name: Update csl-locales\n        run: |\n          git subtree pull --prefix buildres/csl/csl-locales csl-locales master --squash || true\n          cp buildres/csl/csl-locales/locales.json src/main/resources/csl-locales/\n          cp buildres/csl/csl-locales/locales-en-US.xml src/main/resources/csl-locales/\n          git add .\n          git commit -m\"Refresh example styles\" || true\n      - uses: peter-evans/create-pull-request@v3\n        with:\n          token: ${{ secrets.GH_TOKEN_UPDATE_GRADLE_WRAPPER }}\n          branch: refresh-csl\n          commit-message: Update CSL styles\n          title: \"[Bot] Update CSL styles\"\n          labels: dependencies\n",
    "source": "tjfernandes/SE2122_57464_58763_57677_58125_63764",
    "path": ".github/workflows/refresh-csl-subtrees.yml",
    "url": "https://github.com/tjfernandes/SE2122_57464_58763_57677_58125_63764/blob/545d42658484a4315751ecac830c3da4f194fc25/.github/workflows/refresh-csl-subtrees.yml",
    "retrieved_at": "2025-09-12T01:27:50.750108Z",
    "question_style": "style_1"
  },
  {
    "question": "What events or schedules trigger the \"Refresh Citation Style Language Files\" workflow?",
    "answer": "name: Refresh Citation Style Language Files\n\non:\n  schedule:\n    # run on 1st and 15th of each month\n    - cron: '1 2 1,15 * *'\n  workflow_dispatch:\n\njobs:\n  publish:\n    name: Refresh Citation Style Language Files\n    runs-on: ubuntu-latest\n    if: github.repository == 'JabRef/jabref'\n    steps:\n      - name: Checkout source\n        uses: actions/checkout@v2\n        with:\n          ref: main\n          fetch-depth: 0\n      - name: Initialize git\n        run: |\n          git checkout main\n          git config --local core.editor /usr/bin/cat\n          git config user.name \"github actions\"\n          git config user.email \"jabrefmail+webfeedback@gmail.com\"\n      - name: Add csl-styles remote\n        run: git remote add -f csl-styles https://github.com/citation-style-language/styles.git\n      - name: Update csl-styles\n        run: |\n          git subtree pull --prefix buildres/csl/csl-styles csl-styles master --squash || true\n          cp buildres/csl/csl-styles/acm-siggraph.csl src/main/resources/csl-styles/\n          cp buildres/csl/csl-styles/ieee.csl src/main/resources/csl-styles/\n          cp buildres/csl/csl-styles/turabian-author-date.csl src/main/resources/csl-styles/\n          git add .\n          git commit -m\"Refresh example styles\" || true\n      - name: Add csl-locales remote\n        run: git remote add -f csl-locales https://github.com/citation-style-language/locales.git\n      - name: Update csl-locales\n        run: |\n          git subtree pull --prefix buildres/csl/csl-locales csl-locales master --squash || true\n          cp buildres/csl/csl-locales/locales.json src/main/resources/csl-locales/\n          cp buildres/csl/csl-locales/locales-en-US.xml src/main/resources/csl-locales/\n          git add .\n          git commit -m\"Refresh example styles\" || true\n      - uses: peter-evans/create-pull-request@v3\n        with:\n          token: ${{ secrets.GH_TOKEN_UPDATE_GRADLE_WRAPPER }}\n          branch: refresh-csl\n          commit-message: Update CSL styles\n          title: \"[Bot] Update CSL styles\"\n          labels: dependencies\n",
    "source": "tjfernandes/SE2122_57464_58763_57677_58125_63764",
    "path": ".github/workflows/refresh-csl-subtrees.yml",
    "url": "https://github.com/tjfernandes/SE2122_57464_58763_57677_58125_63764/blob/545d42658484a4315751ecac830c3da4f194fc25/.github/workflows/refresh-csl-subtrees.yml",
    "retrieved_at": "2025-09-12T01:27:51.293624Z",
    "question_style": "style_2"
  },
  {
    "question": "Which jobs or steps within this workflow run in parallel, and which ones depend on the successful completion of others?",
    "answer": "name: Refresh Citation Style Language Files\n\non:\n  schedule:\n    # run on 1st and 15th of each month\n    - cron: '1 2 1,15 * *'\n  workflow_dispatch:\n\njobs:\n  publish:\n    name: Refresh Citation Style Language Files\n    runs-on: ubuntu-latest\n    if: github.repository == 'JabRef/jabref'\n    steps:\n      - name: Checkout source\n        uses: actions/checkout@v2\n        with:\n          ref: main\n          fetch-depth: 0\n      - name: Initialize git\n        run: |\n          git checkout main\n          git config --local core.editor /usr/bin/cat\n          git config user.name \"github actions\"\n          git config user.email \"jabrefmail+webfeedback@gmail.com\"\n      - name: Add csl-styles remote\n        run: git remote add -f csl-styles https://github.com/citation-style-language/styles.git\n      - name: Update csl-styles\n        run: |\n          git subtree pull --prefix buildres/csl/csl-styles csl-styles master --squash || true\n          cp buildres/csl/csl-styles/acm-siggraph.csl src/main/resources/csl-styles/\n          cp buildres/csl/csl-styles/ieee.csl src/main/resources/csl-styles/\n          cp buildres/csl/csl-styles/turabian-author-date.csl src/main/resources/csl-styles/\n          git add .\n          git commit -m\"Refresh example styles\" || true\n      - name: Add csl-locales remote\n        run: git remote add -f csl-locales https://github.com/citation-style-language/locales.git\n      - name: Update csl-locales\n        run: |\n          git subtree pull --prefix buildres/csl/csl-locales csl-locales master --squash || true\n          cp buildres/csl/csl-locales/locales.json src/main/resources/csl-locales/\n          cp buildres/csl/csl-locales/locales-en-US.xml src/main/resources/csl-locales/\n          git add .\n          git commit -m\"Refresh example styles\" || true\n      - uses: peter-evans/create-pull-request@v3\n        with:\n          token: ${{ secrets.GH_TOKEN_UPDATE_GRADLE_WRAPPER }}\n          branch: refresh-csl\n          commit-message: Update CSL styles\n          title: \"[Bot] Update CSL styles\"\n          labels: dependencies\n",
    "source": "tjfernandes/SE2122_57464_58763_57677_58125_63764",
    "path": ".github/workflows/refresh-csl-subtrees.yml",
    "url": "https://github.com/tjfernandes/SE2122_57464_58763_57677_58125_63764/blob/545d42658484a4315751ecac830c3da4f194fc25/.github/workflows/refresh-csl-subtrees.yml",
    "retrieved_at": "2025-09-12T01:27:51.727033Z",
    "question_style": "style_3"
  },
  {
    "question": "How is the `GH_TOKEN_UPDATE_GRADLE_WRAPPER` secret used for creating a pull request?",
    "answer": "name: Refresh Citation Style Language Files\n\non:\n  schedule:\n    # run on 1st and 15th of each month\n    - cron: '1 2 1,15 * *'\n  workflow_dispatch:\n\njobs:\n  publish:\n    name: Refresh Citation Style Language Files\n    runs-on: ubuntu-latest\n    if: github.repository == 'JabRef/jabref'\n    steps:\n      - name: Checkout source\n        uses: actions/checkout@v2\n        with:\n          ref: main\n          fetch-depth: 0\n      - name: Initialize git\n        run: |\n          git checkout main\n          git config --local core.editor /usr/bin/cat\n          git config user.name \"github actions\"\n          git config user.email \"jabrefmail+webfeedback@gmail.com\"\n      - name: Add csl-styles remote\n        run: git remote add -f csl-styles https://github.com/citation-style-language/styles.git\n      - name: Update csl-styles\n        run: |\n          git subtree pull --prefix buildres/csl/csl-styles csl-styles master --squash || true\n          cp buildres/csl/csl-styles/acm-siggraph.csl src/main/resources/csl-styles/\n          cp buildres/csl/csl-styles/ieee.csl src/main/resources/csl-styles/\n          cp buildres/csl/csl-styles/turabian-author-date.csl src/main/resources/csl-styles/\n          git add .\n          git commit -m\"Refresh example styles\" || true\n      - name: Add csl-locales remote\n        run: git remote add -f csl-locales https://github.com/citation-style-language/locales.git\n      - name: Update csl-locales\n        run: |\n          git subtree pull --prefix buildres/csl/csl-locales csl-locales master --squash || true\n          cp buildres/csl/csl-locales/locales.json src/main/resources/csl-locales/\n          cp buildres/csl/csl-locales/locales-en-US.xml src/main/resources/csl-locales/\n          git add .\n          git commit -m\"Refresh example styles\" || true\n      - uses: peter-evans/create-pull-request@v3\n        with:\n          token: ${{ secrets.GH_TOKEN_UPDATE_GRADLE_WRAPPER }}\n          branch: refresh-csl\n          commit-message: Update CSL styles\n          title: \"[Bot] Update CSL styles\"\n          labels: dependencies\n",
    "source": "tjfernandes/SE2122_57464_58763_57677_58125_63764",
    "path": ".github/workflows/refresh-csl-subtrees.yml",
    "url": "https://github.com/tjfernandes/SE2122_57464_58763_57677_58125_63764/blob/545d42658484a4315751ecac830c3da4f194fc25/.github/workflows/refresh-csl-subtrees.yml",
    "retrieved_at": "2025-09-12T01:27:52.295196Z",
    "question_style": "style_4"
  },
  {
    "question": "What is the primary purpose of this workflow for Citation Style Language files?",
    "answer": "name: Refresh Citation Style Language Files\n\non:\n  schedule:\n    # run on 1st and 15th of each month\n    - cron: '1 2 1,15 * *'\n  workflow_dispatch:\n\njobs:\n  publish:\n    name: Refresh Citation Style Language Files\n    runs-on: ubuntu-latest\n    if: github.repository == 'JabRef/jabref'\n    steps:\n      - name: Checkout source\n        uses: actions/checkout@v2\n        with:\n          ref: main\n          fetch-depth: 0\n      - name: Initialize git\n        run: |\n          git checkout main\n          git config --local core.editor /usr/bin/cat\n          git config user.name \"github actions\"\n          git config user.email \"jabrefmail+webfeedback@gmail.com\"\n      - name: Add csl-styles remote\n        run: git remote add -f csl-styles https://github.com/citation-style-language/styles.git\n      - name: Update csl-styles\n        run: |\n          git subtree pull --prefix buildres/csl/csl-styles csl-styles master --squash || true\n          cp buildres/csl/csl-styles/acm-siggraph.csl src/main/resources/csl-styles/\n          cp buildres/csl/csl-styles/ieee.csl src/main/resources/csl-styles/\n          cp buildres/csl/csl-styles/turabian-author-date.csl src/main/resources/csl-styles/\n          git add .\n          git commit -m\"Refresh example styles\" || true\n      - name: Add csl-locales remote\n        run: git remote add -f csl-locales https://github.com/citation-style-language/locales.git\n      - name: Update csl-locales\n        run: |\n          git subtree pull --prefix buildres/csl/csl-locales csl-locales master --squash || true\n          cp buildres/csl/csl-locales/locales.json src/main/resources/csl-locales/\n          cp buildres/csl/csl-locales/locales-en-US.xml src/main/resources/csl-locales/\n          git add .\n          git commit -m\"Refresh example styles\" || true\n      - uses: peter-evans/create-pull-request@v3\n        with:\n          token: ${{ secrets.GH_TOKEN_UPDATE_GRADLE_WRAPPER }}\n          branch: refresh-csl\n          commit-message: Update CSL styles\n          title: \"[Bot] Update CSL styles\"\n          labels: dependencies\n",
    "source": "tjfernandes/SE2122_57464_58763_57677_58125_63764",
    "path": ".github/workflows/refresh-csl-subtrees.yml",
    "url": "https://github.com/tjfernandes/SE2122_57464_58763_57677_58125_63764/blob/545d42658484a4315751ecac830c3da4f194fc25/.github/workflows/refresh-csl-subtrees.yml",
    "retrieved_at": "2025-09-12T01:27:52.728036Z",
    "question_style": "style_5"
  },
  {
    "question": "Create a GitHub Actions workflow that replicates the functionality of the provided YAML workflow for building and releasing a Linux application.",
    "answer": "name: Linux Release\n\non:\n  push:\n    branches:\n      - 'master'\n      - 'Stable*'\n    tags:\n      - 'v*'\n  pull_request:\n    branches:\n    - '*'\n\ndefaults:\n  run:\n    shell: bash\n\nenv:\n  SOURCE_DIR:   ${{ github.workspace }}\n  QT_VERSION:   5.15.2\n  ARTIFACT:     QGroundControl.AppImage\n  BUILD_TYPE:   ${{ fromJSON('[\"DailyBuild\", \"StableBuild\"]')[ github.ref_type == 'tag' || contains(github.ref, 'Stable_' ) ] }}\n\njobs:\n  build:\n    runs-on:  ubuntu-20.04\n\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v2\n        with:\n          submodules: recursive\n\n      - name: Get all tags for correct version determination\n        working-directory:  ${{ github.workspace }}\n        run: |\n          git fetch --all --tags -f\n\n      - name: Install Qt\n        uses: jurplel/install-qt-action@v2\n        with:\n          version:      ${{ env.QT_VERSION }}\n          host:         linux\n          target:       desktop\n          dir:          ${{ runner.temp }}\n          modules:      qtcharts\n          setup-python: true\n\n      - name: Install QGC source dependencies\n        run:  sudo apt-get install -y libsdl2-dev\n\n      - name: Install Gstreamer\n        run:  sudo apt-get install -y libgstreamer-plugins-base1.0-dev libgstreamer1.0-0:amd64 libgstreamer1.0-dev\n\n      - name: Install ccache\n        run:  sudo apt-get install ccache\n\n      - name: Install post-link dependencies\n        run:  sudo apt-get install -y binutils patchelf\n\n      - name: Prepare ccache timestamp\n        id: ccache_cache_timestamp\n        shell: cmake -P {0}\n        run: |\n          string(TIMESTAMP current_date \"%Y-%m-%d-%H;%M;%S\" UTC)\n          message(\"::set-output name=timestamp::${current_date}\")\n\n      - name: ccache cache files\n        uses: actions/cache@v2\n        with:\n          path:         ~/.ccache\n          key:          ${{ runner.os }}-ccache-${{steps.ccache_cache_timestamp.outputs.timestamp}}\n          restore-keys: ${{ runner.os }}-ccache-\n\n      - name: Setup ccache\n        run: |\n            mkdir -p ~/.ccache\n            echo \"base_dir = ${GITHUB_WORKSPACE}\" > ~/.ccache/ccache.conf\n            echo \"compression = true\" >> ~/.ccache/ccache.conf\n            echo \"compression_level = 5\" >> ~/.ccache/ccache.conf\n            ccache -s\n            ccache -z\n\n      - name: Create build directory\n        run:  mkdir ${{ runner.temp }}/shadow_build_dir\n\n      - name: Build\n        working-directory: ${{ runner.temp }}/shadow_build_dir\n        run:  |\n              qmake -r ${SOURCE_DIR}/qgroundcontrol.pro CONFIG+=installer CONFIG+=${BUILD_TYPE}\n              make -j2\n\n      - name: ccache post-run\n        run:  ccache -s\n\n      - name: Create AppImage\n        working-directory:  ${{ runner.temp }}/shadow_build_dir\n        run:                ${SOURCE_DIR}/deploy/create_linux_appimage.sh ${SOURCE_DIR} ./staging ./package;\n\n      - name: Save artifact\n        uses: actions/upload-artifact@master\n        with:\n          name: ${{ env.ARTIFACT }}\n          path: ${{ runner.temp }}/shadow_build_dir/package/${{ env.ARTIFACT }}\n\n      # This will set GIT_BRANCH_NAME environment variable\n      - name: Git branch name\n        id:   git-branch-name\n        uses: EthanSK/git-branch-name-action@v1\n\n      - name: Upload build to S3 Bucket\n        if:                 github.event_name == 'push'\n        working-directory:  ${{ runner.temp }}/shadow_build_dir/package\n        run: |\n              aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}\n              aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n              aws s3 cp ${ARTIFACT} s3://qgroundcontrol/builds/${GIT_BRANCH_NAME}/${ARTIFACT} --region us-west-2 --acl public-read\n\n      - name: Upload tagged stable build to S3 latest Bucket\n        if:                 github.event_name == 'push' && github.ref_type == 'tag'\n        working-directory:  ${{ runner.temp }}/shadow_build_dir/package\n        run: |\n              aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}\n              aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n              aws s3 cp ${ARTIFACT} s3://qgroundcontrol/latest/${ARTIFACT} --region us-west-2 --acl public-read\n",
    "source": "DiegoJRAleixandre/RemoteID-for-QgroundControl",
    "path": ".github/workflows/linux_release.yml",
    "url": "https://github.com/DiegoJRAleixandre/RemoteID-for-QgroundControl/blob/36c8c702551389cfee92cb9062f3b1dc2628024e/.github/workflows/linux_release.yml",
    "retrieved_at": "2025-09-13T01:23:58.757204Z",
    "question_style": "style_1"
  },
  {
    "question": "What events and branch/tag patterns trigger this GitHub Actions workflow?",
    "answer": "name: Linux Release\n\non:\n  push:\n    branches:\n      - 'master'\n      - 'Stable*'\n    tags:\n      - 'v*'\n  pull_request:\n    branches:\n    - '*'\n\ndefaults:\n  run:\n    shell: bash\n\nenv:\n  SOURCE_DIR:   ${{ github.workspace }}\n  QT_VERSION:   5.15.2\n  ARTIFACT:     QGroundControl.AppImage\n  BUILD_TYPE:   ${{ fromJSON('[\"DailyBuild\", \"StableBuild\"]')[ github.ref_type == 'tag' || contains(github.ref, 'Stable_' ) ] }}\n\njobs:\n  build:\n    runs-on:  ubuntu-20.04\n\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v2\n        with:\n          submodules: recursive\n\n      - name: Get all tags for correct version determination\n        working-directory:  ${{ github.workspace }}\n        run: |\n          git fetch --all --tags -f\n\n      - name: Install Qt\n        uses: jurplel/install-qt-action@v2\n        with:\n          version:      ${{ env.QT_VERSION }}\n          host:         linux\n          target:       desktop\n          dir:          ${{ runner.temp }}\n          modules:      qtcharts\n          setup-python: true\n\n      - name: Install QGC source dependencies\n        run:  sudo apt-get install -y libsdl2-dev\n\n      - name: Install Gstreamer\n        run:  sudo apt-get install -y libgstreamer-plugins-base1.0-dev libgstreamer1.0-0:amd64 libgstreamer1.0-dev\n\n      - name: Install ccache\n        run:  sudo apt-get install ccache\n\n      - name: Install post-link dependencies\n        run:  sudo apt-get install -y binutils patchelf\n\n      - name: Prepare ccache timestamp\n        id: ccache_cache_timestamp\n        shell: cmake -P {0}\n        run: |\n          string(TIMESTAMP current_date \"%Y-%m-%d-%H;%M;%S\" UTC)\n          message(\"::set-output name=timestamp::${current_date}\")\n\n      - name: ccache cache files\n        uses: actions/cache@v2\n        with:\n          path:         ~/.ccache\n          key:          ${{ runner.os }}-ccache-${{steps.ccache_cache_timestamp.outputs.timestamp}}\n          restore-keys: ${{ runner.os }}-ccache-\n\n      - name: Setup ccache\n        run: |\n            mkdir -p ~/.ccache\n            echo \"base_dir = ${GITHUB_WORKSPACE}\" > ~/.ccache/ccache.conf\n            echo \"compression = true\" >> ~/.ccache/ccache.conf\n            echo \"compression_level = 5\" >> ~/.ccache/ccache.conf\n            ccache -s\n            ccache -z\n\n      - name: Create build directory\n        run:  mkdir ${{ runner.temp }}/shadow_build_dir\n\n      - name: Build\n        working-directory: ${{ runner.temp }}/shadow_build_dir\n        run:  |\n              qmake -r ${SOURCE_DIR}/qgroundcontrol.pro CONFIG+=installer CONFIG+=${BUILD_TYPE}\n              make -j2\n\n      - name: ccache post-run\n        run:  ccache -s\n\n      - name: Create AppImage\n        working-directory:  ${{ runner.temp }}/shadow_build_dir\n        run:                ${SOURCE_DIR}/deploy/create_linux_appimage.sh ${SOURCE_DIR} ./staging ./package;\n\n      - name: Save artifact\n        uses: actions/upload-artifact@master\n        with:\n          name: ${{ env.ARTIFACT }}\n          path: ${{ runner.temp }}/shadow_build_dir/package/${{ env.ARTIFACT }}\n\n      # This will set GIT_BRANCH_NAME environment variable\n      - name: Git branch name\n        id:   git-branch-name\n        uses: EthanSK/git-branch-name-action@v1\n\n      - name: Upload build to S3 Bucket\n        if:                 github.event_name == 'push'\n        working-directory:  ${{ runner.temp }}/shadow_build_dir/package\n        run: |\n              aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}\n              aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n              aws s3 cp ${ARTIFACT} s3://qgroundcontrol/builds/${GIT_BRANCH_NAME}/${ARTIFACT} --region us-west-2 --acl public-read\n\n      - name: Upload tagged stable build to S3 latest Bucket\n        if:                 github.event_name == 'push' && github.ref_type == 'tag'\n        working-directory:  ${{ runner.temp }}/shadow_build_dir/package\n        run: |\n              aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}\n              aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n              aws s3 cp ${ARTIFACT} s3://qgroundcontrol/latest/${ARTIFACT} --region us-west-2 --acl public-read\n",
    "source": "DiegoJRAleixandre/RemoteID-for-QgroundControl",
    "path": ".github/workflows/linux_release.yml",
    "url": "https://github.com/DiegoJRAleixandre/RemoteID-for-QgroundControl/blob/36c8c702551389cfee92cb9062f3b1dc2628024e/.github/workflows/linux_release.yml",
    "retrieved_at": "2025-09-13T01:23:59.288759Z",
    "question_style": "style_2"
  },
  {
    "question": "Which jobs or steps within the workflow run in parallel, and which depend on the successful completion of others?",
    "answer": "name: Linux Release\n\non:\n  push:\n    branches:\n      - 'master'\n      - 'Stable*'\n    tags:\n      - 'v*'\n  pull_request:\n    branches:\n    - '*'\n\ndefaults:\n  run:\n    shell: bash\n\nenv:\n  SOURCE_DIR:   ${{ github.workspace }}\n  QT_VERSION:   5.15.2\n  ARTIFACT:     QGroundControl.AppImage\n  BUILD_TYPE:   ${{ fromJSON('[\"DailyBuild\", \"StableBuild\"]')[ github.ref_type == 'tag' || contains(github.ref, 'Stable_' ) ] }}\n\njobs:\n  build:\n    runs-on:  ubuntu-20.04\n\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v2\n        with:\n          submodules: recursive\n\n      - name: Get all tags for correct version determination\n        working-directory:  ${{ github.workspace }}\n        run: |\n          git fetch --all --tags -f\n\n      - name: Install Qt\n        uses: jurplel/install-qt-action@v2\n        with:\n          version:      ${{ env.QT_VERSION }}\n          host:         linux\n          target:       desktop\n          dir:          ${{ runner.temp }}\n          modules:      qtcharts\n          setup-python: true\n\n      - name: Install QGC source dependencies\n        run:  sudo apt-get install -y libsdl2-dev\n\n      - name: Install Gstreamer\n        run:  sudo apt-get install -y libgstreamer-plugins-base1.0-dev libgstreamer1.0-0:amd64 libgstreamer1.0-dev\n\n      - name: Install ccache\n        run:  sudo apt-get install ccache\n\n      - name: Install post-link dependencies\n        run:  sudo apt-get install -y binutils patchelf\n\n      - name: Prepare ccache timestamp\n        id: ccache_cache_timestamp\n        shell: cmake -P {0}\n        run: |\n          string(TIMESTAMP current_date \"%Y-%m-%d-%H;%M;%S\" UTC)\n          message(\"::set-output name=timestamp::${current_date}\")\n\n      - name: ccache cache files\n        uses: actions/cache@v2\n        with:\n          path:         ~/.ccache\n          key:          ${{ runner.os }}-ccache-${{steps.ccache_cache_timestamp.outputs.timestamp}}\n          restore-keys: ${{ runner.os }}-ccache-\n\n      - name: Setup ccache\n        run: |\n            mkdir -p ~/.ccache\n            echo \"base_dir = ${GITHUB_WORKSPACE}\" > ~/.ccache/ccache.conf\n            echo \"compression = true\" >> ~/.ccache/ccache.conf\n            echo \"compression_level = 5\" >> ~/.ccache/ccache.conf\n            ccache -s\n            ccache -z\n\n      - name: Create build directory\n        run:  mkdir ${{ runner.temp }}/shadow_build_dir\n\n      - name: Build\n        working-directory: ${{ runner.temp }}/shadow_build_dir\n        run:  |\n              qmake -r ${SOURCE_DIR}/qgroundcontrol.pro CONFIG+=installer CONFIG+=${BUILD_TYPE}\n              make -j2\n\n      - name: ccache post-run\n        run:  ccache -s\n\n      - name: Create AppImage\n        working-directory:  ${{ runner.temp }}/shadow_build_dir\n        run:                ${SOURCE_DIR}/deploy/create_linux_appimage.sh ${SOURCE_DIR} ./staging ./package;\n\n      - name: Save artifact\n        uses: actions/upload-artifact@master\n        with:\n          name: ${{ env.ARTIFACT }}\n          path: ${{ runner.temp }}/shadow_build_dir/package/${{ env.ARTIFACT }}\n\n      # This will set GIT_BRANCH_NAME environment variable\n      - name: Git branch name\n        id:   git-branch-name\n        uses: EthanSK/git-branch-name-action@v1\n\n      - name: Upload build to S3 Bucket\n        if:                 github.event_name == 'push'\n        working-directory:  ${{ runner.temp }}/shadow_build_dir/package\n        run: |\n              aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}\n              aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n              aws s3 cp ${ARTIFACT} s3://qgroundcontrol/builds/${GIT_BRANCH_NAME}/${ARTIFACT} --region us-west-2 --acl public-read\n\n      - name: Upload tagged stable build to S3 latest Bucket\n        if:                 github.event_name == 'push' && github.ref_type == 'tag'\n        working-directory:  ${{ runner.temp }}/shadow_build_dir/package\n        run: |\n              aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}\n              aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n              aws s3 cp ${ARTIFACT} s3://qgroundcontrol/latest/${ARTIFACT} --region us-west-2 --acl public-read\n",
    "source": "DiegoJRAleixandre/RemoteID-for-QgroundControl",
    "path": ".github/workflows/linux_release.yml",
    "url": "https://github.com/DiegoJRAleixandre/RemoteID-for-QgroundControl/blob/36c8c702551389cfee92cb9062f3b1dc2628024e/.github/workflows/linux_release.yml",
    "retrieved_at": "2025-09-13T01:24:00.068947Z",
    "question_style": "style_3"
  },
  {
    "question": "How are AWS credentials securely passed and used to upload build artifacts to S3 buckets?",
    "answer": "name: Linux Release\n\non:\n  push:\n    branches:\n      - 'master'\n      - 'Stable*'\n    tags:\n      - 'v*'\n  pull_request:\n    branches:\n    - '*'\n\ndefaults:\n  run:\n    shell: bash\n\nenv:\n  SOURCE_DIR:   ${{ github.workspace }}\n  QT_VERSION:   5.15.2\n  ARTIFACT:     QGroundControl.AppImage\n  BUILD_TYPE:   ${{ fromJSON('[\"DailyBuild\", \"StableBuild\"]')[ github.ref_type == 'tag' || contains(github.ref, 'Stable_' ) ] }}\n\njobs:\n  build:\n    runs-on:  ubuntu-20.04\n\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v2\n        with:\n          submodules: recursive\n\n      - name: Get all tags for correct version determination\n        working-directory:  ${{ github.workspace }}\n        run: |\n          git fetch --all --tags -f\n\n      - name: Install Qt\n        uses: jurplel/install-qt-action@v2\n        with:\n          version:      ${{ env.QT_VERSION }}\n          host:         linux\n          target:       desktop\n          dir:          ${{ runner.temp }}\n          modules:      qtcharts\n          setup-python: true\n\n      - name: Install QGC source dependencies\n        run:  sudo apt-get install -y libsdl2-dev\n\n      - name: Install Gstreamer\n        run:  sudo apt-get install -y libgstreamer-plugins-base1.0-dev libgstreamer1.0-0:amd64 libgstreamer1.0-dev\n\n      - name: Install ccache\n        run:  sudo apt-get install ccache\n\n      - name: Install post-link dependencies\n        run:  sudo apt-get install -y binutils patchelf\n\n      - name: Prepare ccache timestamp\n        id: ccache_cache_timestamp\n        shell: cmake -P {0}\n        run: |\n          string(TIMESTAMP current_date \"%Y-%m-%d-%H;%M;%S\" UTC)\n          message(\"::set-output name=timestamp::${current_date}\")\n\n      - name: ccache cache files\n        uses: actions/cache@v2\n        with:\n          path:         ~/.ccache\n          key:          ${{ runner.os }}-ccache-${{steps.ccache_cache_timestamp.outputs.timestamp}}\n          restore-keys: ${{ runner.os }}-ccache-\n\n      - name: Setup ccache\n        run: |\n            mkdir -p ~/.ccache\n            echo \"base_dir = ${GITHUB_WORKSPACE}\" > ~/.ccache/ccache.conf\n            echo \"compression = true\" >> ~/.ccache/ccache.conf\n            echo \"compression_level = 5\" >> ~/.ccache/ccache.conf\n            ccache -s\n            ccache -z\n\n      - name: Create build directory\n        run:  mkdir ${{ runner.temp }}/shadow_build_dir\n\n      - name: Build\n        working-directory: ${{ runner.temp }}/shadow_build_dir\n        run:  |\n              qmake -r ${SOURCE_DIR}/qgroundcontrol.pro CONFIG+=installer CONFIG+=${BUILD_TYPE}\n              make -j2\n\n      - name: ccache post-run\n        run:  ccache -s\n\n      - name: Create AppImage\n        working-directory:  ${{ runner.temp }}/shadow_build_dir\n        run:                ${SOURCE_DIR}/deploy/create_linux_appimage.sh ${SOURCE_DIR} ./staging ./package;\n\n      - name: Save artifact\n        uses: actions/upload-artifact@master\n        with:\n          name: ${{ env.ARTIFACT }}\n          path: ${{ runner.temp }}/shadow_build_dir/package/${{ env.ARTIFACT }}\n\n      # This will set GIT_BRANCH_NAME environment variable\n      - name: Git branch name\n        id:   git-branch-name\n        uses: EthanSK/git-branch-name-action@v1\n\n      - name: Upload build to S3 Bucket\n        if:                 github.event_name == 'push'\n        working-directory:  ${{ runner.temp }}/shadow_build_dir/package\n        run: |\n              aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}\n              aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n              aws s3 cp ${ARTIFACT} s3://qgroundcontrol/builds/${GIT_BRANCH_NAME}/${ARTIFACT} --region us-west-2 --acl public-read\n\n      - name: Upload tagged stable build to S3 latest Bucket\n        if:                 github.event_name == 'push' && github.ref_type == 'tag'\n        working-directory:  ${{ runner.temp }}/shadow_build_dir/package\n        run: |\n              aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}\n              aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n              aws s3 cp ${ARTIFACT} s3://qgroundcontrol/latest/${ARTIFACT} --region us-west-2 --acl public-read\n",
    "source": "DiegoJRAleixandre/RemoteID-for-QgroundControl",
    "path": ".github/workflows/linux_release.yml",
    "url": "https://github.com/DiegoJRAleixandre/RemoteID-for-QgroundControl/blob/36c8c702551389cfee92cb9062f3b1dc2628024e/.github/workflows/linux_release.yml",
    "retrieved_at": "2025-09-13T01:24:00.920743Z",
    "question_style": "style_4"
  },
  {
    "question": "What is the main purpose of this workflow, particularly the resulting artifact?",
    "answer": "name: Linux Release\n\non:\n  push:\n    branches:\n      - 'master'\n      - 'Stable*'\n    tags:\n      - 'v*'\n  pull_request:\n    branches:\n    - '*'\n\ndefaults:\n  run:\n    shell: bash\n\nenv:\n  SOURCE_DIR:   ${{ github.workspace }}\n  QT_VERSION:   5.15.2\n  ARTIFACT:     QGroundControl.AppImage\n  BUILD_TYPE:   ${{ fromJSON('[\"DailyBuild\", \"StableBuild\"]')[ github.ref_type == 'tag' || contains(github.ref, 'Stable_' ) ] }}\n\njobs:\n  build:\n    runs-on:  ubuntu-20.04\n\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v2\n        with:\n          submodules: recursive\n\n      - name: Get all tags for correct version determination\n        working-directory:  ${{ github.workspace }}\n        run: |\n          git fetch --all --tags -f\n\n      - name: Install Qt\n        uses: jurplel/install-qt-action@v2\n        with:\n          version:      ${{ env.QT_VERSION }}\n          host:         linux\n          target:       desktop\n          dir:          ${{ runner.temp }}\n          modules:      qtcharts\n          setup-python: true\n\n      - name: Install QGC source dependencies\n        run:  sudo apt-get install -y libsdl2-dev\n\n      - name: Install Gstreamer\n        run:  sudo apt-get install -y libgstreamer-plugins-base1.0-dev libgstreamer1.0-0:amd64 libgstreamer1.0-dev\n\n      - name: Install ccache\n        run:  sudo apt-get install ccache\n\n      - name: Install post-link dependencies\n        run:  sudo apt-get install -y binutils patchelf\n\n      - name: Prepare ccache timestamp\n        id: ccache_cache_timestamp\n        shell: cmake -P {0}\n        run: |\n          string(TIMESTAMP current_date \"%Y-%m-%d-%H;%M;%S\" UTC)\n          message(\"::set-output name=timestamp::${current_date}\")\n\n      - name: ccache cache files\n        uses: actions/cache@v2\n        with:\n          path:         ~/.ccache\n          key:          ${{ runner.os }}-ccache-${{steps.ccache_cache_timestamp.outputs.timestamp}}\n          restore-keys: ${{ runner.os }}-ccache-\n\n      - name: Setup ccache\n        run: |\n            mkdir -p ~/.ccache\n            echo \"base_dir = ${GITHUB_WORKSPACE}\" > ~/.ccache/ccache.conf\n            echo \"compression = true\" >> ~/.ccache/ccache.conf\n            echo \"compression_level = 5\" >> ~/.ccache/ccache.conf\n            ccache -s\n            ccache -z\n\n      - name: Create build directory\n        run:  mkdir ${{ runner.temp }}/shadow_build_dir\n\n      - name: Build\n        working-directory: ${{ runner.temp }}/shadow_build_dir\n        run:  |\n              qmake -r ${SOURCE_DIR}/qgroundcontrol.pro CONFIG+=installer CONFIG+=${BUILD_TYPE}\n              make -j2\n\n      - name: ccache post-run\n        run:  ccache -s\n\n      - name: Create AppImage\n        working-directory:  ${{ runner.temp }}/shadow_build_dir\n        run:                ${SOURCE_DIR}/deploy/create_linux_appimage.sh ${SOURCE_DIR} ./staging ./package;\n\n      - name: Save artifact\n        uses: actions/upload-artifact@master\n        with:\n          name: ${{ env.ARTIFACT }}\n          path: ${{ runner.temp }}/shadow_build_dir/package/${{ env.ARTIFACT }}\n\n      # This will set GIT_BRANCH_NAME environment variable\n      - name: Git branch name\n        id:   git-branch-name\n        uses: EthanSK/git-branch-name-action@v1\n\n      - name: Upload build to S3 Bucket\n        if:                 github.event_name == 'push'\n        working-directory:  ${{ runner.temp }}/shadow_build_dir/package\n        run: |\n              aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}\n              aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n              aws s3 cp ${ARTIFACT} s3://qgroundcontrol/builds/${GIT_BRANCH_NAME}/${ARTIFACT} --region us-west-2 --acl public-read\n\n      - name: Upload tagged stable build to S3 latest Bucket\n        if:                 github.event_name == 'push' && github.ref_type == 'tag'\n        working-directory:  ${{ runner.temp }}/shadow_build_dir/package\n        run: |\n              aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}\n              aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n              aws s3 cp ${ARTIFACT} s3://qgroundcontrol/latest/${ARTIFACT} --region us-west-2 --acl public-read\n",
    "source": "DiegoJRAleixandre/RemoteID-for-QgroundControl",
    "path": ".github/workflows/linux_release.yml",
    "url": "https://github.com/DiegoJRAleixandre/RemoteID-for-QgroundControl/blob/36c8c702551389cfee92cb9062f3b1dc2628024e/.github/workflows/linux_release.yml",
    "retrieved_at": "2025-09-13T01:24:01.410011Z",
    "question_style": "style_5"
  },
  {
    "question": "Generate a GitHub Actions workflow YAML file that replicates the functionality of the provided workflow file.",
    "answer": "\n# This is a basic workflow to help you get started with Actions\n\nname: Build\n\n# Controls when the action will run. \non:\n  # Triggers the workflow on push or pull request events but only for the master branch\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"build\"\n\n  buildAndroid:\n    name: buildAndroid\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@main\n\n      - name: Setup Android NDK\n        uses: nttld/setup-ndk@main\n        id: setup-ndk\n        with:\n          ndk-version: r15c\n\n      - name: Setup Java JDK\n        uses: actions/setup-java@main\n        with:\n          distribution: 'zulu'\n          java-version: 11\n\n      - name: Setup Android SDK\n        uses: android-actions/setup-android@main\n\n      - name: Setup Haxe\n        uses: krdlab/setup-haxe@v1.2.0\n        with:\n          haxe-version: 4.2.0\n\n      - name: Install Haxelib\n        run: |\n          haxelib setup ~/haxelib\n          haxelib install hxcpp 4.2.1 > /dev/null\n          haxelib install lime 7.9.0\n          haxelib install openfl 9.1.0\n          haxelib --never install flixel 4.11.0\n          haxelib run lime setup flixel\n          haxelib install flixel-tools\n          haxelib install flixel-ui\n          haxelib install flixel-addons 2.11.0\n          haxelib install tjson\n          haxelib install hxjsonast\n          haxelib install hscript\n          haxelib git hxCodec https://github.com/SPLCoding/hxCodec-but-it-works-xd.git\n          haxelib git linc_luajit https://github.com/Sirox228/linc_luajit\n          haxelib git extension-androidtools https://github.com/MaysLastPlay77/extension-androidtools\n          haxelib install hxcpp-debug-server\n          haxelib list\n      - name: Create Version Tag\n        run: echo \"${{github.run_id}}\" > VERSION\n\n      - name: Setup Lime\n        run: |\n          haxelib run lime setup -alias -y\n          haxelib run lime config ANDROID_SDK $ANDROID_HOME\n          haxelib run lime config ANDROID_NDK_ROOT $ANDROID_NDK_HOME\n          haxelib run lime config JAVA_HOME $JAVA_HOME\n          haxelib run lime config ANDROID_SETUP true\n          haxelib set lime 7.9.0\n          haxelib set openfl 9.1.0\n          haxelib set flixel 4.11.0\n          haxelib set flixel-addons 2.11.0\n          haxelib set hxcpp 4.2.1\n        env:\n          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}\n\n      - name: Compile\n        run: haxelib run lime build android -D NO_PRECOMPILED_HEADERS --app-version=\"4.0.0-${{ github.run_id}}\"\n\n      - name: Publish Artifact\n        uses: actions/upload-artifact@main\n        with:\n          name: buildAndroid\n          path: export/release/android/bin/app/build/outputs/apk/debug\n",
    "source": "NighCyan/FNF-TG-Engine",
    "path": ".github/workflows/main.yml",
    "url": "https://github.com/NighCyan/FNF-TG-Engine/blob/84be9d5daa633cad25344c76d2fc40117cb63b5b/.github/workflows/main.yml",
    "retrieved_at": "2025-09-13T01:24:02.000327Z",
    "question_style": "style_1"
  },
  {
    "question": "What events trigger this workflow to run?",
    "answer": "\n# This is a basic workflow to help you get started with Actions\n\nname: Build\n\n# Controls when the action will run. \non:\n  # Triggers the workflow on push or pull request events but only for the master branch\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"build\"\n\n  buildAndroid:\n    name: buildAndroid\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@main\n\n      - name: Setup Android NDK\n        uses: nttld/setup-ndk@main\n        id: setup-ndk\n        with:\n          ndk-version: r15c\n\n      - name: Setup Java JDK\n        uses: actions/setup-java@main\n        with:\n          distribution: 'zulu'\n          java-version: 11\n\n      - name: Setup Android SDK\n        uses: android-actions/setup-android@main\n\n      - name: Setup Haxe\n        uses: krdlab/setup-haxe@v1.2.0\n        with:\n          haxe-version: 4.2.0\n\n      - name: Install Haxelib\n        run: |\n          haxelib setup ~/haxelib\n          haxelib install hxcpp 4.2.1 > /dev/null\n          haxelib install lime 7.9.0\n          haxelib install openfl 9.1.0\n          haxelib --never install flixel 4.11.0\n          haxelib run lime setup flixel\n          haxelib install flixel-tools\n          haxelib install flixel-ui\n          haxelib install flixel-addons 2.11.0\n          haxelib install tjson\n          haxelib install hxjsonast\n          haxelib install hscript\n          haxelib git hxCodec https://github.com/SPLCoding/hxCodec-but-it-works-xd.git\n          haxelib git linc_luajit https://github.com/Sirox228/linc_luajit\n          haxelib git extension-androidtools https://github.com/MaysLastPlay77/extension-androidtools\n          haxelib install hxcpp-debug-server\n          haxelib list\n      - name: Create Version Tag\n        run: echo \"${{github.run_id}}\" > VERSION\n\n      - name: Setup Lime\n        run: |\n          haxelib run lime setup -alias -y\n          haxelib run lime config ANDROID_SDK $ANDROID_HOME\n          haxelib run lime config ANDROID_NDK_ROOT $ANDROID_NDK_HOME\n          haxelib run lime config JAVA_HOME $JAVA_HOME\n          haxelib run lime config ANDROID_SETUP true\n          haxelib set lime 7.9.0\n          haxelib set openfl 9.1.0\n          haxelib set flixel 4.11.0\n          haxelib set flixel-addons 2.11.0\n          haxelib set hxcpp 4.2.1\n        env:\n          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}\n\n      - name: Compile\n        run: haxelib run lime build android -D NO_PRECOMPILED_HEADERS --app-version=\"4.0.0-${{ github.run_id}}\"\n\n      - name: Publish Artifact\n        uses: actions/upload-artifact@main\n        with:\n          name: buildAndroid\n          path: export/release/android/bin/app/build/outputs/apk/debug\n",
    "source": "NighCyan/FNF-TG-Engine",
    "path": ".github/workflows/main.yml",
    "url": "https://github.com/NighCyan/FNF-TG-Engine/blob/84be9d5daa633cad25344c76d2fc40117cb63b5b/.github/workflows/main.yml",
    "retrieved_at": "2025-09-13T01:24:02.553000Z",
    "question_style": "style_2"
  },
  {
    "question": "Which jobs or steps in this workflow run in parallel, and which have dependencies on others?",
    "answer": "\n# This is a basic workflow to help you get started with Actions\n\nname: Build\n\n# Controls when the action will run. \non:\n  # Triggers the workflow on push or pull request events but only for the master branch\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"build\"\n\n  buildAndroid:\n    name: buildAndroid\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@main\n\n      - name: Setup Android NDK\n        uses: nttld/setup-ndk@main\n        id: setup-ndk\n        with:\n          ndk-version: r15c\n\n      - name: Setup Java JDK\n        uses: actions/setup-java@main\n        with:\n          distribution: 'zulu'\n          java-version: 11\n\n      - name: Setup Android SDK\n        uses: android-actions/setup-android@main\n\n      - name: Setup Haxe\n        uses: krdlab/setup-haxe@v1.2.0\n        with:\n          haxe-version: 4.2.0\n\n      - name: Install Haxelib\n        run: |\n          haxelib setup ~/haxelib\n          haxelib install hxcpp 4.2.1 > /dev/null\n          haxelib install lime 7.9.0\n          haxelib install openfl 9.1.0\n          haxelib --never install flixel 4.11.0\n          haxelib run lime setup flixel\n          haxelib install flixel-tools\n          haxelib install flixel-ui\n          haxelib install flixel-addons 2.11.0\n          haxelib install tjson\n          haxelib install hxjsonast\n          haxelib install hscript\n          haxelib git hxCodec https://github.com/SPLCoding/hxCodec-but-it-works-xd.git\n          haxelib git linc_luajit https://github.com/Sirox228/linc_luajit\n          haxelib git extension-androidtools https://github.com/MaysLastPlay77/extension-androidtools\n          haxelib install hxcpp-debug-server\n          haxelib list\n      - name: Create Version Tag\n        run: echo \"${{github.run_id}}\" > VERSION\n\n      - name: Setup Lime\n        run: |\n          haxelib run lime setup -alias -y\n          haxelib run lime config ANDROID_SDK $ANDROID_HOME\n          haxelib run lime config ANDROID_NDK_ROOT $ANDROID_NDK_HOME\n          haxelib run lime config JAVA_HOME $JAVA_HOME\n          haxelib run lime config ANDROID_SETUP true\n          haxelib set lime 7.9.0\n          haxelib set openfl 9.1.0\n          haxelib set flixel 4.11.0\n          haxelib set flixel-addons 2.11.0\n          haxelib set hxcpp 4.2.1\n        env:\n          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}\n\n      - name: Compile\n        run: haxelib run lime build android -D NO_PRECOMPILED_HEADERS --app-version=\"4.0.0-${{ github.run_id}}\"\n\n      - name: Publish Artifact\n        uses: actions/upload-artifact@main\n        with:\n          name: buildAndroid\n          path: export/release/android/bin/app/build/outputs/apk/debug\n",
    "source": "NighCyan/FNF-TG-Engine",
    "path": ".github/workflows/main.yml",
    "url": "https://github.com/NighCyan/FNF-TG-Engine/blob/84be9d5daa633cad25344c76d2fc40117cb63b5b/.github/workflows/main.yml",
    "retrieved_at": "2025-09-13T01:24:03.137403Z",
    "question_style": "style_3"
  },
  {
    "question": "How are environment variables used to configure the Android build environment within the workflow?",
    "answer": "\n# This is a basic workflow to help you get started with Actions\n\nname: Build\n\n# Controls when the action will run. \non:\n  # Triggers the workflow on push or pull request events but only for the master branch\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"build\"\n\n  buildAndroid:\n    name: buildAndroid\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@main\n\n      - name: Setup Android NDK\n        uses: nttld/setup-ndk@main\n        id: setup-ndk\n        with:\n          ndk-version: r15c\n\n      - name: Setup Java JDK\n        uses: actions/setup-java@main\n        with:\n          distribution: 'zulu'\n          java-version: 11\n\n      - name: Setup Android SDK\n        uses: android-actions/setup-android@main\n\n      - name: Setup Haxe\n        uses: krdlab/setup-haxe@v1.2.0\n        with:\n          haxe-version: 4.2.0\n\n      - name: Install Haxelib\n        run: |\n          haxelib setup ~/haxelib\n          haxelib install hxcpp 4.2.1 > /dev/null\n          haxelib install lime 7.9.0\n          haxelib install openfl 9.1.0\n          haxelib --never install flixel 4.11.0\n          haxelib run lime setup flixel\n          haxelib install flixel-tools\n          haxelib install flixel-ui\n          haxelib install flixel-addons 2.11.0\n          haxelib install tjson\n          haxelib install hxjsonast\n          haxelib install hscript\n          haxelib git hxCodec https://github.com/SPLCoding/hxCodec-but-it-works-xd.git\n          haxelib git linc_luajit https://github.com/Sirox228/linc_luajit\n          haxelib git extension-androidtools https://github.com/MaysLastPlay77/extension-androidtools\n          haxelib install hxcpp-debug-server\n          haxelib list\n      - name: Create Version Tag\n        run: echo \"${{github.run_id}}\" > VERSION\n\n      - name: Setup Lime\n        run: |\n          haxelib run lime setup -alias -y\n          haxelib run lime config ANDROID_SDK $ANDROID_HOME\n          haxelib run lime config ANDROID_NDK_ROOT $ANDROID_NDK_HOME\n          haxelib run lime config JAVA_HOME $JAVA_HOME\n          haxelib run lime config ANDROID_SETUP true\n          haxelib set lime 7.9.0\n          haxelib set openfl 9.1.0\n          haxelib set flixel 4.11.0\n          haxelib set flixel-addons 2.11.0\n          haxelib set hxcpp 4.2.1\n        env:\n          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}\n\n      - name: Compile\n        run: haxelib run lime build android -D NO_PRECOMPILED_HEADERS --app-version=\"4.0.0-${{ github.run_id}}\"\n\n      - name: Publish Artifact\n        uses: actions/upload-artifact@main\n        with:\n          name: buildAndroid\n          path: export/release/android/bin/app/build/outputs/apk/debug\n",
    "source": "NighCyan/FNF-TG-Engine",
    "path": ".github/workflows/main.yml",
    "url": "https://github.com/NighCyan/FNF-TG-Engine/blob/84be9d5daa633cad25344c76d2fc40117cb63b5b/.github/workflows/main.yml",
    "retrieved_at": "2025-09-13T01:24:03.586826Z",
    "question_style": "style_4"
  },
  {
    "question": "What is the main purpose or outcome of this GitHub Actions workflow?",
    "answer": "\n# This is a basic workflow to help you get started with Actions\n\nname: Build\n\n# Controls when the action will run. \non:\n  # Triggers the workflow on push or pull request events but only for the master branch\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"build\"\n\n  buildAndroid:\n    name: buildAndroid\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@main\n\n      - name: Setup Android NDK\n        uses: nttld/setup-ndk@main\n        id: setup-ndk\n        with:\n          ndk-version: r15c\n\n      - name: Setup Java JDK\n        uses: actions/setup-java@main\n        with:\n          distribution: 'zulu'\n          java-version: 11\n\n      - name: Setup Android SDK\n        uses: android-actions/setup-android@main\n\n      - name: Setup Haxe\n        uses: krdlab/setup-haxe@v1.2.0\n        with:\n          haxe-version: 4.2.0\n\n      - name: Install Haxelib\n        run: |\n          haxelib setup ~/haxelib\n          haxelib install hxcpp 4.2.1 > /dev/null\n          haxelib install lime 7.9.0\n          haxelib install openfl 9.1.0\n          haxelib --never install flixel 4.11.0\n          haxelib run lime setup flixel\n          haxelib install flixel-tools\n          haxelib install flixel-ui\n          haxelib install flixel-addons 2.11.0\n          haxelib install tjson\n          haxelib install hxjsonast\n          haxelib install hscript\n          haxelib git hxCodec https://github.com/SPLCoding/hxCodec-but-it-works-xd.git\n          haxelib git linc_luajit https://github.com/Sirox228/linc_luajit\n          haxelib git extension-androidtools https://github.com/MaysLastPlay77/extension-androidtools\n          haxelib install hxcpp-debug-server\n          haxelib list\n      - name: Create Version Tag\n        run: echo \"${{github.run_id}}\" > VERSION\n\n      - name: Setup Lime\n        run: |\n          haxelib run lime setup -alias -y\n          haxelib run lime config ANDROID_SDK $ANDROID_HOME\n          haxelib run lime config ANDROID_NDK_ROOT $ANDROID_NDK_HOME\n          haxelib run lime config JAVA_HOME $JAVA_HOME\n          haxelib run lime config ANDROID_SETUP true\n          haxelib set lime 7.9.0\n          haxelib set openfl 9.1.0\n          haxelib set flixel 4.11.0\n          haxelib set flixel-addons 2.11.0\n          haxelib set hxcpp 4.2.1\n        env:\n          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}\n\n      - name: Compile\n        run: haxelib run lime build android -D NO_PRECOMPILED_HEADERS --app-version=\"4.0.0-${{ github.run_id}}\"\n\n      - name: Publish Artifact\n        uses: actions/upload-artifact@main\n        with:\n          name: buildAndroid\n          path: export/release/android/bin/app/build/outputs/apk/debug\n",
    "source": "NighCyan/FNF-TG-Engine",
    "path": ".github/workflows/main.yml",
    "url": "https://github.com/NighCyan/FNF-TG-Engine/blob/84be9d5daa633cad25344c76d2fc40117cb63b5b/.github/workflows/main.yml",
    "retrieved_at": "2025-09-13T01:24:03.930093Z",
    "question_style": "style_5"
  },
  {
    "question": "Create a GitHub Actions workflow YAML file that replicates the functionality of the provided YAML file.",
    "answer": "name: \"Main / Pull requests build\"\non:\n    pull_request:\n        paths-ignore:\n            - '.txt'\n            - 'LICENSE'\n            - 'docs/**'\n        branches: [ main ]\n    push:\n        branches:\n            - main\n\njobs:\n    build:\n        runs-on: ${{ matrix.os }}\n        strategy:\n            fail-fast: true\n            matrix:\n                os: [ windows-latest, ubuntu-latest, macos-13 ]\n            max-parallel: 1\n        steps:\n            -   uses: actions/checkout@v4.1.6\n            -   name: Set up JDK 21\n                uses: actions/setup-java@v4.2.1\n                with:\n                    distribution: 'temurin'\n                    java-version: 21\n                    architecture: x64\n            -   name: Cache Maven packages\n                uses: actions/cache@v4.0.2\n                with:\n                    path: ~/.m2\n                    key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}\n                    restore-keys: ${{ runner.os }}-m2-\n            -   name: Build with Maven\n                run: mvn --no-transfer-progress verify\n",
    "source": "juhablkdk/MyWebGoat",
    "path": ".github/workflows/build.yml",
    "url": "https://github.com/juhablkdk/MyWebGoat/blob/a738c5c74d9405b947c6882ffa6513a77f12e4bd/.github/workflows/build.yml",
    "retrieved_at": "2025-09-14T01:43:05.348385Z",
    "question_style": "style_1"
  },
  {
    "question": "What events on the `main` branch or pull requests trigger this workflow?",
    "answer": "name: \"Main / Pull requests build\"\non:\n    pull_request:\n        paths-ignore:\n            - '.txt'\n            - 'LICENSE'\n            - 'docs/**'\n        branches: [ main ]\n    push:\n        branches:\n            - main\n\njobs:\n    build:\n        runs-on: ${{ matrix.os }}\n        strategy:\n            fail-fast: true\n            matrix:\n                os: [ windows-latest, ubuntu-latest, macos-13 ]\n            max-parallel: 1\n        steps:\n            -   uses: actions/checkout@v4.1.6\n            -   name: Set up JDK 21\n                uses: actions/setup-java@v4.2.1\n                with:\n                    distribution: 'temurin'\n                    java-version: 21\n                    architecture: x64\n            -   name: Cache Maven packages\n                uses: actions/cache@v4.0.2\n                with:\n                    path: ~/.m2\n                    key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}\n                    restore-keys: ${{ runner.os }}-m2-\n            -   name: Build with Maven\n                run: mvn --no-transfer-progress verify\n",
    "source": "juhablkdk/MyWebGoat",
    "path": ".github/workflows/build.yml",
    "url": "https://github.com/juhablkdk/MyWebGoat/blob/a738c5c74d9405b947c6882ffa6513a77f12e4bd/.github/workflows/build.yml",
    "retrieved_at": "2025-09-14T01:43:05.975770Z",
    "question_style": "style_2"
  },
  {
    "question": "Which jobs or steps within the \"Main / Pull requests build\" workflow execute in parallel or sequentially based on dependencies?",
    "answer": "name: \"Main / Pull requests build\"\non:\n    pull_request:\n        paths-ignore:\n            - '.txt'\n            - 'LICENSE'\n            - 'docs/**'\n        branches: [ main ]\n    push:\n        branches:\n            - main\n\njobs:\n    build:\n        runs-on: ${{ matrix.os }}\n        strategy:\n            fail-fast: true\n            matrix:\n                os: [ windows-latest, ubuntu-latest, macos-13 ]\n            max-parallel: 1\n        steps:\n            -   uses: actions/checkout@v4.1.6\n            -   name: Set up JDK 21\n                uses: actions/setup-java@v4.2.1\n                with:\n                    distribution: 'temurin'\n                    java-version: 21\n                    architecture: x64\n            -   name: Cache Maven packages\n                uses: actions/cache@v4.0.2\n                with:\n                    path: ~/.m2\n                    key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}\n                    restore-keys: ${{ runner.os }}-m2-\n            -   name: Build with Maven\n                run: mvn --no-transfer-progress verify\n",
    "source": "juhablkdk/MyWebGoat",
    "path": ".github/workflows/build.yml",
    "url": "https://github.com/juhablkdk/MyWebGoat/blob/a738c5c74d9405b947c6882ffa6513a77f12e4bd/.github/workflows/build.yml",
    "retrieved_at": "2025-09-14T01:43:06.453365Z",
    "question_style": "style_3"
  },
  {
    "question": "How are Maven packages cached and restored based on the OS and pom.xml files?",
    "answer": "name: \"Main / Pull requests build\"\non:\n    pull_request:\n        paths-ignore:\n            - '.txt'\n            - 'LICENSE'\n            - 'docs/**'\n        branches: [ main ]\n    push:\n        branches:\n            - main\n\njobs:\n    build:\n        runs-on: ${{ matrix.os }}\n        strategy:\n            fail-fast: true\n            matrix:\n                os: [ windows-latest, ubuntu-latest, macos-13 ]\n            max-parallel: 1\n        steps:\n            -   uses: actions/checkout@v4.1.6\n            -   name: Set up JDK 21\n                uses: actions/setup-java@v4.2.1\n                with:\n                    distribution: 'temurin'\n                    java-version: 21\n                    architecture: x64\n            -   name: Cache Maven packages\n                uses: actions/cache@v4.0.2\n                with:\n                    path: ~/.m2\n                    key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}\n                    restore-keys: ${{ runner.os }}-m2-\n            -   name: Build with Maven\n                run: mvn --no-transfer-progress verify\n",
    "source": "juhablkdk/MyWebGoat",
    "path": ".github/workflows/build.yml",
    "url": "https://github.com/juhablkdk/MyWebGoat/blob/a738c5c74d9405b947c6882ffa6513a77f12e4bd/.github/workflows/build.yml",
    "retrieved_at": "2025-09-14T01:43:07.056527Z",
    "question_style": "style_4"
  },
  {
    "question": "What is the primary function or goal of this pull request build workflow?",
    "answer": "name: \"Main / Pull requests build\"\non:\n    pull_request:\n        paths-ignore:\n            - '.txt'\n            - 'LICENSE'\n            - 'docs/**'\n        branches: [ main ]\n    push:\n        branches:\n            - main\n\njobs:\n    build:\n        runs-on: ${{ matrix.os }}\n        strategy:\n            fail-fast: true\n            matrix:\n                os: [ windows-latest, ubuntu-latest, macos-13 ]\n            max-parallel: 1\n        steps:\n            -   uses: actions/checkout@v4.1.6\n            -   name: Set up JDK 21\n                uses: actions/setup-java@v4.2.1\n                with:\n                    distribution: 'temurin'\n                    java-version: 21\n                    architecture: x64\n            -   name: Cache Maven packages\n                uses: actions/cache@v4.0.2\n                with:\n                    path: ~/.m2\n                    key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}\n                    restore-keys: ${{ runner.os }}-m2-\n            -   name: Build with Maven\n                run: mvn --no-transfer-progress verify\n",
    "source": "juhablkdk/MyWebGoat",
    "path": ".github/workflows/build.yml",
    "url": "https://github.com/juhablkdk/MyWebGoat/blob/a738c5c74d9405b947c6882ffa6513a77f12e4bd/.github/workflows/build.yml",
    "retrieved_at": "2025-09-14T01:43:07.615127Z",
    "question_style": "style_5"
  },
  {
    "question": "Generate a GitHub Actions workflow YAML file that replicates the functionality of the provided workflow YAML file.",
    "answer": "name: Evaluation\n\n# Run this workflow every time a new commit pushed to your repository\non: push\n\njobs:\n\n  unit_tests:\n    name: Unit Tests\n    runs-on: ubuntu-latest\n\n    steps:\n      # Checks out a copy of your repository on the ubuntu-latest machine\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Set up Python 3.9\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install pytest\n          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi\n\n      - name: Test with pytest\n        timeout-minutes: 2\n        run: |\n          pytest -vv --timeout=20\n\n\n  bash_tests:\n    name: Bash Tests\n    runs-on: ubuntu-latest\n\n    steps:\n      # Checks out a copy of your repository on the ubuntu-latest machine\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python 3.9\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install pytest\n          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi\n          chmod +x *.sh\n\n      - name: Launch servers into background\n        run: |\n          bash ./setup.sh > load_balancer.txt &\n\n      - name: stress test on standby\n        run: |\n          bash ./stress_test.sh\n\n      - name: load_balancer Logs\n        uses: actions/upload-artifact@v2\n        with:\n          name: load_balancer logs\n          path: load_balancer.txt\n          retention-days: 1\n",
    "source": "RGarrido03/CD-Guiao-4",
    "path": ".github/workflows/score.yml",
    "url": "https://github.com/RGarrido03/CD-Guiao-4/blob/6cb1b3affae06edfedae5d2fe80a07dc7a4d0276/.github/workflows/score.yml",
    "retrieved_at": "2025-09-14T01:43:08.426622Z",
    "question_style": "style_1"
  },
  {
    "question": "What events trigger the \"Evaluation\" workflow?",
    "answer": "name: Evaluation\n\n# Run this workflow every time a new commit pushed to your repository\non: push\n\njobs:\n\n  unit_tests:\n    name: Unit Tests\n    runs-on: ubuntu-latest\n\n    steps:\n      # Checks out a copy of your repository on the ubuntu-latest machine\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Set up Python 3.9\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install pytest\n          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi\n\n      - name: Test with pytest\n        timeout-minutes: 2\n        run: |\n          pytest -vv --timeout=20\n\n\n  bash_tests:\n    name: Bash Tests\n    runs-on: ubuntu-latest\n\n    steps:\n      # Checks out a copy of your repository on the ubuntu-latest machine\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python 3.9\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install pytest\n          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi\n          chmod +x *.sh\n\n      - name: Launch servers into background\n        run: |\n          bash ./setup.sh > load_balancer.txt &\n\n      - name: stress test on standby\n        run: |\n          bash ./stress_test.sh\n\n      - name: load_balancer Logs\n        uses: actions/upload-artifact@v2\n        with:\n          name: load_balancer logs\n          path: load_balancer.txt\n          retention-days: 1\n",
    "source": "RGarrido03/CD-Guiao-4",
    "path": ".github/workflows/score.yml",
    "url": "https://github.com/RGarrido03/CD-Guiao-4/blob/6cb1b3affae06edfedae5d2fe80a07dc7a4d0276/.github/workflows/score.yml",
    "retrieved_at": "2025-09-14T01:43:08.880122Z",
    "question_style": "style_2"
  },
  {
    "question": "Which jobs and steps within jobs run in parallel, and are there any inter-job dependencies defined in the workflow?",
    "answer": "name: Evaluation\n\n# Run this workflow every time a new commit pushed to your repository\non: push\n\njobs:\n\n  unit_tests:\n    name: Unit Tests\n    runs-on: ubuntu-latest\n\n    steps:\n      # Checks out a copy of your repository on the ubuntu-latest machine\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Set up Python 3.9\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install pytest\n          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi\n\n      - name: Test with pytest\n        timeout-minutes: 2\n        run: |\n          pytest -vv --timeout=20\n\n\n  bash_tests:\n    name: Bash Tests\n    runs-on: ubuntu-latest\n\n    steps:\n      # Checks out a copy of your repository on the ubuntu-latest machine\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python 3.9\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install pytest\n          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi\n          chmod +x *.sh\n\n      - name: Launch servers into background\n        run: |\n          bash ./setup.sh > load_balancer.txt &\n\n      - name: stress test on standby\n        run: |\n          bash ./stress_test.sh\n\n      - name: load_balancer Logs\n        uses: actions/upload-artifact@v2\n        with:\n          name: load_balancer logs\n          path: load_balancer.txt\n          retention-days: 1\n",
    "source": "RGarrido03/CD-Guiao-4",
    "path": ".github/workflows/score.yml",
    "url": "https://github.com/RGarrido03/CD-Guiao-4/blob/6cb1b3affae06edfedae5d2fe80a07dc7a4d0276/.github/workflows/score.yml",
    "retrieved_at": "2025-09-14T01:43:09.464978Z",
    "question_style": "style_3"
  },
  {
    "question": "How are artifacts used to persist and access the load_balancer.txt file?",
    "answer": "name: Evaluation\n\n# Run this workflow every time a new commit pushed to your repository\non: push\n\njobs:\n\n  unit_tests:\n    name: Unit Tests\n    runs-on: ubuntu-latest\n\n    steps:\n      # Checks out a copy of your repository on the ubuntu-latest machine\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Set up Python 3.9\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install pytest\n          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi\n\n      - name: Test with pytest\n        timeout-minutes: 2\n        run: |\n          pytest -vv --timeout=20\n\n\n  bash_tests:\n    name: Bash Tests\n    runs-on: ubuntu-latest\n\n    steps:\n      # Checks out a copy of your repository on the ubuntu-latest machine\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python 3.9\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install pytest\n          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi\n          chmod +x *.sh\n\n      - name: Launch servers into background\n        run: |\n          bash ./setup.sh > load_balancer.txt &\n\n      - name: stress test on standby\n        run: |\n          bash ./stress_test.sh\n\n      - name: load_balancer Logs\n        uses: actions/upload-artifact@v2\n        with:\n          name: load_balancer logs\n          path: load_balancer.txt\n          retention-days: 1\n",
    "source": "RGarrido03/CD-Guiao-4",
    "path": ".github/workflows/score.yml",
    "url": "https://github.com/RGarrido03/CD-Guiao-4/blob/6cb1b3affae06edfedae5d2fe80a07dc7a4d0276/.github/workflows/score.yml",
    "retrieved_at": "2025-09-14T01:43:10.005816Z",
    "question_style": "style_4"
  },
  {
    "question": "What is the main function or goal of this workflow file?",
    "answer": "name: Evaluation\n\n# Run this workflow every time a new commit pushed to your repository\non: push\n\njobs:\n\n  unit_tests:\n    name: Unit Tests\n    runs-on: ubuntu-latest\n\n    steps:\n      # Checks out a copy of your repository on the ubuntu-latest machine\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Set up Python 3.9\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install pytest\n          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi\n\n      - name: Test with pytest\n        timeout-minutes: 2\n        run: |\n          pytest -vv --timeout=20\n\n\n  bash_tests:\n    name: Bash Tests\n    runs-on: ubuntu-latest\n\n    steps:\n      # Checks out a copy of your repository on the ubuntu-latest machine\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python 3.9\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install pytest\n          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi\n          chmod +x *.sh\n\n      - name: Launch servers into background\n        run: |\n          bash ./setup.sh > load_balancer.txt &\n\n      - name: stress test on standby\n        run: |\n          bash ./stress_test.sh\n\n      - name: load_balancer Logs\n        uses: actions/upload-artifact@v2\n        with:\n          name: load_balancer logs\n          path: load_balancer.txt\n          retention-days: 1\n",
    "source": "RGarrido03/CD-Guiao-4",
    "path": ".github/workflows/score.yml",
    "url": "https://github.com/RGarrido03/CD-Guiao-4/blob/6cb1b3affae06edfedae5d2fe80a07dc7a4d0276/.github/workflows/score.yml",
    "retrieved_at": "2025-09-14T01:43:10.572437Z",
    "question_style": "style_5"
  },
  {
    "question": "Create a GitHub Actions workflow YAML file that replicates the functionality of the provided workflow, including CI, releasing packages, building Docker images, and creating releases.",
    "answer": "name: Langflow Release\nrun-name: Langflow Release by @${{ github.actor }}\n\non:\n  workflow_dispatch:\n    inputs:\n      release_package_base:\n        description: \"Release Langflow Base\"\n        required: true\n        type: boolean\n        default: false\n      release_package_main:\n        description: \"Release Langflow\"\n        required: true\n        type: boolean\n        default: false\n      build_docker_base:\n        description: \"Build Docker Image for Langflow Base\"\n        required: true\n        type: boolean\n        default: false\n      build_docker_main:\n        description: \"Build Docker Image for Langflow\"\n        required: true\n        type: boolean\n        default: false\n      build_docker_ep:\n        description: \"Build Docker Image for Langflow with Entrypoint\"\n        required: false\n        type: boolean\n        default: false\n      pre_release:\n        description: \"Pre-release\"\n        required: false\n        type: boolean\n        default: false\n      create_release:\n        description: \"Whether to create a gh release\"\n        required: false\n        type: boolean\n        default: true\n\n\njobs:\n  ci:\n    if: ${{ github.event.inputs.release_package_base == 'true' || github.event.inputs.release_package_main == 'true' }}\n    name: CI\n    uses: ./.github/workflows/ci.yml\n    with:\n      python-versions: \"['3.10', '3.11', '3.12']\"\n      frontend-tests-folder: \"tests\"\n      release: true\n\n  release-base:\n    name: Release Langflow Base\n    needs: [ci]\n    if: inputs.release_package_base == true\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{ steps.check-version.outputs.version }}\n      skipped: ${{ steps.check-version.outputs.skipped }}\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      - name: Setup Environment\n        uses: ./.github/actions/setup-uv\n      - name: Install the project\n        run: uv sync --dev\n      - name: Check Version\n        id: check-version\n        run: |\n          version=$(uv tree | grep 'langflow-base' | awk '{print $3}' | sed 's/^v//')\n          last_released_version=$(curl -s \"https://pypi.org/pypi/langflow-base/json\" | jq -r '.releases | keys | .[]' | sort -V | tail -n 1)\n          if [ \"$version\" = \"$last_released_version\" ]; then\n            echo \"Version $version is already released. Skipping release.\"\n            echo skipped=true >> $GITHUB_OUTPUT\n            exit 0\n          else\n            echo version=$version >> $GITHUB_OUTPUT\n            echo skipped=false >> $GITHUB_OUTPUT\n          fi\n      - name: Build project for distribution\n        if: steps.check-version.outputs.skipped == 'false'\n        run: make build base=true args=\"--wheel\"\n      - name: Test CLI\n        if: steps.check-version.outputs.skipped == 'false'\n        run: |\n          # TODO: Unsure why the whl is not built in src/backend/base/dist\n          mkdir src/backend/base/dist\n          mv dist/*.whl src/backend/base/dist\n          uv pip install src/backend/base/dist/*.whl\n          uv run python -m langflow run --host 127.0.0.1 --port 7860 --backend-only &\n          SERVER_PID=$!\n          # Wait for the server to start\n          timeout 120 bash -c 'until curl -f http://127.0.0.1:7860/api/v1/auto_login; do sleep 2; done' || (echo \"Server did not start in time\" && kill $SERVER_PID && exit 1)\n          # Terminate the server\n          kill $SERVER_PID || (echo \"Failed to terminate the server\" && exit 1)\n          sleep 20 # give the server some time to terminate\n          # Check if the server is still running\n          if kill -0 $SERVER_PID 2>/dev/null; then\n            echo \"Failed to terminate the server\"\n            exit 0\n          else\n            echo \"Server terminated successfully\"\n          fi\n      - name: Publish to PyPI\n        if: steps.check-version.outputs.skipped == 'false'\n        env:\n          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}\n        run: |\n          make publish base=true\n      - name: Upload Artifact\n        if: steps.check-version.outputs.skipped == 'false'\n        uses: actions/upload-artifact@v4\n        with:\n          name: dist-base\n          path: src/backend/base/dist\n\n  release-main:\n    name: Release Langflow Main\n    if: inputs.release_package_main == true\n    needs: [release-base]\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{ steps.check-version.outputs.version }}\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      - name: Setup Environment\n        uses: ./.github/actions/setup-uv\n      - name: Install the project\n        run: uv sync --dev\n\n      # If pre-release is true, we need to check if  [\"a\", \"b\", \"rc\", \"dev\", \"post\"] is in the version string\n      # if the version string is incorrect, we need to exit the workflow\n      - name: Check if pre-release\n        if: inputs.pre_release == 'true'\n        run: |\n          version=$(uv tree | grep 'langflow' | grep -v 'langflow-base' | awk '{print $2}' | sed 's/^v//')\n          if [[ \"${version}\" =~ ^([0-9]+\\.)?([0-9]+\\.)?[0-9]+((a|b|rc|dev|post)([0-9]+))$ ]]; then\n            echo \"Pre-release version detected. Continuing with the release.\"\n          else\n            echo \"Invalid pre-release version detected. Exiting the workflow.\"\n            exit 1\n          fi\n      - name: Check Version\n        id: check-version\n        run: |\n          version=$(uv tree | grep 'langflow' | grep -v 'langflow-base' | awk '{print $2}' | sed 's/^v//')\n          last_released_version=$(curl -s \"https://pypi.org/pypi/langflow/json\" | jq -r '.releases | keys | .[]' | sort -V | tail -n 1)\n          if [ \"$version\" = \"$last_released_version\" ]; then\n            echo \"Version $version is already released. Skipping release.\"\n            exit 1\n          else\n            echo version=$version >> $GITHUB_OUTPUT\n          fi\n      - name: Wait for PyPI Propagation\n        if: needs.release-base.outputs.skipped == 'false'\n        run: sleep 300 # wait for 5 minutes to ensure PyPI propagation\n\n      - name: Build project for distribution\n        run: make build main=true args=\"--no-sources --wheel\"\n      - name: Test CLI\n        run: |\n          uv pip install dist/*.whl\n          uv run python -m langflow run --host 127.0.0.1 --port 7860 --backend-only &\n          SERVER_PID=$!\n          # Wait for the server to start\n          timeout 120 bash -c 'until curl -f http://127.0.0.1:7860/health_check; do sleep 2; done' || (echo \"Server did not start in time\" && kill $SERVER_PID && exit 1)\n          # Terminate the server\n          kill $SERVER_PID || (echo \"Failed to terminate the server\" && exit 1)\n          sleep 20 # give the server some time to terminate\n          # Check if the server is still running\n          if kill -0 $SERVER_PID 2>/dev/null; then\n            echo \"Failed to terminate the server\"\n            exit 0\n          else\n            echo \"Server terminated successfully\"\n          fi\n      - name: Publish to PyPI\n        env:\n          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}\n        run: |\n          make publish main=true\n      - name: Upload Artifact\n        uses: actions/upload-artifact@v4\n        with:\n          name: dist-main\n          path: dist\n\n  call_docker_build_base:\n    name: Call Docker Build Workflow for Langflow Base\n    if: inputs.build_docker_base == true\n    needs: [release-base, release-main]\n    uses: ./.github/workflows/docker-build.yml\n    with:\n      base_version: ${{ needs.release-base.outputs.version }}\n      main_version: ${{ needs.release-main.outputs.version }}\n      release_type: base\n      pre_release: ${{ inputs.pre_release }}\n    secrets: inherit\n\n  call_docker_build_main:\n    name: Call Docker Build Workflow for Langflow\n    if: inputs.build_docker_main == true\n    needs: [release-main]\n    uses: ./.github/workflows/docker-build.yml\n    with:\n      main_version: ${{ needs.release-main.outputs.version }}\n      release_type: main\n      pre_release: ${{ inputs.pre_release }}\n    secrets: inherit\n\n  call_docker_build_main_ep:\n    name: Call Docker Build Workflow for Langflow with Entrypoint\n    if: inputs.build_docker_ep == true\n    needs: [release-main]\n    uses: ./.github/workflows/docker-build.yml\n    with:\n      main_version: ${{ needs.release-main.outputs.version }}\n      release_type: main-ep\n      pre_release: False\n    secrets: inherit\n\n  create_release:\n    name: Create Release\n    runs-on: ubuntu-latest\n    needs: release-main\n    steps:\n      - uses: actions/download-artifact@v4\n        with:\n          name: dist-main\n          path: dist\n      - name: Create Release\n        uses: ncipollo/release-action@v1\n        with:\n          artifacts: \"dist/*\"\n          token: ${{ secrets.GITHUB_TOKEN }}\n          draft: false\n          generateReleaseNotes: true\n          prerelease: ${{ inputs.pre_release }}\n          tag: ${{ needs.release-main.outputs.version }}\n          commit: ${{ github.ref }}\n",
    "source": "GenuineArt/langflow-ai",
    "path": ".github/workflows/release.yml",
    "url": "https://github.com/GenuineArt/langflow-ai/blob/e47639af93b6ed8b940196d65b826eca0b316f24/.github/workflows/release.yml",
    "retrieved_at": "2025-09-15T01:44:19.408130Z",
    "question_style": "style_1"
  },
  {
    "question": "What event triggers this workflow to run, considering its configuration?",
    "answer": "name: Langflow Release\nrun-name: Langflow Release by @${{ github.actor }}\n\non:\n  workflow_dispatch:\n    inputs:\n      release_package_base:\n        description: \"Release Langflow Base\"\n        required: true\n        type: boolean\n        default: false\n      release_package_main:\n        description: \"Release Langflow\"\n        required: true\n        type: boolean\n        default: false\n      build_docker_base:\n        description: \"Build Docker Image for Langflow Base\"\n        required: true\n        type: boolean\n        default: false\n      build_docker_main:\n        description: \"Build Docker Image for Langflow\"\n        required: true\n        type: boolean\n        default: false\n      build_docker_ep:\n        description: \"Build Docker Image for Langflow with Entrypoint\"\n        required: false\n        type: boolean\n        default: false\n      pre_release:\n        description: \"Pre-release\"\n        required: false\n        type: boolean\n        default: false\n      create_release:\n        description: \"Whether to create a gh release\"\n        required: false\n        type: boolean\n        default: true\n\n\njobs:\n  ci:\n    if: ${{ github.event.inputs.release_package_base == 'true' || github.event.inputs.release_package_main == 'true' }}\n    name: CI\n    uses: ./.github/workflows/ci.yml\n    with:\n      python-versions: \"['3.10', '3.11', '3.12']\"\n      frontend-tests-folder: \"tests\"\n      release: true\n\n  release-base:\n    name: Release Langflow Base\n    needs: [ci]\n    if: inputs.release_package_base == true\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{ steps.check-version.outputs.version }}\n      skipped: ${{ steps.check-version.outputs.skipped }}\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      - name: Setup Environment\n        uses: ./.github/actions/setup-uv\n      - name: Install the project\n        run: uv sync --dev\n      - name: Check Version\n        id: check-version\n        run: |\n          version=$(uv tree | grep 'langflow-base' | awk '{print $3}' | sed 's/^v//')\n          last_released_version=$(curl -s \"https://pypi.org/pypi/langflow-base/json\" | jq -r '.releases | keys | .[]' | sort -V | tail -n 1)\n          if [ \"$version\" = \"$last_released_version\" ]; then\n            echo \"Version $version is already released. Skipping release.\"\n            echo skipped=true >> $GITHUB_OUTPUT\n            exit 0\n          else\n            echo version=$version >> $GITHUB_OUTPUT\n            echo skipped=false >> $GITHUB_OUTPUT\n          fi\n      - name: Build project for distribution\n        if: steps.check-version.outputs.skipped == 'false'\n        run: make build base=true args=\"--wheel\"\n      - name: Test CLI\n        if: steps.check-version.outputs.skipped == 'false'\n        run: |\n          # TODO: Unsure why the whl is not built in src/backend/base/dist\n          mkdir src/backend/base/dist\n          mv dist/*.whl src/backend/base/dist\n          uv pip install src/backend/base/dist/*.whl\n          uv run python -m langflow run --host 127.0.0.1 --port 7860 --backend-only &\n          SERVER_PID=$!\n          # Wait for the server to start\n          timeout 120 bash -c 'until curl -f http://127.0.0.1:7860/api/v1/auto_login; do sleep 2; done' || (echo \"Server did not start in time\" && kill $SERVER_PID && exit 1)\n          # Terminate the server\n          kill $SERVER_PID || (echo \"Failed to terminate the server\" && exit 1)\n          sleep 20 # give the server some time to terminate\n          # Check if the server is still running\n          if kill -0 $SERVER_PID 2>/dev/null; then\n            echo \"Failed to terminate the server\"\n            exit 0\n          else\n            echo \"Server terminated successfully\"\n          fi\n      - name: Publish to PyPI\n        if: steps.check-version.outputs.skipped == 'false'\n        env:\n          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}\n        run: |\n          make publish base=true\n      - name: Upload Artifact\n        if: steps.check-version.outputs.skipped == 'false'\n        uses: actions/upload-artifact@v4\n        with:\n          name: dist-base\n          path: src/backend/base/dist\n\n  release-main:\n    name: Release Langflow Main\n    if: inputs.release_package_main == true\n    needs: [release-base]\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{ steps.check-version.outputs.version }}\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      - name: Setup Environment\n        uses: ./.github/actions/setup-uv\n      - name: Install the project\n        run: uv sync --dev\n\n      # If pre-release is true, we need to check if  [\"a\", \"b\", \"rc\", \"dev\", \"post\"] is in the version string\n      # if the version string is incorrect, we need to exit the workflow\n      - name: Check if pre-release\n        if: inputs.pre_release == 'true'\n        run: |\n          version=$(uv tree | grep 'langflow' | grep -v 'langflow-base' | awk '{print $2}' | sed 's/^v//')\n          if [[ \"${version}\" =~ ^([0-9]+\\.)?([0-9]+\\.)?[0-9]+((a|b|rc|dev|post)([0-9]+))$ ]]; then\n            echo \"Pre-release version detected. Continuing with the release.\"\n          else\n            echo \"Invalid pre-release version detected. Exiting the workflow.\"\n            exit 1\n          fi\n      - name: Check Version\n        id: check-version\n        run: |\n          version=$(uv tree | grep 'langflow' | grep -v 'langflow-base' | awk '{print $2}' | sed 's/^v//')\n          last_released_version=$(curl -s \"https://pypi.org/pypi/langflow/json\" | jq -r '.releases | keys | .[]' | sort -V | tail -n 1)\n          if [ \"$version\" = \"$last_released_version\" ]; then\n            echo \"Version $version is already released. Skipping release.\"\n            exit 1\n          else\n            echo version=$version >> $GITHUB_OUTPUT\n          fi\n      - name: Wait for PyPI Propagation\n        if: needs.release-base.outputs.skipped == 'false'\n        run: sleep 300 # wait for 5 minutes to ensure PyPI propagation\n\n      - name: Build project for distribution\n        run: make build main=true args=\"--no-sources --wheel\"\n      - name: Test CLI\n        run: |\n          uv pip install dist/*.whl\n          uv run python -m langflow run --host 127.0.0.1 --port 7860 --backend-only &\n          SERVER_PID=$!\n          # Wait for the server to start\n          timeout 120 bash -c 'until curl -f http://127.0.0.1:7860/health_check; do sleep 2; done' || (echo \"Server did not start in time\" && kill $SERVER_PID && exit 1)\n          # Terminate the server\n          kill $SERVER_PID || (echo \"Failed to terminate the server\" && exit 1)\n          sleep 20 # give the server some time to terminate\n          # Check if the server is still running\n          if kill -0 $SERVER_PID 2>/dev/null; then\n            echo \"Failed to terminate the server\"\n            exit 0\n          else\n            echo \"Server terminated successfully\"\n          fi\n      - name: Publish to PyPI\n        env:\n          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}\n        run: |\n          make publish main=true\n      - name: Upload Artifact\n        uses: actions/upload-artifact@v4\n        with:\n          name: dist-main\n          path: dist\n\n  call_docker_build_base:\n    name: Call Docker Build Workflow for Langflow Base\n    if: inputs.build_docker_base == true\n    needs: [release-base, release-main]\n    uses: ./.github/workflows/docker-build.yml\n    with:\n      base_version: ${{ needs.release-base.outputs.version }}\n      main_version: ${{ needs.release-main.outputs.version }}\n      release_type: base\n      pre_release: ${{ inputs.pre_release }}\n    secrets: inherit\n\n  call_docker_build_main:\n    name: Call Docker Build Workflow for Langflow\n    if: inputs.build_docker_main == true\n    needs: [release-main]\n    uses: ./.github/workflows/docker-build.yml\n    with:\n      main_version: ${{ needs.release-main.outputs.version }}\n      release_type: main\n      pre_release: ${{ inputs.pre_release }}\n    secrets: inherit\n\n  call_docker_build_main_ep:\n    name: Call Docker Build Workflow for Langflow with Entrypoint\n    if: inputs.build_docker_ep == true\n    needs: [release-main]\n    uses: ./.github/workflows/docker-build.yml\n    with:\n      main_version: ${{ needs.release-main.outputs.version }}\n      release_type: main-ep\n      pre_release: False\n    secrets: inherit\n\n  create_release:\n    name: Create Release\n    runs-on: ubuntu-latest\n    needs: release-main\n    steps:\n      - uses: actions/download-artifact@v4\n        with:\n          name: dist-main\n          path: dist\n      - name: Create Release\n        uses: ncipollo/release-action@v1\n        with:\n          artifacts: \"dist/*\"\n          token: ${{ secrets.GITHUB_TOKEN }}\n          draft: false\n          generateReleaseNotes: true\n          prerelease: ${{ inputs.pre_release }}\n          tag: ${{ needs.release-main.outputs.version }}\n          commit: ${{ github.ref }}\n",
    "source": "GenuineArt/langflow-ai",
    "path": ".github/workflows/release.yml",
    "url": "https://github.com/GenuineArt/langflow-ai/blob/e47639af93b6ed8b940196d65b826eca0b316f24/.github/workflows/release.yml",
    "retrieved_at": "2025-09-15T01:44:20.178877Z",
    "question_style": "style_2"
  },
  {
    "question": "Which jobs or steps within this workflow run in parallel, and which depend on the successful completion of others?",
    "answer": "name: Langflow Release\nrun-name: Langflow Release by @${{ github.actor }}\n\non:\n  workflow_dispatch:\n    inputs:\n      release_package_base:\n        description: \"Release Langflow Base\"\n        required: true\n        type: boolean\n        default: false\n      release_package_main:\n        description: \"Release Langflow\"\n        required: true\n        type: boolean\n        default: false\n      build_docker_base:\n        description: \"Build Docker Image for Langflow Base\"\n        required: true\n        type: boolean\n        default: false\n      build_docker_main:\n        description: \"Build Docker Image for Langflow\"\n        required: true\n        type: boolean\n        default: false\n      build_docker_ep:\n        description: \"Build Docker Image for Langflow with Entrypoint\"\n        required: false\n        type: boolean\n        default: false\n      pre_release:\n        description: \"Pre-release\"\n        required: false\n        type: boolean\n        default: false\n      create_release:\n        description: \"Whether to create a gh release\"\n        required: false\n        type: boolean\n        default: true\n\n\njobs:\n  ci:\n    if: ${{ github.event.inputs.release_package_base == 'true' || github.event.inputs.release_package_main == 'true' }}\n    name: CI\n    uses: ./.github/workflows/ci.yml\n    with:\n      python-versions: \"['3.10', '3.11', '3.12']\"\n      frontend-tests-folder: \"tests\"\n      release: true\n\n  release-base:\n    name: Release Langflow Base\n    needs: [ci]\n    if: inputs.release_package_base == true\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{ steps.check-version.outputs.version }}\n      skipped: ${{ steps.check-version.outputs.skipped }}\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      - name: Setup Environment\n        uses: ./.github/actions/setup-uv\n      - name: Install the project\n        run: uv sync --dev\n      - name: Check Version\n        id: check-version\n        run: |\n          version=$(uv tree | grep 'langflow-base' | awk '{print $3}' | sed 's/^v//')\n          last_released_version=$(curl -s \"https://pypi.org/pypi/langflow-base/json\" | jq -r '.releases | keys | .[]' | sort -V | tail -n 1)\n          if [ \"$version\" = \"$last_released_version\" ]; then\n            echo \"Version $version is already released. Skipping release.\"\n            echo skipped=true >> $GITHUB_OUTPUT\n            exit 0\n          else\n            echo version=$version >> $GITHUB_OUTPUT\n            echo skipped=false >> $GITHUB_OUTPUT\n          fi\n      - name: Build project for distribution\n        if: steps.check-version.outputs.skipped == 'false'\n        run: make build base=true args=\"--wheel\"\n      - name: Test CLI\n        if: steps.check-version.outputs.skipped == 'false'\n        run: |\n          # TODO: Unsure why the whl is not built in src/backend/base/dist\n          mkdir src/backend/base/dist\n          mv dist/*.whl src/backend/base/dist\n          uv pip install src/backend/base/dist/*.whl\n          uv run python -m langflow run --host 127.0.0.1 --port 7860 --backend-only &\n          SERVER_PID=$!\n          # Wait for the server to start\n          timeout 120 bash -c 'until curl -f http://127.0.0.1:7860/api/v1/auto_login; do sleep 2; done' || (echo \"Server did not start in time\" && kill $SERVER_PID && exit 1)\n          # Terminate the server\n          kill $SERVER_PID || (echo \"Failed to terminate the server\" && exit 1)\n          sleep 20 # give the server some time to terminate\n          # Check if the server is still running\n          if kill -0 $SERVER_PID 2>/dev/null; then\n            echo \"Failed to terminate the server\"\n            exit 0\n          else\n            echo \"Server terminated successfully\"\n          fi\n      - name: Publish to PyPI\n        if: steps.check-version.outputs.skipped == 'false'\n        env:\n          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}\n        run: |\n          make publish base=true\n      - name: Upload Artifact\n        if: steps.check-version.outputs.skipped == 'false'\n        uses: actions/upload-artifact@v4\n        with:\n          name: dist-base\n          path: src/backend/base/dist\n\n  release-main:\n    name: Release Langflow Main\n    if: inputs.release_package_main == true\n    needs: [release-base]\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{ steps.check-version.outputs.version }}\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      - name: Setup Environment\n        uses: ./.github/actions/setup-uv\n      - name: Install the project\n        run: uv sync --dev\n\n      # If pre-release is true, we need to check if  [\"a\", \"b\", \"rc\", \"dev\", \"post\"] is in the version string\n      # if the version string is incorrect, we need to exit the workflow\n      - name: Check if pre-release\n        if: inputs.pre_release == 'true'\n        run: |\n          version=$(uv tree | grep 'langflow' | grep -v 'langflow-base' | awk '{print $2}' | sed 's/^v//')\n          if [[ \"${version}\" =~ ^([0-9]+\\.)?([0-9]+\\.)?[0-9]+((a|b|rc|dev|post)([0-9]+))$ ]]; then\n            echo \"Pre-release version detected. Continuing with the release.\"\n          else\n            echo \"Invalid pre-release version detected. Exiting the workflow.\"\n            exit 1\n          fi\n      - name: Check Version\n        id: check-version\n        run: |\n          version=$(uv tree | grep 'langflow' | grep -v 'langflow-base' | awk '{print $2}' | sed 's/^v//')\n          last_released_version=$(curl -s \"https://pypi.org/pypi/langflow/json\" | jq -r '.releases | keys | .[]' | sort -V | tail -n 1)\n          if [ \"$version\" = \"$last_released_version\" ]; then\n            echo \"Version $version is already released. Skipping release.\"\n            exit 1\n          else\n            echo version=$version >> $GITHUB_OUTPUT\n          fi\n      - name: Wait for PyPI Propagation\n        if: needs.release-base.outputs.skipped == 'false'\n        run: sleep 300 # wait for 5 minutes to ensure PyPI propagation\n\n      - name: Build project for distribution\n        run: make build main=true args=\"--no-sources --wheel\"\n      - name: Test CLI\n        run: |\n          uv pip install dist/*.whl\n          uv run python -m langflow run --host 127.0.0.1 --port 7860 --backend-only &\n          SERVER_PID=$!\n          # Wait for the server to start\n          timeout 120 bash -c 'until curl -f http://127.0.0.1:7860/health_check; do sleep 2; done' || (echo \"Server did not start in time\" && kill $SERVER_PID && exit 1)\n          # Terminate the server\n          kill $SERVER_PID || (echo \"Failed to terminate the server\" && exit 1)\n          sleep 20 # give the server some time to terminate\n          # Check if the server is still running\n          if kill -0 $SERVER_PID 2>/dev/null; then\n            echo \"Failed to terminate the server\"\n            exit 0\n          else\n            echo \"Server terminated successfully\"\n          fi\n      - name: Publish to PyPI\n        env:\n          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}\n        run: |\n          make publish main=true\n      - name: Upload Artifact\n        uses: actions/upload-artifact@v4\n        with:\n          name: dist-main\n          path: dist\n\n  call_docker_build_base:\n    name: Call Docker Build Workflow for Langflow Base\n    if: inputs.build_docker_base == true\n    needs: [release-base, release-main]\n    uses: ./.github/workflows/docker-build.yml\n    with:\n      base_version: ${{ needs.release-base.outputs.version }}\n      main_version: ${{ needs.release-main.outputs.version }}\n      release_type: base\n      pre_release: ${{ inputs.pre_release }}\n    secrets: inherit\n\n  call_docker_build_main:\n    name: Call Docker Build Workflow for Langflow\n    if: inputs.build_docker_main == true\n    needs: [release-main]\n    uses: ./.github/workflows/docker-build.yml\n    with:\n      main_version: ${{ needs.release-main.outputs.version }}\n      release_type: main\n      pre_release: ${{ inputs.pre_release }}\n    secrets: inherit\n\n  call_docker_build_main_ep:\n    name: Call Docker Build Workflow for Langflow with Entrypoint\n    if: inputs.build_docker_ep == true\n    needs: [release-main]\n    uses: ./.github/workflows/docker-build.yml\n    with:\n      main_version: ${{ needs.release-main.outputs.version }}\n      release_type: main-ep\n      pre_release: False\n    secrets: inherit\n\n  create_release:\n    name: Create Release\n    runs-on: ubuntu-latest\n    needs: release-main\n    steps:\n      - uses: actions/download-artifact@v4\n        with:\n          name: dist-main\n          path: dist\n      - name: Create Release\n        uses: ncipollo/release-action@v1\n        with:\n          artifacts: \"dist/*\"\n          token: ${{ secrets.GITHUB_TOKEN }}\n          draft: false\n          generateReleaseNotes: true\n          prerelease: ${{ inputs.pre_release }}\n          tag: ${{ needs.release-main.outputs.version }}\n          commit: ${{ github.ref }}\n",
    "source": "GenuineArt/langflow-ai",
    "path": ".github/workflows/release.yml",
    "url": "https://github.com/GenuineArt/langflow-ai/blob/e47639af93b6ed8b940196d65b826eca0b316f24/.github/workflows/release.yml",
    "retrieved_at": "2025-09-15T01:44:21.021421Z",
    "question_style": "style_3"
  },
  {
    "question": "How are secrets used to authenticate and authorize the publishing of packages to PyPI?",
    "answer": "name: Langflow Release\nrun-name: Langflow Release by @${{ github.actor }}\n\non:\n  workflow_dispatch:\n    inputs:\n      release_package_base:\n        description: \"Release Langflow Base\"\n        required: true\n        type: boolean\n        default: false\n      release_package_main:\n        description: \"Release Langflow\"\n        required: true\n        type: boolean\n        default: false\n      build_docker_base:\n        description: \"Build Docker Image for Langflow Base\"\n        required: true\n        type: boolean\n        default: false\n      build_docker_main:\n        description: \"Build Docker Image for Langflow\"\n        required: true\n        type: boolean\n        default: false\n      build_docker_ep:\n        description: \"Build Docker Image for Langflow with Entrypoint\"\n        required: false\n        type: boolean\n        default: false\n      pre_release:\n        description: \"Pre-release\"\n        required: false\n        type: boolean\n        default: false\n      create_release:\n        description: \"Whether to create a gh release\"\n        required: false\n        type: boolean\n        default: true\n\n\njobs:\n  ci:\n    if: ${{ github.event.inputs.release_package_base == 'true' || github.event.inputs.release_package_main == 'true' }}\n    name: CI\n    uses: ./.github/workflows/ci.yml\n    with:\n      python-versions: \"['3.10', '3.11', '3.12']\"\n      frontend-tests-folder: \"tests\"\n      release: true\n\n  release-base:\n    name: Release Langflow Base\n    needs: [ci]\n    if: inputs.release_package_base == true\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{ steps.check-version.outputs.version }}\n      skipped: ${{ steps.check-version.outputs.skipped }}\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      - name: Setup Environment\n        uses: ./.github/actions/setup-uv\n      - name: Install the project\n        run: uv sync --dev\n      - name: Check Version\n        id: check-version\n        run: |\n          version=$(uv tree | grep 'langflow-base' | awk '{print $3}' | sed 's/^v//')\n          last_released_version=$(curl -s \"https://pypi.org/pypi/langflow-base/json\" | jq -r '.releases | keys | .[]' | sort -V | tail -n 1)\n          if [ \"$version\" = \"$last_released_version\" ]; then\n            echo \"Version $version is already released. Skipping release.\"\n            echo skipped=true >> $GITHUB_OUTPUT\n            exit 0\n          else\n            echo version=$version >> $GITHUB_OUTPUT\n            echo skipped=false >> $GITHUB_OUTPUT\n          fi\n      - name: Build project for distribution\n        if: steps.check-version.outputs.skipped == 'false'\n        run: make build base=true args=\"--wheel\"\n      - name: Test CLI\n        if: steps.check-version.outputs.skipped == 'false'\n        run: |\n          # TODO: Unsure why the whl is not built in src/backend/base/dist\n          mkdir src/backend/base/dist\n          mv dist/*.whl src/backend/base/dist\n          uv pip install src/backend/base/dist/*.whl\n          uv run python -m langflow run --host 127.0.0.1 --port 7860 --backend-only &\n          SERVER_PID=$!\n          # Wait for the server to start\n          timeout 120 bash -c 'until curl -f http://127.0.0.1:7860/api/v1/auto_login; do sleep 2; done' || (echo \"Server did not start in time\" && kill $SERVER_PID && exit 1)\n          # Terminate the server\n          kill $SERVER_PID || (echo \"Failed to terminate the server\" && exit 1)\n          sleep 20 # give the server some time to terminate\n          # Check if the server is still running\n          if kill -0 $SERVER_PID 2>/dev/null; then\n            echo \"Failed to terminate the server\"\n            exit 0\n          else\n            echo \"Server terminated successfully\"\n          fi\n      - name: Publish to PyPI\n        if: steps.check-version.outputs.skipped == 'false'\n        env:\n          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}\n        run: |\n          make publish base=true\n      - name: Upload Artifact\n        if: steps.check-version.outputs.skipped == 'false'\n        uses: actions/upload-artifact@v4\n        with:\n          name: dist-base\n          path: src/backend/base/dist\n\n  release-main:\n    name: Release Langflow Main\n    if: inputs.release_package_main == true\n    needs: [release-base]\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{ steps.check-version.outputs.version }}\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      - name: Setup Environment\n        uses: ./.github/actions/setup-uv\n      - name: Install the project\n        run: uv sync --dev\n\n      # If pre-release is true, we need to check if  [\"a\", \"b\", \"rc\", \"dev\", \"post\"] is in the version string\n      # if the version string is incorrect, we need to exit the workflow\n      - name: Check if pre-release\n        if: inputs.pre_release == 'true'\n        run: |\n          version=$(uv tree | grep 'langflow' | grep -v 'langflow-base' | awk '{print $2}' | sed 's/^v//')\n          if [[ \"${version}\" =~ ^([0-9]+\\.)?([0-9]+\\.)?[0-9]+((a|b|rc|dev|post)([0-9]+))$ ]]; then\n            echo \"Pre-release version detected. Continuing with the release.\"\n          else\n            echo \"Invalid pre-release version detected. Exiting the workflow.\"\n            exit 1\n          fi\n      - name: Check Version\n        id: check-version\n        run: |\n          version=$(uv tree | grep 'langflow' | grep -v 'langflow-base' | awk '{print $2}' | sed 's/^v//')\n          last_released_version=$(curl -s \"https://pypi.org/pypi/langflow/json\" | jq -r '.releases | keys | .[]' | sort -V | tail -n 1)\n          if [ \"$version\" = \"$last_released_version\" ]; then\n            echo \"Version $version is already released. Skipping release.\"\n            exit 1\n          else\n            echo version=$version >> $GITHUB_OUTPUT\n          fi\n      - name: Wait for PyPI Propagation\n        if: needs.release-base.outputs.skipped == 'false'\n        run: sleep 300 # wait for 5 minutes to ensure PyPI propagation\n\n      - name: Build project for distribution\n        run: make build main=true args=\"--no-sources --wheel\"\n      - name: Test CLI\n        run: |\n          uv pip install dist/*.whl\n          uv run python -m langflow run --host 127.0.0.1 --port 7860 --backend-only &\n          SERVER_PID=$!\n          # Wait for the server to start\n          timeout 120 bash -c 'until curl -f http://127.0.0.1:7860/health_check; do sleep 2; done' || (echo \"Server did not start in time\" && kill $SERVER_PID && exit 1)\n          # Terminate the server\n          kill $SERVER_PID || (echo \"Failed to terminate the server\" && exit 1)\n          sleep 20 # give the server some time to terminate\n          # Check if the server is still running\n          if kill -0 $SERVER_PID 2>/dev/null; then\n            echo \"Failed to terminate the server\"\n            exit 0\n          else\n            echo \"Server terminated successfully\"\n          fi\n      - name: Publish to PyPI\n        env:\n          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}\n        run: |\n          make publish main=true\n      - name: Upload Artifact\n        uses: actions/upload-artifact@v4\n        with:\n          name: dist-main\n          path: dist\n\n  call_docker_build_base:\n    name: Call Docker Build Workflow for Langflow Base\n    if: inputs.build_docker_base == true\n    needs: [release-base, release-main]\n    uses: ./.github/workflows/docker-build.yml\n    with:\n      base_version: ${{ needs.release-base.outputs.version }}\n      main_version: ${{ needs.release-main.outputs.version }}\n      release_type: base\n      pre_release: ${{ inputs.pre_release }}\n    secrets: inherit\n\n  call_docker_build_main:\n    name: Call Docker Build Workflow for Langflow\n    if: inputs.build_docker_main == true\n    needs: [release-main]\n    uses: ./.github/workflows/docker-build.yml\n    with:\n      main_version: ${{ needs.release-main.outputs.version }}\n      release_type: main\n      pre_release: ${{ inputs.pre_release }}\n    secrets: inherit\n\n  call_docker_build_main_ep:\n    name: Call Docker Build Workflow for Langflow with Entrypoint\n    if: inputs.build_docker_ep == true\n    needs: [release-main]\n    uses: ./.github/workflows/docker-build.yml\n    with:\n      main_version: ${{ needs.release-main.outputs.version }}\n      release_type: main-ep\n      pre_release: False\n    secrets: inherit\n\n  create_release:\n    name: Create Release\n    runs-on: ubuntu-latest\n    needs: release-main\n    steps:\n      - uses: actions/download-artifact@v4\n        with:\n          name: dist-main\n          path: dist\n      - name: Create Release\n        uses: ncipollo/release-action@v1\n        with:\n          artifacts: \"dist/*\"\n          token: ${{ secrets.GITHUB_TOKEN }}\n          draft: false\n          generateReleaseNotes: true\n          prerelease: ${{ inputs.pre_release }}\n          tag: ${{ needs.release-main.outputs.version }}\n          commit: ${{ github.ref }}\n",
    "source": "GenuineArt/langflow-ai",
    "path": ".github/workflows/release.yml",
    "url": "https://github.com/GenuineArt/langflow-ai/blob/e47639af93b6ed8b940196d65b826eca0b316f24/.github/workflows/release.yml",
    "retrieved_at": "2025-09-15T01:44:21.654952Z",
    "question_style": "style_4"
  },
  {
    "question": "What is the primary function of this workflow regarding Langflow releases and Docker builds?",
    "answer": "name: Langflow Release\nrun-name: Langflow Release by @${{ github.actor }}\n\non:\n  workflow_dispatch:\n    inputs:\n      release_package_base:\n        description: \"Release Langflow Base\"\n        required: true\n        type: boolean\n        default: false\n      release_package_main:\n        description: \"Release Langflow\"\n        required: true\n        type: boolean\n        default: false\n      build_docker_base:\n        description: \"Build Docker Image for Langflow Base\"\n        required: true\n        type: boolean\n        default: false\n      build_docker_main:\n        description: \"Build Docker Image for Langflow\"\n        required: true\n        type: boolean\n        default: false\n      build_docker_ep:\n        description: \"Build Docker Image for Langflow with Entrypoint\"\n        required: false\n        type: boolean\n        default: false\n      pre_release:\n        description: \"Pre-release\"\n        required: false\n        type: boolean\n        default: false\n      create_release:\n        description: \"Whether to create a gh release\"\n        required: false\n        type: boolean\n        default: true\n\n\njobs:\n  ci:\n    if: ${{ github.event.inputs.release_package_base == 'true' || github.event.inputs.release_package_main == 'true' }}\n    name: CI\n    uses: ./.github/workflows/ci.yml\n    with:\n      python-versions: \"['3.10', '3.11', '3.12']\"\n      frontend-tests-folder: \"tests\"\n      release: true\n\n  release-base:\n    name: Release Langflow Base\n    needs: [ci]\n    if: inputs.release_package_base == true\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{ steps.check-version.outputs.version }}\n      skipped: ${{ steps.check-version.outputs.skipped }}\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      - name: Setup Environment\n        uses: ./.github/actions/setup-uv\n      - name: Install the project\n        run: uv sync --dev\n      - name: Check Version\n        id: check-version\n        run: |\n          version=$(uv tree | grep 'langflow-base' | awk '{print $3}' | sed 's/^v//')\n          last_released_version=$(curl -s \"https://pypi.org/pypi/langflow-base/json\" | jq -r '.releases | keys | .[]' | sort -V | tail -n 1)\n          if [ \"$version\" = \"$last_released_version\" ]; then\n            echo \"Version $version is already released. Skipping release.\"\n            echo skipped=true >> $GITHUB_OUTPUT\n            exit 0\n          else\n            echo version=$version >> $GITHUB_OUTPUT\n            echo skipped=false >> $GITHUB_OUTPUT\n          fi\n      - name: Build project for distribution\n        if: steps.check-version.outputs.skipped == 'false'\n        run: make build base=true args=\"--wheel\"\n      - name: Test CLI\n        if: steps.check-version.outputs.skipped == 'false'\n        run: |\n          # TODO: Unsure why the whl is not built in src/backend/base/dist\n          mkdir src/backend/base/dist\n          mv dist/*.whl src/backend/base/dist\n          uv pip install src/backend/base/dist/*.whl\n          uv run python -m langflow run --host 127.0.0.1 --port 7860 --backend-only &\n          SERVER_PID=$!\n          # Wait for the server to start\n          timeout 120 bash -c 'until curl -f http://127.0.0.1:7860/api/v1/auto_login; do sleep 2; done' || (echo \"Server did not start in time\" && kill $SERVER_PID && exit 1)\n          # Terminate the server\n          kill $SERVER_PID || (echo \"Failed to terminate the server\" && exit 1)\n          sleep 20 # give the server some time to terminate\n          # Check if the server is still running\n          if kill -0 $SERVER_PID 2>/dev/null; then\n            echo \"Failed to terminate the server\"\n            exit 0\n          else\n            echo \"Server terminated successfully\"\n          fi\n      - name: Publish to PyPI\n        if: steps.check-version.outputs.skipped == 'false'\n        env:\n          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}\n        run: |\n          make publish base=true\n      - name: Upload Artifact\n        if: steps.check-version.outputs.skipped == 'false'\n        uses: actions/upload-artifact@v4\n        with:\n          name: dist-base\n          path: src/backend/base/dist\n\n  release-main:\n    name: Release Langflow Main\n    if: inputs.release_package_main == true\n    needs: [release-base]\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{ steps.check-version.outputs.version }}\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      - name: Setup Environment\n        uses: ./.github/actions/setup-uv\n      - name: Install the project\n        run: uv sync --dev\n\n      # If pre-release is true, we need to check if  [\"a\", \"b\", \"rc\", \"dev\", \"post\"] is in the version string\n      # if the version string is incorrect, we need to exit the workflow\n      - name: Check if pre-release\n        if: inputs.pre_release == 'true'\n        run: |\n          version=$(uv tree | grep 'langflow' | grep -v 'langflow-base' | awk '{print $2}' | sed 's/^v//')\n          if [[ \"${version}\" =~ ^([0-9]+\\.)?([0-9]+\\.)?[0-9]+((a|b|rc|dev|post)([0-9]+))$ ]]; then\n            echo \"Pre-release version detected. Continuing with the release.\"\n          else\n            echo \"Invalid pre-release version detected. Exiting the workflow.\"\n            exit 1\n          fi\n      - name: Check Version\n        id: check-version\n        run: |\n          version=$(uv tree | grep 'langflow' | grep -v 'langflow-base' | awk '{print $2}' | sed 's/^v//')\n          last_released_version=$(curl -s \"https://pypi.org/pypi/langflow/json\" | jq -r '.releases | keys | .[]' | sort -V | tail -n 1)\n          if [ \"$version\" = \"$last_released_version\" ]; then\n            echo \"Version $version is already released. Skipping release.\"\n            exit 1\n          else\n            echo version=$version >> $GITHUB_OUTPUT\n          fi\n      - name: Wait for PyPI Propagation\n        if: needs.release-base.outputs.skipped == 'false'\n        run: sleep 300 # wait for 5 minutes to ensure PyPI propagation\n\n      - name: Build project for distribution\n        run: make build main=true args=\"--no-sources --wheel\"\n      - name: Test CLI\n        run: |\n          uv pip install dist/*.whl\n          uv run python -m langflow run --host 127.0.0.1 --port 7860 --backend-only &\n          SERVER_PID=$!\n          # Wait for the server to start\n          timeout 120 bash -c 'until curl -f http://127.0.0.1:7860/health_check; do sleep 2; done' || (echo \"Server did not start in time\" && kill $SERVER_PID && exit 1)\n          # Terminate the server\n          kill $SERVER_PID || (echo \"Failed to terminate the server\" && exit 1)\n          sleep 20 # give the server some time to terminate\n          # Check if the server is still running\n          if kill -0 $SERVER_PID 2>/dev/null; then\n            echo \"Failed to terminate the server\"\n            exit 0\n          else\n            echo \"Server terminated successfully\"\n          fi\n      - name: Publish to PyPI\n        env:\n          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}\n        run: |\n          make publish main=true\n      - name: Upload Artifact\n        uses: actions/upload-artifact@v4\n        with:\n          name: dist-main\n          path: dist\n\n  call_docker_build_base:\n    name: Call Docker Build Workflow for Langflow Base\n    if: inputs.build_docker_base == true\n    needs: [release-base, release-main]\n    uses: ./.github/workflows/docker-build.yml\n    with:\n      base_version: ${{ needs.release-base.outputs.version }}\n      main_version: ${{ needs.release-main.outputs.version }}\n      release_type: base\n      pre_release: ${{ inputs.pre_release }}\n    secrets: inherit\n\n  call_docker_build_main:\n    name: Call Docker Build Workflow for Langflow\n    if: inputs.build_docker_main == true\n    needs: [release-main]\n    uses: ./.github/workflows/docker-build.yml\n    with:\n      main_version: ${{ needs.release-main.outputs.version }}\n      release_type: main\n      pre_release: ${{ inputs.pre_release }}\n    secrets: inherit\n\n  call_docker_build_main_ep:\n    name: Call Docker Build Workflow for Langflow with Entrypoint\n    if: inputs.build_docker_ep == true\n    needs: [release-main]\n    uses: ./.github/workflows/docker-build.yml\n    with:\n      main_version: ${{ needs.release-main.outputs.version }}\n      release_type: main-ep\n      pre_release: False\n    secrets: inherit\n\n  create_release:\n    name: Create Release\n    runs-on: ubuntu-latest\n    needs: release-main\n    steps:\n      - uses: actions/download-artifact@v4\n        with:\n          name: dist-main\n          path: dist\n      - name: Create Release\n        uses: ncipollo/release-action@v1\n        with:\n          artifacts: \"dist/*\"\n          token: ${{ secrets.GITHUB_TOKEN }}\n          draft: false\n          generateReleaseNotes: true\n          prerelease: ${{ inputs.pre_release }}\n          tag: ${{ needs.release-main.outputs.version }}\n          commit: ${{ github.ref }}\n",
    "source": "GenuineArt/langflow-ai",
    "path": ".github/workflows/release.yml",
    "url": "https://github.com/GenuineArt/langflow-ai/blob/e47639af93b6ed8b940196d65b826eca0b316f24/.github/workflows/release.yml",
    "retrieved_at": "2025-09-15T01:44:22.245106Z",
    "question_style": "style_5"
  },
  {
    "question": "Create a GitHub Actions workflow YAML file that replicates the functionality defined in the provided YAML file.",
    "answer": "name: Chromatic\n\non:\n  workflow_dispatch:\n  pull_request_review:\n    types: [submitted]\n    branches:\n      - 'master'\n    paths:\n      - packages/design-system/**\n      - .github/workflows/chromatic.yml\n\nconcurrency:\n  group: chromatic-${{ github.event.pull_request.number || github.ref }}\n  cancel-in-progress: true\n\njobs:\n  chromatic:\n    if: ${{ github.event.review.state == 'approved' && !contains(github.event.pull_request.labels.*.name, 'community') }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4.1.1\n        with:\n          fetch-depth: 0\n      - run: corepack enable\n      - uses: actions/setup-node@v4.0.2\n        with:\n          node-version: 20.x\n          cache: 'pnpm'\n      - run: pnpm install --frozen-lockfile\n\n      - name: Publish to Chromatic\n        uses: chromaui/action@v11\n        id: chromatic_tests\n        continue-on-error: true\n        with:\n          workingDir: packages/design-system\n          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}\n          exitZeroOnChanges: false\n\n      - name: Success comment\n        if: steps.chromatic_tests.outcome == 'success'\n        uses: peter-evans/create-or-update-comment@v4.0.0\n        with:\n          issue-number: ${{ github.event.pull_request.number }}\n          token: ${{ secrets.GITHUB_TOKEN }}\n          edit-mode: replace\n          body: |\n            :white_check_mark: No visual regressions found.\n\n      - name: Fail comment\n        if: steps.chromatic_tests.outcome != 'success'\n        uses: peter-evans/create-or-update-comment@v4.0.0\n        with:\n          issue-number: ${{ github.event.pull_request.number }}\n          token: ${{ secrets.GITHUB_TOKEN }}\n          edit-mode: replace\n          body: |\n            [:warning: Visual regressions found](${{steps.chromatic_tests.outputs.url}}): ${{steps.chromatic_tests.outputs.changeCount}}\n",
    "source": "wsdevv/n8n-clockify-workaround",
    "path": ".github/workflows/chromatic.yml",
    "url": "https://github.com/wsdevv/n8n-clockify-workaround/blob/a77b9bf3b3b616a908320a2002d7af886f760882/.github/workflows/chromatic.yml",
    "retrieved_at": "2025-09-15T01:44:22.931027Z",
    "question_style": "style_1"
  },
  {
    "question": "What events trigger the Chromatic workflow?",
    "answer": "name: Chromatic\n\non:\n  workflow_dispatch:\n  pull_request_review:\n    types: [submitted]\n    branches:\n      - 'master'\n    paths:\n      - packages/design-system/**\n      - .github/workflows/chromatic.yml\n\nconcurrency:\n  group: chromatic-${{ github.event.pull_request.number || github.ref }}\n  cancel-in-progress: true\n\njobs:\n  chromatic:\n    if: ${{ github.event.review.state == 'approved' && !contains(github.event.pull_request.labels.*.name, 'community') }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4.1.1\n        with:\n          fetch-depth: 0\n      - run: corepack enable\n      - uses: actions/setup-node@v4.0.2\n        with:\n          node-version: 20.x\n          cache: 'pnpm'\n      - run: pnpm install --frozen-lockfile\n\n      - name: Publish to Chromatic\n        uses: chromaui/action@v11\n        id: chromatic_tests\n        continue-on-error: true\n        with:\n          workingDir: packages/design-system\n          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}\n          exitZeroOnChanges: false\n\n      - name: Success comment\n        if: steps.chromatic_tests.outcome == 'success'\n        uses: peter-evans/create-or-update-comment@v4.0.0\n        with:\n          issue-number: ${{ github.event.pull_request.number }}\n          token: ${{ secrets.GITHUB_TOKEN }}\n          edit-mode: replace\n          body: |\n            :white_check_mark: No visual regressions found.\n\n      - name: Fail comment\n        if: steps.chromatic_tests.outcome != 'success'\n        uses: peter-evans/create-or-update-comment@v4.0.0\n        with:\n          issue-number: ${{ github.event.pull_request.number }}\n          token: ${{ secrets.GITHUB_TOKEN }}\n          edit-mode: replace\n          body: |\n            [:warning: Visual regressions found](${{steps.chromatic_tests.outputs.url}}): ${{steps.chromatic_tests.outputs.changeCount}}\n",
    "source": "wsdevv/n8n-clockify-workaround",
    "path": ".github/workflows/chromatic.yml",
    "url": "https://github.com/wsdevv/n8n-clockify-workaround/blob/a77b9bf3b3b616a908320a2002d7af886f760882/.github/workflows/chromatic.yml",
    "retrieved_at": "2025-09-15T01:44:24.145355Z",
    "question_style": "style_2"
  },
  {
    "question": "Which jobs or steps within the 'chromatic' job can run in parallel, and which depend on the completion of others?",
    "answer": "name: Chromatic\n\non:\n  workflow_dispatch:\n  pull_request_review:\n    types: [submitted]\n    branches:\n      - 'master'\n    paths:\n      - packages/design-system/**\n      - .github/workflows/chromatic.yml\n\nconcurrency:\n  group: chromatic-${{ github.event.pull_request.number || github.ref }}\n  cancel-in-progress: true\n\njobs:\n  chromatic:\n    if: ${{ github.event.review.state == 'approved' && !contains(github.event.pull_request.labels.*.name, 'community') }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4.1.1\n        with:\n          fetch-depth: 0\n      - run: corepack enable\n      - uses: actions/setup-node@v4.0.2\n        with:\n          node-version: 20.x\n          cache: 'pnpm'\n      - run: pnpm install --frozen-lockfile\n\n      - name: Publish to Chromatic\n        uses: chromaui/action@v11\n        id: chromatic_tests\n        continue-on-error: true\n        with:\n          workingDir: packages/design-system\n          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}\n          exitZeroOnChanges: false\n\n      - name: Success comment\n        if: steps.chromatic_tests.outcome == 'success'\n        uses: peter-evans/create-or-update-comment@v4.0.0\n        with:\n          issue-number: ${{ github.event.pull_request.number }}\n          token: ${{ secrets.GITHUB_TOKEN }}\n          edit-mode: replace\n          body: |\n            :white_check_mark: No visual regressions found.\n\n      - name: Fail comment\n        if: steps.chromatic_tests.outcome != 'success'\n        uses: peter-evans/create-or-update-comment@v4.0.0\n        with:\n          issue-number: ${{ github.event.pull_request.number }}\n          token: ${{ secrets.GITHUB_TOKEN }}\n          edit-mode: replace\n          body: |\n            [:warning: Visual regressions found](${{steps.chromatic_tests.outputs.url}}): ${{steps.chromatic_tests.outputs.changeCount}}\n",
    "source": "wsdevv/n8n-clockify-workaround",
    "path": ".github/workflows/chromatic.yml",
    "url": "https://github.com/wsdevv/n8n-clockify-workaround/blob/a77b9bf3b3b616a908320a2002d7af886f760882/.github/workflows/chromatic.yml",
    "retrieved_at": "2025-09-15T01:44:24.703239Z",
    "question_style": "style_3"
  },
  {
    "question": "How are `CHROMATIC_PROJECT_TOKEN` and `GITHUB_TOKEN` secrets used within the workflow?",
    "answer": "name: Chromatic\n\non:\n  workflow_dispatch:\n  pull_request_review:\n    types: [submitted]\n    branches:\n      - 'master'\n    paths:\n      - packages/design-system/**\n      - .github/workflows/chromatic.yml\n\nconcurrency:\n  group: chromatic-${{ github.event.pull_request.number || github.ref }}\n  cancel-in-progress: true\n\njobs:\n  chromatic:\n    if: ${{ github.event.review.state == 'approved' && !contains(github.event.pull_request.labels.*.name, 'community') }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4.1.1\n        with:\n          fetch-depth: 0\n      - run: corepack enable\n      - uses: actions/setup-node@v4.0.2\n        with:\n          node-version: 20.x\n          cache: 'pnpm'\n      - run: pnpm install --frozen-lockfile\n\n      - name: Publish to Chromatic\n        uses: chromaui/action@v11\n        id: chromatic_tests\n        continue-on-error: true\n        with:\n          workingDir: packages/design-system\n          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}\n          exitZeroOnChanges: false\n\n      - name: Success comment\n        if: steps.chromatic_tests.outcome == 'success'\n        uses: peter-evans/create-or-update-comment@v4.0.0\n        with:\n          issue-number: ${{ github.event.pull_request.number }}\n          token: ${{ secrets.GITHUB_TOKEN }}\n          edit-mode: replace\n          body: |\n            :white_check_mark: No visual regressions found.\n\n      - name: Fail comment\n        if: steps.chromatic_tests.outcome != 'success'\n        uses: peter-evans/create-or-update-comment@v4.0.0\n        with:\n          issue-number: ${{ github.event.pull_request.number }}\n          token: ${{ secrets.GITHUB_TOKEN }}\n          edit-mode: replace\n          body: |\n            [:warning: Visual regressions found](${{steps.chromatic_tests.outputs.url}}): ${{steps.chromatic_tests.outputs.changeCount}}\n",
    "source": "wsdevv/n8n-clockify-workaround",
    "path": ".github/workflows/chromatic.yml",
    "url": "https://github.com/wsdevv/n8n-clockify-workaround/blob/a77b9bf3b3b616a908320a2002d7af886f760882/.github/workflows/chromatic.yml",
    "retrieved_at": "2025-09-15T01:44:25.275545Z",
    "question_style": "style_4"
  },
  {
    "question": "What is the main purpose of the Chromatic workflow?",
    "answer": "name: Chromatic\n\non:\n  workflow_dispatch:\n  pull_request_review:\n    types: [submitted]\n    branches:\n      - 'master'\n    paths:\n      - packages/design-system/**\n      - .github/workflows/chromatic.yml\n\nconcurrency:\n  group: chromatic-${{ github.event.pull_request.number || github.ref }}\n  cancel-in-progress: true\n\njobs:\n  chromatic:\n    if: ${{ github.event.review.state == 'approved' && !contains(github.event.pull_request.labels.*.name, 'community') }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4.1.1\n        with:\n          fetch-depth: 0\n      - run: corepack enable\n      - uses: actions/setup-node@v4.0.2\n        with:\n          node-version: 20.x\n          cache: 'pnpm'\n      - run: pnpm install --frozen-lockfile\n\n      - name: Publish to Chromatic\n        uses: chromaui/action@v11\n        id: chromatic_tests\n        continue-on-error: true\n        with:\n          workingDir: packages/design-system\n          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}\n          exitZeroOnChanges: false\n\n      - name: Success comment\n        if: steps.chromatic_tests.outcome == 'success'\n        uses: peter-evans/create-or-update-comment@v4.0.0\n        with:\n          issue-number: ${{ github.event.pull_request.number }}\n          token: ${{ secrets.GITHUB_TOKEN }}\n          edit-mode: replace\n          body: |\n            :white_check_mark: No visual regressions found.\n\n      - name: Fail comment\n        if: steps.chromatic_tests.outcome != 'success'\n        uses: peter-evans/create-or-update-comment@v4.0.0\n        with:\n          issue-number: ${{ github.event.pull_request.number }}\n          token: ${{ secrets.GITHUB_TOKEN }}\n          edit-mode: replace\n          body: |\n            [:warning: Visual regressions found](${{steps.chromatic_tests.outputs.url}}): ${{steps.chromatic_tests.outputs.changeCount}}\n",
    "source": "wsdevv/n8n-clockify-workaround",
    "path": ".github/workflows/chromatic.yml",
    "url": "https://github.com/wsdevv/n8n-clockify-workaround/blob/a77b9bf3b3b616a908320a2002d7af886f760882/.github/workflows/chromatic.yml",
    "retrieved_at": "2025-09-15T01:44:25.721204Z",
    "question_style": "style_5"
  }
]